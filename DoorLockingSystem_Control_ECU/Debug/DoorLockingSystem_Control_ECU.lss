
DoorLockingSystem_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002c9c  00002d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800084  00800084  00002d54  2**0
                  ALLOC
  3 .stab         00003234  00000000  00000000  00002d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001432  00000000  00000000  00005f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000073ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000074fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000766a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000092b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000af4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 08 	call	0x10e4	; 0x10e4 <main>
      8a:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <RecieveBothPasswords>:
uint8 status;
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
/* Description : Function Receives the first and second password from the HMI ECU */
void RecieveBothPasswords(void) {
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <RecieveBothPasswords+0xa>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <RecieveBothPasswords+0xc>
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
	/*Waiting for a response from HMI ECU to make sure they are Synched*/
	while (USART_recieveByte() != RECIEVE_PASSWORD) {}
     b56:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
     b5a:	81 32       	cpi	r24, 0x21	; 33
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <RecieveBothPasswords+0x10>
	/*Recieveing Passwords from the HMI ECU*/
	for (int i = 0; i < 5; i++) {
     b5e:	1c 82       	std	Y+4, r1	; 0x04
     b60:	1b 82       	std	Y+3, r1	; 0x03
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <RecieveBothPasswords+0x38>
		g_recievedPassword[i] = USART_recieveByte();
     b64:	0b 81       	ldd	r16, Y+3	; 0x03
     b66:	1c 81       	ldd	r17, Y+4	; 0x04
     b68:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
     b6c:	f8 01       	movw	r30, r16
     b6e:	e8 59       	subi	r30, 0x98	; 152
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	80 83       	st	Z, r24
/* Description : Function Receives the first and second password from the HMI ECU */
void RecieveBothPasswords(void) {
	/*Waiting for a response from HMI ECU to make sure they are Synched*/
	while (USART_recieveByte() != RECIEVE_PASSWORD) {}
	/*Recieveing Passwords from the HMI ECU*/
	for (int i = 0; i < 5; i++) {
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9c 83       	std	Y+4, r25	; 0x04
     b7c:	8b 83       	std	Y+3, r24	; 0x03
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	85 30       	cpi	r24, 0x05	; 5
     b84:	91 05       	cpc	r25, r1
     b86:	74 f3       	brlt	.-36     	; 0xb64 <RecieveBothPasswords+0x1e>
		g_recievedPassword[i] = USART_recieveByte();
	}
	while (USART_recieveByte() != RECIEVE_CHECK) {}
     b88:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
     b8c:	82 32       	cpi	r24, 0x22	; 34
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <RecieveBothPasswords+0x42>
	for (int i = 0; i < 5; i++) {
     b90:	1a 82       	std	Y+2, r1	; 0x02
     b92:	19 82       	std	Y+1, r1	; 0x01
     b94:	0d c0       	rjmp	.+26     	; 0xbb0 <RecieveBothPasswords+0x6a>
		g_recievedCheck[i] = USART_recieveByte();
     b96:	09 81       	ldd	r16, Y+1	; 0x01
     b98:	1a 81       	ldd	r17, Y+2	; 0x02
     b9a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
     b9e:	f8 01       	movw	r30, r16
     ba0:	e3 59       	subi	r30, 0x93	; 147
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	80 83       	st	Z, r24
	/*Recieveing Passwords from the HMI ECU*/
	for (int i = 0; i < 5; i++) {
		g_recievedPassword[i] = USART_recieveByte();
	}
	while (USART_recieveByte() != RECIEVE_CHECK) {}
	for (int i = 0; i < 5; i++) {
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	9a 81       	ldd	r25, Y+2	; 0x02
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	9a 81       	ldd	r25, Y+2	; 0x02
     bb4:	85 30       	cpi	r24, 0x05	; 5
     bb6:	91 05       	cpc	r25, r1
     bb8:	74 f3       	brlt	.-36     	; 0xb96 <RecieveBothPasswords+0x50>
		g_recievedCheck[i] = USART_recieveByte();
	}
}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	08 95       	ret

00000bcc <CheckMatching>:
/*
 * Description : Function checks if the recieved passwords from the HMI ECU Match or not
 * and sends the result to the HMI ECU
 */
uint8 CheckMatching(void) {
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <CheckMatching+0x6>
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <CheckMatching+0x8>
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
	/*variable to count if the 5 elements of the password are matching*/
	uint8 check = 0;
     bd8:	1b 82       	std	Y+3, r1	; 0x03
	/*checks if the two passwords sent by HMI ECU match*/
	for (int i = 0; i < 5; i++) {
     bda:	1a 82       	std	Y+2, r1	; 0x02
     bdc:	19 82       	std	Y+1, r1	; 0x01
     bde:	16 c0       	rjmp	.+44     	; 0xc0c <CheckMatching+0x40>
		if (g_recievedCheck[i] == g_recievedPassword[i]) {
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
     be4:	fc 01       	movw	r30, r24
     be6:	e3 59       	subi	r30, 0x93	; 147
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	20 81       	ld	r18, Z
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	fc 01       	movw	r30, r24
     bf2:	e8 59       	subi	r30, 0x98	; 152
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	80 81       	ld	r24, Z
     bf8:	28 17       	cp	r18, r24
     bfa:	19 f4       	brne	.+6      	; 0xc02 <CheckMatching+0x36>
			check++;
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	8b 83       	std	Y+3, r24	; 0x03
 */
uint8 CheckMatching(void) {
	/*variable to count if the 5 elements of the password are matching*/
	uint8 check = 0;
	/*checks if the two passwords sent by HMI ECU match*/
	for (int i = 0; i < 5; i++) {
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	9a 83       	std	Y+2, r25	; 0x02
     c0a:	89 83       	std	Y+1, r24	; 0x01
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	9a 81       	ldd	r25, Y+2	; 0x02
     c10:	85 30       	cpi	r24, 0x05	; 5
     c12:	91 05       	cpc	r25, r1
     c14:	2c f3       	brlt	.-54     	; 0xbe0 <CheckMatching+0x14>
		if (g_recievedCheck[i] == g_recievedPassword[i]) {
			check++;
		}
	}
	/*if they match sending to HMI ECU they match and returns SUCCESS*/
	if (check == 5) {
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	85 30       	cpi	r24, 0x05	; 5
     c1a:	49 f4       	brne	.+18     	; 0xc2e <CheckMatching+0x62>
		USART_sendByte(READY);
     c1c:	81 e1       	ldi	r24, 0x11	; 17
     c1e:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		USART_sendByte(MATCHING);
     c22:	84 e1       	ldi	r24, 0x14	; 20
     c24:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		return SUCCESS;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	8c 83       	std	Y+4, r24	; 0x04
     c2c:	07 c0       	rjmp	.+14     	; 0xc3c <CheckMatching+0x70>
	}
	/*if they dont match sending to HMI ECU they dont match and returns ERROR*/
	else {
		USART_sendByte(READY);
     c2e:	81 e1       	ldi	r24, 0x11	; 17
     c30:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		USART_sendByte(NOT_MATCHING);
     c34:	83 e1       	ldi	r24, 0x13	; 19
     c36:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		return ERROR;
     c3a:	1c 82       	std	Y+4, r1	; 0x04
     c3c:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <SavingPassword>:
/*
 * Description : Function saves the recieved password from the HMI ECU */
void SavingPassword(void) {
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	60 97       	sbiw	r28, 0x10	; 16
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
	/*Saving the password sent by HMI ECU in the EEPROM and sets the Array to default value*/
	for (int i = 0; i < 5; i++) {
     c60:	18 8a       	std	Y+16, r1	; 0x10
     c62:	1f 86       	std	Y+15, r1	; 0x0f
     c64:	8d c0       	rjmp	.+282    	; 0xd80 <SavingPassword+0x134>
		EEPROM_writeByte((0x0311 + i), g_recievedPassword[i]);
     c66:	8f 85       	ldd	r24, Y+15	; 0x0f
     c68:	98 89       	ldd	r25, Y+16	; 0x10
     c6a:	8f 5e       	subi	r24, 0xEF	; 239
     c6c:	9c 4f       	sbci	r25, 0xFC	; 252
     c6e:	9c 01       	movw	r18, r24
     c70:	8f 85       	ldd	r24, Y+15	; 0x0f
     c72:	98 89       	ldd	r25, Y+16	; 0x10
     c74:	fc 01       	movw	r30, r24
     c76:	e8 59       	subi	r30, 0x98	; 152
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	40 81       	ld	r20, Z
     c7c:	c9 01       	movw	r24, r18
     c7e:	64 2f       	mov	r22, r20
     c80:	0e 94 8c 09 	call	0x1318	; 0x1318 <EEPROM_writeByte>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	a0 e2       	ldi	r26, 0x20	; 32
     c8a:	b1 e4       	ldi	r27, 0x41	; 65
     c8c:	8b 87       	std	Y+11, r24	; 0x0b
     c8e:	9c 87       	std	Y+12, r25	; 0x0c
     c90:	ad 87       	std	Y+13, r26	; 0x0d
     c92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c94:	6b 85       	ldd	r22, Y+11	; 0x0b
     c96:	7c 85       	ldd	r23, Y+12	; 0x0c
     c98:	8d 85       	ldd	r24, Y+13	; 0x0d
     c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	4a ef       	ldi	r20, 0xFA	; 250
     ca2:	54 e4       	ldi	r21, 0x44	; 68
     ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	8f 83       	std	Y+7, r24	; 0x07
     cae:	98 87       	std	Y+8, r25	; 0x08
     cb0:	a9 87       	std	Y+9, r26	; 0x09
     cb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cb4:	6f 81       	ldd	r22, Y+7	; 0x07
     cb6:	78 85       	ldd	r23, Y+8	; 0x08
     cb8:	89 85       	ldd	r24, Y+9	; 0x09
     cba:	9a 85       	ldd	r25, Y+10	; 0x0a
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e8       	ldi	r20, 0x80	; 128
     cc2:	5f e3       	ldi	r21, 0x3F	; 63
     cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc8:	88 23       	and	r24, r24
     cca:	2c f4       	brge	.+10     	; 0xcd6 <SavingPassword+0x8a>
		__ticks = 1;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9e 83       	std	Y+6, r25	; 0x06
     cd2:	8d 83       	std	Y+5, r24	; 0x05
     cd4:	3f c0       	rjmp	.+126    	; 0xd54 <SavingPassword+0x108>
	else if (__tmp > 65535)
     cd6:	6f 81       	ldd	r22, Y+7	; 0x07
     cd8:	78 85       	ldd	r23, Y+8	; 0x08
     cda:	89 85       	ldd	r24, Y+9	; 0x09
     cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	3f ef       	ldi	r19, 0xFF	; 255
     ce2:	4f e7       	ldi	r20, 0x7F	; 127
     ce4:	57 e4       	ldi	r21, 0x47	; 71
     ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cea:	18 16       	cp	r1, r24
     cec:	4c f5       	brge	.+82     	; 0xd40 <SavingPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cee:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e2       	ldi	r20, 0x20	; 32
     cfc:	51 e4       	ldi	r21, 0x41	; 65
     cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	bc 01       	movw	r22, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	9e 83       	std	Y+6, r25	; 0x06
     d14:	8d 83       	std	Y+5, r24	; 0x05
     d16:	0f c0       	rjmp	.+30     	; 0xd36 <SavingPassword+0xea>
     d18:	88 ec       	ldi	r24, 0xC8	; 200
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9c 83       	std	Y+4, r25	; 0x04
     d1e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	9c 81       	ldd	r25, Y+4	; 0x04
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <SavingPassword+0xd8>
     d28:	9c 83       	std	Y+4, r25	; 0x04
     d2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	9e 83       	std	Y+6, r25	; 0x06
     d34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	9e 81       	ldd	r25, Y+6	; 0x06
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	69 f7       	brne	.-38     	; 0xd18 <SavingPassword+0xcc>
     d3e:	14 c0       	rjmp	.+40     	; 0xd68 <SavingPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d40:	6f 81       	ldd	r22, Y+7	; 0x07
     d42:	78 85       	ldd	r23, Y+8	; 0x08
     d44:	89 85       	ldd	r24, Y+9	; 0x09
     d46:	9a 85       	ldd	r25, Y+10	; 0x0a
     d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9e 83       	std	Y+6, r25	; 0x06
     d52:	8d 83       	std	Y+5, r24	; 0x05
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	9e 81       	ldd	r25, Y+6	; 0x06
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <SavingPassword+0x114>
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		g_recievedPassword[i] = '!';
     d68:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6a:	98 89       	ldd	r25, Y+16	; 0x10
     d6c:	fc 01       	movw	r30, r24
     d6e:	e8 59       	subi	r30, 0x98	; 152
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	81 e2       	ldi	r24, 0x21	; 33
     d74:	80 83       	st	Z, r24
}
/*
 * Description : Function saves the recieved password from the HMI ECU */
void SavingPassword(void) {
	/*Saving the password sent by HMI ECU in the EEPROM and sets the Array to default value*/
	for (int i = 0; i < 5; i++) {
     d76:	8f 85       	ldd	r24, Y+15	; 0x0f
     d78:	98 89       	ldd	r25, Y+16	; 0x10
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	98 8b       	std	Y+16, r25	; 0x10
     d7e:	8f 87       	std	Y+15, r24	; 0x0f
     d80:	8f 85       	ldd	r24, Y+15	; 0x0f
     d82:	98 89       	ldd	r25, Y+16	; 0x10
     d84:	85 30       	cpi	r24, 0x05	; 5
     d86:	91 05       	cpc	r25, r1
     d88:	0c f4       	brge	.+2      	; 0xd8c <SavingPassword+0x140>
     d8a:	6d cf       	rjmp	.-294    	; 0xc66 <SavingPassword+0x1a>
		EEPROM_writeByte((0x0311 + i), g_recievedPassword[i]);
		_delay_ms(10);
		g_recievedPassword[i] = '!';
	}
}
     d8c:	60 96       	adiw	r28, 0x10	; 16
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <CheckSavedPassword>:
/*
 * Description : Function checks if they Entered password sent by the HMI ECU matches the
 * saved password in the EEPROM and sends the result to the HMI ECU
 */
uint8 CheckSavedPassword(void) {
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	6b 97       	sbiw	r28, 0x1b	; 27
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
	/*Array to store the password saved in the EEPROM*/
	uint8 savedPassword[5];
	/*variable to count if the 5 elements of the password are matching*/
	uint8 check = 0;
     db6:	1d 8a       	std	Y+21, r1	; 0x15
	/*waiting for HMI ECU to send a password to check it*/
	while (USART_recieveByte() != RECIEVE_PASSWORD) {}
     db8:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
     dbc:	81 32       	cpi	r24, 0x21	; 33
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <CheckSavedPassword+0x1a>
	/*Receiving the password sent by the HMI ECU*/
	for (int i = 0; i < 5; i++) {
     dc0:	1c 8a       	std	Y+20, r1	; 0x14
     dc2:	1b 8a       	std	Y+19, r1	; 0x13
     dc4:	0d c0       	rjmp	.+26     	; 0xde0 <CheckSavedPassword+0x42>
		g_recievedPassword[i] = USART_recieveByte();
     dc6:	0b 89       	ldd	r16, Y+19	; 0x13
     dc8:	1c 89       	ldd	r17, Y+20	; 0x14
     dca:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
     dce:	f8 01       	movw	r30, r16
     dd0:	e8 59       	subi	r30, 0x98	; 152
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	80 83       	st	Z, r24
	/*variable to count if the 5 elements of the password are matching*/
	uint8 check = 0;
	/*waiting for HMI ECU to send a password to check it*/
	while (USART_recieveByte() != RECIEVE_PASSWORD) {}
	/*Receiving the password sent by the HMI ECU*/
	for (int i = 0; i < 5; i++) {
     dd6:	8b 89       	ldd	r24, Y+19	; 0x13
     dd8:	9c 89       	ldd	r25, Y+20	; 0x14
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	9c 8b       	std	Y+20, r25	; 0x14
     dde:	8b 8b       	std	Y+19, r24	; 0x13
     de0:	8b 89       	ldd	r24, Y+19	; 0x13
     de2:	9c 89       	ldd	r25, Y+20	; 0x14
     de4:	85 30       	cpi	r24, 0x05	; 5
     de6:	91 05       	cpc	r25, r1
     de8:	74 f3       	brlt	.-36     	; 0xdc6 <CheckSavedPassword+0x28>
		g_recievedPassword[i] = USART_recieveByte();
	}
	/*Reading the saved password in the EEPROM*/
	for (int i = 0; i < 5; i++) {
     dea:	1a 8a       	std	Y+18, r1	; 0x12
     dec:	19 8a       	std	Y+17, r1	; 0x11
     dee:	87 c0       	rjmp	.+270    	; 0xefe <CheckSavedPassword+0x160>
		EEPROM_readByte((0x0311 + i), &savedPassword[i]);
     df0:	89 89       	ldd	r24, Y+17	; 0x11
     df2:	9a 89       	ldd	r25, Y+18	; 0x12
     df4:	8f 5e       	subi	r24, 0xEF	; 239
     df6:	9c 4f       	sbci	r25, 0xFC	; 252
     df8:	ac 01       	movw	r20, r24
     dfa:	89 89       	ldd	r24, Y+17	; 0x11
     dfc:	9a 89       	ldd	r25, Y+18	; 0x12
     dfe:	9e 01       	movw	r18, r28
     e00:	2a 5e       	subi	r18, 0xEA	; 234
     e02:	3f 4f       	sbci	r19, 0xFF	; 255
     e04:	28 0f       	add	r18, r24
     e06:	39 1f       	adc	r19, r25
     e08:	ca 01       	movw	r24, r20
     e0a:	b9 01       	movw	r22, r18
     e0c:	0e 94 cd 09 	call	0x139a	; 0x139a <EEPROM_readByte>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	a0 e2       	ldi	r26, 0x20	; 32
     e16:	b1 e4       	ldi	r27, 0x41	; 65
     e18:	8b 87       	std	Y+11, r24	; 0x0b
     e1a:	9c 87       	std	Y+12, r25	; 0x0c
     e1c:	ad 87       	std	Y+13, r26	; 0x0d
     e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e20:	6b 85       	ldd	r22, Y+11	; 0x0b
     e22:	7c 85       	ldd	r23, Y+12	; 0x0c
     e24:	8d 85       	ldd	r24, Y+13	; 0x0d
     e26:	9e 85       	ldd	r25, Y+14	; 0x0e
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	4a ef       	ldi	r20, 0xFA	; 250
     e2e:	54 e4       	ldi	r21, 0x44	; 68
     e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	8f 83       	std	Y+7, r24	; 0x07
     e3a:	98 87       	std	Y+8, r25	; 0x08
     e3c:	a9 87       	std	Y+9, r26	; 0x09
     e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e40:	6f 81       	ldd	r22, Y+7	; 0x07
     e42:	78 85       	ldd	r23, Y+8	; 0x08
     e44:	89 85       	ldd	r24, Y+9	; 0x09
     e46:	9a 85       	ldd	r25, Y+10	; 0x0a
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 e8       	ldi	r20, 0x80	; 128
     e4e:	5f e3       	ldi	r21, 0x3F	; 63
     e50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e54:	88 23       	and	r24, r24
     e56:	2c f4       	brge	.+10     	; 0xe62 <CheckSavedPassword+0xc4>
		__ticks = 1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	9e 83       	std	Y+6, r25	; 0x06
     e5e:	8d 83       	std	Y+5, r24	; 0x05
     e60:	3f c0       	rjmp	.+126    	; 0xee0 <CheckSavedPassword+0x142>
	else if (__tmp > 65535)
     e62:	6f 81       	ldd	r22, Y+7	; 0x07
     e64:	78 85       	ldd	r23, Y+8	; 0x08
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	3f ef       	ldi	r19, 0xFF	; 255
     e6e:	4f e7       	ldi	r20, 0x7F	; 127
     e70:	57 e4       	ldi	r21, 0x47	; 71
     e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e76:	18 16       	cp	r1, r24
     e78:	4c f5       	brge	.+82     	; 0xecc <CheckSavedPassword+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e80:	9e 85       	ldd	r25, Y+14	; 0x0e
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e2       	ldi	r20, 0x20	; 32
     e88:	51 e4       	ldi	r21, 0x41	; 65
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	0f c0       	rjmp	.+30     	; 0xec2 <CheckSavedPassword+0x124>
     ea4:	88 ec       	ldi	r24, 0xC8	; 200
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	9c 83       	std	Y+4, r25	; 0x04
     eaa:	8b 83       	std	Y+3, r24	; 0x03
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <CheckSavedPassword+0x112>
     eb4:	9c 83       	std	Y+4, r25	; 0x04
     eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	9e 83       	std	Y+6, r25	; 0x06
     ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	9e 81       	ldd	r25, Y+6	; 0x06
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	69 f7       	brne	.-38     	; 0xea4 <CheckSavedPassword+0x106>
     eca:	14 c0       	rjmp	.+40     	; 0xef4 <CheckSavedPassword+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ecc:	6f 81       	ldd	r22, Y+7	; 0x07
     ece:	78 85       	ldd	r23, Y+8	; 0x08
     ed0:	89 85       	ldd	r24, Y+9	; 0x09
     ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <CheckSavedPassword+0x14e>
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
	/*Receiving the password sent by the HMI ECU*/
	for (int i = 0; i < 5; i++) {
		g_recievedPassword[i] = USART_recieveByte();
	}
	/*Reading the saved password in the EEPROM*/
	for (int i = 0; i < 5; i++) {
     ef4:	89 89       	ldd	r24, Y+17	; 0x11
     ef6:	9a 89       	ldd	r25, Y+18	; 0x12
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	9a 8b       	std	Y+18, r25	; 0x12
     efc:	89 8b       	std	Y+17, r24	; 0x11
     efe:	89 89       	ldd	r24, Y+17	; 0x11
     f00:	9a 89       	ldd	r25, Y+18	; 0x12
     f02:	85 30       	cpi	r24, 0x05	; 5
     f04:	91 05       	cpc	r25, r1
     f06:	0c f4       	brge	.+2      	; 0xf0a <CheckSavedPassword+0x16c>
     f08:	73 cf       	rjmp	.-282    	; 0xdf0 <CheckSavedPassword+0x52>
		EEPROM_readByte((0x0311 + i), &savedPassword[i]);
		_delay_ms(10);
	}
	/*checking if the password sent by HMI ECU matches the one saved in the EEPROM and
	 * count the number of matching of the elements*/
	for (int i = 0; i < 5; i++) {
     f0a:	18 8a       	std	Y+16, r1	; 0x10
     f0c:	1f 86       	std	Y+15, r1	; 0x0f
     f0e:	18 c0       	rjmp	.+48     	; 0xf40 <CheckSavedPassword+0x1a2>
		if (savedPassword[i] == g_recievedPassword[i]) {
     f10:	2f 85       	ldd	r18, Y+15	; 0x0f
     f12:	38 89       	ldd	r19, Y+16	; 0x10
     f14:	ce 01       	movw	r24, r28
     f16:	46 96       	adiw	r24, 0x16	; 22
     f18:	fc 01       	movw	r30, r24
     f1a:	e2 0f       	add	r30, r18
     f1c:	f3 1f       	adc	r31, r19
     f1e:	20 81       	ld	r18, Z
     f20:	8f 85       	ldd	r24, Y+15	; 0x0f
     f22:	98 89       	ldd	r25, Y+16	; 0x10
     f24:	fc 01       	movw	r30, r24
     f26:	e8 59       	subi	r30, 0x98	; 152
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	80 81       	ld	r24, Z
     f2c:	28 17       	cp	r18, r24
     f2e:	19 f4       	brne	.+6      	; 0xf36 <CheckSavedPassword+0x198>
			check++;
     f30:	8d 89       	ldd	r24, Y+21	; 0x15
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	8d 8b       	std	Y+21, r24	; 0x15
		EEPROM_readByte((0x0311 + i), &savedPassword[i]);
		_delay_ms(10);
	}
	/*checking if the password sent by HMI ECU matches the one saved in the EEPROM and
	 * count the number of matching of the elements*/
	for (int i = 0; i < 5; i++) {
     f36:	8f 85       	ldd	r24, Y+15	; 0x0f
     f38:	98 89       	ldd	r25, Y+16	; 0x10
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	98 8b       	std	Y+16, r25	; 0x10
     f3e:	8f 87       	std	Y+15, r24	; 0x0f
     f40:	8f 85       	ldd	r24, Y+15	; 0x0f
     f42:	98 89       	ldd	r25, Y+16	; 0x10
     f44:	85 30       	cpi	r24, 0x05	; 5
     f46:	91 05       	cpc	r25, r1
     f48:	1c f3       	brlt	.-58     	; 0xf10 <CheckSavedPassword+0x172>
		if (savedPassword[i] == g_recievedPassword[i]) {
			check++;
		}
	}
	/*if they match sending to HMI ECU they match and returns SUCCESS*/
	if (check == 5) {
     f4a:	8d 89       	ldd	r24, Y+21	; 0x15
     f4c:	85 30       	cpi	r24, 0x05	; 5
     f4e:	49 f4       	brne	.+18     	; 0xf62 <CheckSavedPassword+0x1c4>
		USART_sendByte(READY);
     f50:	81 e1       	ldi	r24, 0x11	; 17
     f52:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		USART_sendByte(MATCHING);
     f56:	84 e1       	ldi	r24, 0x14	; 20
     f58:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		return SUCCESS;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	8b 8f       	std	Y+27, r24	; 0x1b
     f60:	07 c0       	rjmp	.+14     	; 0xf70 <CheckSavedPassword+0x1d2>
	}
	/*if they dont match sending to HMI ECU they dont match and returns ERROR*/
	else {
		USART_sendByte(READY);
     f62:	81 e1       	ldi	r24, 0x11	; 17
     f64:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		USART_sendByte(NOT_MATCHING);
     f68:	83 e1       	ldi	r24, 0x13	; 19
     f6a:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		return ERROR;
     f6e:	1b 8e       	std	Y+27, r1	; 0x1b
     f70:	8b 8d       	ldd	r24, Y+27	; 0x1b
	}
}
     f72:	6b 96       	adiw	r28, 0x1b	; 27
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	08 95       	ret

00000f88 <MotorControl>:
/* Description : The Call back Function of Timer1 to control the door Motor*/
void MotorControl(void) {
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	/*static variable to control the DC MOTOR*/
	static uint8 flag = 0;
	flag++;
     f90:	80 91 84 00 	lds	r24, 0x0084
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	80 93 84 00 	sts	0x0084, r24
	/*When is flag==4 (15 secs) sends to the HMI ECU that the door is opened and
	 * stops the motor for (3 secs) to leave it open*/
	if (flag == 4) {
     f9a:	80 91 84 00 	lds	r24, 0x0084
     f9e:	84 30       	cpi	r24, 0x04	; 4
     fa0:	39 f4       	brne	.+14     	; 0xfb0 <MotorControl+0x28>
		USART_sendByte(DOOR_OPENED);
     fa2:	87 e1       	ldi	r24, 0x17	; 23
     fa4:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		DcMotor_Rotate(STOP, 0);
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	0e 94 47 09 	call	0x128e	; 0x128e <DcMotor_Rotate>
	}
	/*When is flag==5 (18 secs) sends to the HMI ECU that the door is going to close and
	 * starts to close it*/
	if (flag == 5) {
     fb0:	80 91 84 00 	lds	r24, 0x0084
     fb4:	85 30       	cpi	r24, 0x05	; 5
     fb6:	39 f4       	brne	.+14     	; 0xfc6 <MotorControl+0x3e>
		USART_sendByte(HOLD);
     fb8:	86 e1       	ldi	r24, 0x16	; 22
     fba:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		DcMotor_Rotate(A_CLOCKWISE, 100);
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	64 e6       	ldi	r22, 0x64	; 100
     fc2:	0e 94 47 09 	call	0x128e	; 0x128e <DcMotor_Rotate>
	}
	/*When is flag==10 (33 secs) sends to the HMI ECU that the door is closed and
		 * stops the DC MOTOR and Deinitialize Timer1 and resets the flag variable*/
	if (flag == 10) {
     fc6:	80 91 84 00 	lds	r24, 0x0084
     fca:	8a 30       	cpi	r24, 0x0A	; 10
     fcc:	59 f4       	brne	.+22     	; 0xfe4 <MotorControl+0x5c>
		USART_sendByte(DOOR_CLOSED);
     fce:	88 e1       	ldi	r24, 0x18	; 24
     fd0:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		DcMotor_Rotate(STOP, 0);
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	0e 94 47 09 	call	0x128e	; 0x128e <DcMotor_Rotate>
		Timer1_deInit();
     fdc:	0e 94 c3 13 	call	0x2786	; 0x2786 <Timer1_deInit>
		flag = 0;
     fe0:	10 92 84 00 	sts	0x0084, r1
	}
}
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <OPEN_DOOROption>:
/*Description : Function to start Timer1 and Door Motor*/
void OPEN_DOOROption() {
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
	/*waiting for HMI ECU to be in synch*/
	while (USART_recieveByte() != READY) {}
     ff2:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
     ff6:	81 31       	cpi	r24, 0x11	; 17
     ff8:	e1 f7       	brne	.-8      	; 0xff2 <OPEN_DOOROption+0x8>
	/*Starting Timer1 with the DC MOTOR Configurations*/
	Timer1_init(&MOTORConfigurations_Ptr);
     ffa:	82 e7       	ldi	r24, 0x72	; 114
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 3d 13 	call	0x267a	; 0x267a <Timer1_init>
	/*Starting the DC MOTOR With max speed*/
	DcMotor_Rotate(CLOCKWISE, 100);
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	64 e6       	ldi	r22, 0x64	; 100
    1006:	0e 94 47 09 	call	0x128e	; 0x128e <DcMotor_Rotate>
}
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <BuzzerControl>:
/*Description : The Call back Function of Timer1 to control the Buzzer*/
void BuzzerControl(void) {
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
	/*static variable to control the Buzzer*/
	static uint8 flag = 0;
	/*When is flag==10 (60 secs) Turns the buzzer off and DEinitializie Timer1 and
	 * tells The HMI ECU that the buzzer is off*/
	flag++;
    1018:	80 91 85 00 	lds	r24, 0x0085
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	80 93 85 00 	sts	0x0085, r24
	if (flag == 10) {
    1022:	80 91 85 00 	lds	r24, 0x0085
    1026:	8a 30       	cpi	r24, 0x0A	; 10
    1028:	49 f4       	brne	.+18     	; 0x103c <BuzzerControl+0x2c>
		Buzzer_OFF();
    102a:	0e 94 20 09 	call	0x1240	; 0x1240 <Buzzer_OFF>
		Timer1_deInit();
    102e:	0e 94 c3 13 	call	0x2786	; 0x2786 <Timer1_deInit>
		USART_sendByte(BUZZER_OFF);
    1032:	84 e2       	ldi	r24, 0x24	; 36
    1034:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		flag = 0;
    1038:	10 92 85 00 	sts	0x0085, r1
	}
}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <ChangeSystemPassword>:
/* Description : Function to recieve new password until they match and saves the new password
 * if they match in the EEPROM*/
void ChangeSystemPassword(void) {
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
	/*Waiting for a response from HMI ECU to make sure they are Synched*/
	while (USART_recieveByte() != READY) {}
    104a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
    104e:	81 31       	cpi	r24, 0x11	; 17
    1050:	e1 f7       	brne	.-8      	; 0x104a <ChangeSystemPassword+0x8>
	/*Recieveing Passwords and checks on them until they match and saves it inside EEPROM*/
	do {
		RecieveBothPasswords();
    1052:	0e 94 a3 05 	call	0xb46	; 0xb46 <RecieveBothPasswords>
		status = CheckMatching();
    1056:	0e 94 e6 05 	call	0xbcc	; 0xbcc <CheckMatching>
    105a:	80 93 88 00 	sts	0x0088, r24
	} while (status != SUCCESS);
    105e:	80 91 88 00 	lds	r24, 0x0088
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	b1 f7       	brne	.-20     	; 0x1052 <ChangeSystemPassword+0x10>
	if (status == SUCCESS) {
    1066:	80 91 88 00 	lds	r24, 0x0088
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	11 f4       	brne	.+4      	; 0x1072 <ChangeSystemPassword+0x30>
		SavingPassword();
    106e:	0e 94 26 06 	call	0xc4c	; 0xc4c <SavingPassword>
	}
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <WrongPasswordEntry>:
/* Description : Function to recieve a password for maximum 2 times and checks if it matches
 * the password saved in EEPROM if it matches it calls the selected option(input for the function)
 *  if it doesnt match the system enters HOLD mode */
void WrongPasswordEntry(void (*func_ptr)(void)) {
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	00 d0       	rcall	.+0      	; 0x107e <WrongPasswordEntry+0x6>
    107e:	0f 92       	push	r0
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	9b 83       	std	Y+3, r25	; 0x03
    1086:	8a 83       	std	Y+2, r24	; 0x02
	/*Variable to count the times for wrong password entry*/
	uint8 count = 0;
    1088:	19 82       	std	Y+1, r1	; 0x01
	/*checks if the password sent by HMI ECU matches the saved password in EEPROM maximum 2 times
	 and if it matches before this it exits the loop and calls the selected option function */
	do {
		status = CheckSavedPassword();
    108a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CheckSavedPassword>
    108e:	80 93 88 00 	sts	0x0088, r24
		count++;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	89 83       	std	Y+1, r24	; 0x01
	} while ((count < 2) && (status != SUCCESS));
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	20 f4       	brcc	.+8      	; 0x10a6 <WrongPasswordEntry+0x2e>
    109e:	80 91 88 00 	lds	r24, 0x0088
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	91 f7       	brne	.-28     	; 0x108a <WrongPasswordEntry+0x12>
	if (status == SUCCESS) {
    10a6:	80 91 88 00 	lds	r24, 0x0088
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	21 f4       	brne	.+8      	; 0x10b6 <WrongPasswordEntry+0x3e>
		/*Calling the selected option function*/
		func_ptr();
    10ae:	ea 81       	ldd	r30, Y+2	; 0x02
    10b0:	fb 81       	ldd	r31, Y+3	; 0x03
    10b2:	09 95       	icall
    10b4:	11 c0       	rjmp	.+34     	; 0x10d8 <WrongPasswordEntry+0x60>
	} else if (count == 2) {
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	71 f4       	brne	.+28     	; 0x10d8 <WrongPasswordEntry+0x60>
		/*Setting the call back function for timer*/
		Timer1_setCallBack(BuzzerControl);
    10bc:	88 e0       	ldi	r24, 0x08	; 8
    10be:	98 e0       	ldi	r25, 0x08	; 8
    10c0:	0e 94 b1 13 	call	0x2762	; 0x2762 <Timer1_setCallBack>
		/*waiting for HMI ECU to be in synch*/
		while (USART_recieveByte() != BUZZER_ON) {}
    10c4:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
    10c8:	83 32       	cpi	r24, 0x23	; 35
    10ca:	e1 f7       	brne	.-8      	; 0x10c4 <WrongPasswordEntry+0x4c>
		/*Starting Timer1 with the Buzzer Configurations*/
		Timer1_init(&BUZZERConfigurations_Ptr);
    10cc:	88 e7       	ldi	r24, 0x78	; 120
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 3d 13 	call	0x267a	; 0x267a <Timer1_init>
		/*Starting the Buzzer*/
		Buzzer_ON();
    10d4:	0e 94 14 09 	call	0x1228	; 0x1228 <Buzzer_ON>
	}
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <main>:

int main() {
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	2e 97       	sbiw	r28, 0x0e	; 14
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
	/*Variable to recieve the selected option sent from HMI ECU*/
	uint8 option;
	/*Initializing the DC MOTOR*/
	DcMotor_Init();
    10f8:	0e 94 2c 09 	call	0x1258	; 0x1258 <DcMotor_Init>
	/*Initializing the BUZZER*/
	Buzzer_init();
    10fc:	0e 94 03 09 	call	0x1206	; 0x1206 <Buzzer_init>
	/*Setting the call back of Timer1*/
	Timer1_setCallBack(MotorControl);
    1100:	84 ec       	ldi	r24, 0xC4	; 196
    1102:	97 e0       	ldi	r25, 0x07	; 7
    1104:	0e 94 b1 13 	call	0x2762	; 0x2762 <Timer1_setCallBack>
	/*Initializing the I2C*/
	TWI_init();
    1108:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <TWI_init>
	 * Mode:ASYNCHRONZIED
	 * Parity:DISABLED
	 * STOP_BIT: ONEBIT
	 * BIT-DATA: 8BITS
	 * BAUD RATE:9600			*/
	USART_ConfigType Config_Ptr = { ASYNCH, DISABLED, ONEBIT, EIGHTBITS, 9600 };
    110c:	9e 01       	movw	r18, r28
    110e:	2e 5f       	subi	r18, 0xFE	; 254
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	3b 87       	std	Y+11, r19	; 0x0b
    1114:	2a 87       	std	Y+10, r18	; 0x0a
    1116:	8e e7       	ldi	r24, 0x7E	; 126
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9d 87       	std	Y+13, r25	; 0x0d
    111c:	8c 87       	std	Y+12, r24	; 0x0c
    111e:	96 e0       	ldi	r25, 0x06	; 6
    1120:	9e 87       	std	Y+14, r25	; 0x0e
    1122:	ec 85       	ldd	r30, Y+12	; 0x0c
    1124:	fd 85       	ldd	r31, Y+13	; 0x0d
    1126:	00 80       	ld	r0, Z
    1128:	2c 85       	ldd	r18, Y+12	; 0x0c
    112a:	3d 85       	ldd	r19, Y+13	; 0x0d
    112c:	2f 5f       	subi	r18, 0xFF	; 255
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	3d 87       	std	Y+13, r19	; 0x0d
    1132:	2c 87       	std	Y+12, r18	; 0x0c
    1134:	ea 85       	ldd	r30, Y+10	; 0x0a
    1136:	fb 85       	ldd	r31, Y+11	; 0x0b
    1138:	00 82       	st	Z, r0
    113a:	2a 85       	ldd	r18, Y+10	; 0x0a
    113c:	3b 85       	ldd	r19, Y+11	; 0x0b
    113e:	2f 5f       	subi	r18, 0xFF	; 255
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	3b 87       	std	Y+11, r19	; 0x0b
    1144:	2a 87       	std	Y+10, r18	; 0x0a
    1146:	3e 85       	ldd	r19, Y+14	; 0x0e
    1148:	31 50       	subi	r19, 0x01	; 1
    114a:	3e 87       	std	Y+14, r19	; 0x0e
    114c:	8e 85       	ldd	r24, Y+14	; 0x0e
    114e:	88 23       	and	r24, r24
    1150:	41 f7       	brne	.-48     	; 0x1122 <main+0x3e>
	/*Initializing the USART*/
	USART_init(&Config_Ptr);
    1152:	ce 01       	movw	r24, r28
    1154:	02 96       	adiw	r24, 0x02	; 2
    1156:	0e 94 67 14 	call	0x28ce	; 0x28ce <USART_init>
	/*Send READY to the HMI ECU and Waiting for a response to make sure they are Synched*/
	USART_sendByte(READY);
    115a:	81 e1       	ldi	r24, 0x11	; 17
    115c:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
	while (USART_recieveByte() != READY) {}
    1160:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
    1164:	81 31       	cpi	r24, 0x11	; 17
    1166:	e1 f7       	brne	.-8      	; 0x1160 <main+0x7c>
	/*Recieveing Passwords and checks on them until they match and saves it inside EEPROM*/
	do {
		RecieveBothPasswords();
    1168:	0e 94 a3 05 	call	0xb46	; 0xb46 <RecieveBothPasswords>
		status = CheckMatching();
    116c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <CheckMatching>
    1170:	80 93 88 00 	sts	0x0088, r24
	} while (status != SUCCESS);
    1174:	80 91 88 00 	lds	r24, 0x0088
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	b1 f7       	brne	.-20     	; 0x1168 <main+0x84>
	if (status == SUCCESS) {
    117c:	80 91 88 00 	lds	r24, 0x0088
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	11 f4       	brne	.+4      	; 0x1188 <main+0xa4>
		SavingPassword();
    1184:	0e 94 26 06 	call	0xc4c	; 0xc4c <SavingPassword>
	}
	while (1) {
		/*Waiting for the HMI ECU to send a command*/
		while (USART_recieveByte() != COMMAND) {}
    1188:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
    118c:	82 31       	cpi	r24, 0x12	; 18
    118e:	e1 f7       	brne	.-8      	; 0x1188 <main+0xa4>
		/*Receives the command sent by the HMI ECU*/
		option = USART_recieveByte();
    1190:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
    1194:	89 83       	std	Y+1, r24	; 0x01
		/*Switches on the command sent by the HMI ECU*/
		switch (option) {
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	e8 2f       	mov	r30, r24
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	f9 87       	std	Y+9, r31	; 0x09
    119e:	e8 87       	std	Y+8, r30	; 0x08
    11a0:	28 85       	ldd	r18, Y+8	; 0x08
    11a2:	39 85       	ldd	r19, Y+9	; 0x09
    11a4:	25 31       	cpi	r18, 0x15	; 21
    11a6:	31 05       	cpc	r19, r1
    11a8:	31 f0       	breq	.+12     	; 0x11b6 <main+0xd2>
    11aa:	88 85       	ldd	r24, Y+8	; 0x08
    11ac:	99 85       	ldd	r25, Y+9	; 0x09
    11ae:	89 31       	cpi	r24, 0x19	; 25
    11b0:	91 05       	cpc	r25, r1
    11b2:	a9 f0       	breq	.+42     	; 0x11de <main+0xfa>
    11b4:	e9 cf       	rjmp	.-46     	; 0x1188 <main+0xa4>
		/*if the command is to OPEN DOOR checks if the Received password matches the one
		 * saved in the EEPROM and calls the function responsible for this if they dont match
		 * calls the function responsible for wrong password entry*/
		case OPEN_DOOR: {
			status = CheckSavedPassword();
    11b6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CheckSavedPassword>
    11ba:	80 93 88 00 	sts	0x0088, r24
			if (status == SUCCESS) {
    11be:	80 91 88 00 	lds	r24, 0x0088
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	19 f4       	brne	.+6      	; 0x11cc <main+0xe8>
				OPEN_DOOROption();
    11c6:	0e 94 f5 07 	call	0xfea	; 0xfea <OPEN_DOOROption>
    11ca:	de cf       	rjmp	.-68     	; 0x1188 <main+0xa4>
			} else if (status == ERROR) {
    11cc:	80 91 88 00 	lds	r24, 0x0088
    11d0:	88 23       	and	r24, r24
    11d2:	d1 f6       	brne	.-76     	; 0x1188 <main+0xa4>
				WrongPasswordEntry(OPEN_DOOROption);
    11d4:	85 ef       	ldi	r24, 0xF5	; 245
    11d6:	97 e0       	ldi	r25, 0x07	; 7
    11d8:	0e 94 3c 08 	call	0x1078	; 0x1078 <WrongPasswordEntry>
    11dc:	d5 cf       	rjmp	.-86     	; 0x1188 <main+0xa4>
		}
		/*if the command is to CHANGE PASSWORD checks if the Received password matches the one
		 * saved in the EEPROM and calls the function responsible for this if they dont match
		 * calls the function responsible for wrong password entry*/
		case CHANGE_PASSWORD: {
			status = CheckSavedPassword();
    11de:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CheckSavedPassword>
    11e2:	80 93 88 00 	sts	0x0088, r24
			if (status == SUCCESS) {
    11e6:	80 91 88 00 	lds	r24, 0x0088
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <main+0x110>
				ChangeSystemPassword();
    11ee:	0e 94 21 08 	call	0x1042	; 0x1042 <ChangeSystemPassword>
    11f2:	ca cf       	rjmp	.-108    	; 0x1188 <main+0xa4>
			} else if (status == ERROR) {
    11f4:	80 91 88 00 	lds	r24, 0x0088
    11f8:	88 23       	and	r24, r24
    11fa:	31 f6       	brne	.-116    	; 0x1188 <main+0xa4>
				WrongPasswordEntry(ChangeSystemPassword);
    11fc:	81 e2       	ldi	r24, 0x21	; 33
    11fe:	98 e0       	ldi	r25, 0x08	; 8
    1200:	0e 94 3c 08 	call	0x1078	; 0x1078 <WrongPasswordEntry>
    1204:	c1 cf       	rjmp	.-126    	; 0x1188 <main+0xa4>

00001206 <Buzzer_init>:
#include "common_macros.h"
/*
 * Description :Setup the direction for the buzzer pin as output pin through the GPIO driver
 Turn off the buzzer through the GPIO.
 */
void Buzzer_init(void) {
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PINID, PIN_OUTPUT);
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	66 e0       	ldi	r22, 0x06	; 6
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PINID, LOGIC_LOW);
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	66 e0       	ldi	r22, 0x06	; 6
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
}
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <Buzzer_ON>:
/*
 * Description :Function to enable the Buzzer through the GPIO.
 */
void Buzzer_ON(void) {
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PINID, LOGIC_HIGH);
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	66 e0       	ldi	r22, 0x06	; 6
    1234:	41 e0       	ldi	r20, 0x01	; 1
    1236:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>

}
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <Buzzer_OFF>:
/*
 * Description :Function to disable the Buzzer through the GPIO.
 */
void Buzzer_OFF(void) {
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PINID, LOGIC_LOW);
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	66 e0       	ldi	r22, 0x06	; 6
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <DcMotor_Init>:
/*
 * Description :
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void) {
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PINID, PIN_OUTPUT);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	65 e0       	ldi	r22, 0x05	; 5
    1264:	41 e0       	ldi	r20, 0x01	; 1
    1266:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PINID, PIN_OUTPUT);
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	66 e0       	ldi	r22, 0x06	; 6
    126e:	41 e0       	ldi	r20, 0x01	; 1
    1270:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_setupPinDirection>

	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PINID, LOGIC_LOW);
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	65 e0       	ldi	r22, 0x05	; 5
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>

	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PINID, LOGIC_LOW);
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	66 e0       	ldi	r22, 0x06	; 6
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
}
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <DcMotor_Rotate>:
/*
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor
 * based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed) {
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <DcMotor_Rotate+0x6>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <DcMotor_Rotate+0x8>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start(speed);
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	0e 94 96 12 	call	0x252c	; 0x252c <PWM_Timer0_Start>
	switch (state) {
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3c 83       	std	Y+4, r19	; 0x04
    12ac:	2b 83       	std	Y+3, r18	; 0x03
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	a1 f0       	breq	.+40     	; 0x12e0 <DcMotor_Rotate+0x52>
    12b8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ba:	3c 81       	ldd	r19, Y+4	; 0x04
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	d1 f0       	breq	.+52     	; 0x12f6 <DcMotor_Rotate+0x68>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	01 f5       	brne	.+64     	; 0x130a <DcMotor_Rotate+0x7c>
	case STOP: {
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PINID, LOGIC_LOW);
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	65 e0       	ldi	r22, 0x05	; 5
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>

		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PINID, LOGIC_LOW);
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	66 e0       	ldi	r22, 0x06	; 6
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
    12de:	15 c0       	rjmp	.+42     	; 0x130a <DcMotor_Rotate+0x7c>
		break;
	}
	case CLOCKWISE: {
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PINID, LOGIC_HIGH);
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	65 e0       	ldi	r22, 0x05	; 5
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>

		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PINID, LOGIC_LOW);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	66 e0       	ldi	r22, 0x06	; 6
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
    12f4:	0a c0       	rjmp	.+20     	; 0x130a <DcMotor_Rotate+0x7c>
		break;
	}
	case A_CLOCKWISE: {
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PINID, LOGIC_LOW);
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	65 e0       	ldi	r22, 0x05	; 5
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>

		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PINID, LOGIC_HIGH);
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	66 e0       	ldi	r22, 0x06	; 6
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
		break;
	}
	}
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <EEPROM_writeByte+0x6>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <EEPROM_writeByte+0x8>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    132a:	0e 94 00 14 	call	0x2800	; 0x2800 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    132e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_getStatus>
    1332:	88 30       	cpi	r24, 0x08	; 8
    1334:	11 f0       	breq	.+4      	; 0x133a <EEPROM_writeByte+0x22>
        return ERROR;
    1336:	1c 82       	std	Y+4, r1	; 0x04
    1338:	28 c0       	rjmp	.+80     	; 0x138a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	9a 81       	ldd	r25, Y+2	; 0x02
    133e:	80 70       	andi	r24, 0x00	; 0
    1340:	97 70       	andi	r25, 0x07	; 7
    1342:	88 0f       	add	r24, r24
    1344:	89 2f       	mov	r24, r25
    1346:	88 1f       	adc	r24, r24
    1348:	99 0b       	sbc	r25, r25
    134a:	91 95       	neg	r25
    134c:	80 6a       	ori	r24, 0xA0	; 160
    134e:	0e 94 1b 14 	call	0x2836	; 0x2836 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1352:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_getStatus>
    1356:	88 31       	cpi	r24, 0x18	; 24
    1358:	11 f0       	breq	.+4      	; 0x135e <EEPROM_writeByte+0x46>
        return ERROR; 
    135a:	1c 82       	std	Y+4, r1	; 0x04
    135c:	16 c0       	rjmp	.+44     	; 0x138a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	0e 94 1b 14 	call	0x2836	; 0x2836 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1364:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_getStatus>
    1368:	88 32       	cpi	r24, 0x28	; 40
    136a:	11 f0       	breq	.+4      	; 0x1370 <EEPROM_writeByte+0x58>
        return ERROR;
    136c:	1c 82       	std	Y+4, r1	; 0x04
    136e:	0d c0       	rjmp	.+26     	; 0x138a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	0e 94 1b 14 	call	0x2836	; 0x2836 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1376:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_getStatus>
    137a:	88 32       	cpi	r24, 0x28	; 40
    137c:	11 f0       	breq	.+4      	; 0x1382 <EEPROM_writeByte+0x6a>
        return ERROR;
    137e:	1c 82       	std	Y+4, r1	; 0x04
    1380:	04 c0       	rjmp	.+8      	; 0x138a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1382:	0e 94 10 14 	call	0x2820	; 0x2820 <TWI_stop>
	
    return SUCCESS;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	8c 83       	std	Y+4, r24	; 0x04
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <EEPROM_readByte+0x6>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <EEPROM_readByte+0x8>
    13a2:	0f 92       	push	r0
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	7c 83       	std	Y+4, r23	; 0x04
    13ae:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    13b0:	0e 94 00 14 	call	0x2800	; 0x2800 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    13b4:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_getStatus>
    13b8:	88 30       	cpi	r24, 0x08	; 8
    13ba:	11 f0       	breq	.+4      	; 0x13c0 <EEPROM_readByte+0x26>
        return ERROR;
    13bc:	1d 82       	std	Y+5, r1	; 0x05
    13be:	44 c0       	rjmp	.+136    	; 0x1448 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	80 70       	andi	r24, 0x00	; 0
    13c6:	97 70       	andi	r25, 0x07	; 7
    13c8:	88 0f       	add	r24, r24
    13ca:	89 2f       	mov	r24, r25
    13cc:	88 1f       	adc	r24, r24
    13ce:	99 0b       	sbc	r25, r25
    13d0:	91 95       	neg	r25
    13d2:	80 6a       	ori	r24, 0xA0	; 160
    13d4:	0e 94 1b 14 	call	0x2836	; 0x2836 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13d8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_getStatus>
    13dc:	88 31       	cpi	r24, 0x18	; 24
    13de:	11 f0       	breq	.+4      	; 0x13e4 <EEPROM_readByte+0x4a>
        return ERROR;
    13e0:	1d 82       	std	Y+5, r1	; 0x05
    13e2:	32 c0       	rjmp	.+100    	; 0x1448 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	0e 94 1b 14 	call	0x2836	; 0x2836 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13ea:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_getStatus>
    13ee:	88 32       	cpi	r24, 0x28	; 40
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <EEPROM_readByte+0x5c>
        return ERROR;
    13f2:	1d 82       	std	Y+5, r1	; 0x05
    13f4:	29 c0       	rjmp	.+82     	; 0x1448 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    13f6:	0e 94 00 14 	call	0x2800	; 0x2800 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    13fa:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_getStatus>
    13fe:	80 31       	cpi	r24, 0x10	; 16
    1400:	11 f0       	breq	.+4      	; 0x1406 <EEPROM_readByte+0x6c>
        return ERROR;
    1402:	1d 82       	std	Y+5, r1	; 0x05
    1404:	21 c0       	rjmp	.+66     	; 0x1448 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	80 70       	andi	r24, 0x00	; 0
    140c:	97 70       	andi	r25, 0x07	; 7
    140e:	88 0f       	add	r24, r24
    1410:	89 2f       	mov	r24, r25
    1412:	88 1f       	adc	r24, r24
    1414:	99 0b       	sbc	r25, r25
    1416:	91 95       	neg	r25
    1418:	81 6a       	ori	r24, 0xA1	; 161
    141a:	0e 94 1b 14 	call	0x2836	; 0x2836 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    141e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_getStatus>
    1422:	80 34       	cpi	r24, 0x40	; 64
    1424:	11 f0       	breq	.+4      	; 0x142a <EEPROM_readByte+0x90>
        return ERROR;
    1426:	1d 82       	std	Y+5, r1	; 0x05
    1428:	0f c0       	rjmp	.+30     	; 0x1448 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    142a:	0e 94 45 14 	call	0x288a	; 0x288a <TWI_readByteWithNACK>
    142e:	eb 81       	ldd	r30, Y+3	; 0x03
    1430:	fc 81       	ldd	r31, Y+4	; 0x04
    1432:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1434:	0e 94 58 14 	call	0x28b0	; 0x28b0 <TWI_getStatus>
    1438:	88 35       	cpi	r24, 0x58	; 88
    143a:	11 f0       	breq	.+4      	; 0x1440 <EEPROM_readByte+0xa6>
        return ERROR;
    143c:	1d 82       	std	Y+5, r1	; 0x05
    143e:	04 c0       	rjmp	.+8      	; 0x1448 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1440:	0e 94 10 14 	call	0x2820	; 0x2820 <TWI_stop>

    return SUCCESS;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	8d 83       	std	Y+5, r24	; 0x05
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	00 d0       	rcall	.+0      	; 0x1460 <GPIO_setupPinDirection+0x6>
    1460:	00 d0       	rcall	.+0      	; 0x1462 <GPIO_setupPinDirection+0x8>
    1462:	0f 92       	push	r0
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	6a 83       	std	Y+2, r22	; 0x02
    146c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	88 30       	cpi	r24, 0x08	; 8
    1472:	08 f0       	brcs	.+2      	; 0x1476 <GPIO_setupPinDirection+0x1c>
    1474:	d5 c0       	rjmp	.+426    	; 0x1620 <GPIO_setupPinDirection+0x1c6>
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	08 f0       	brcs	.+2      	; 0x147e <GPIO_setupPinDirection+0x24>
    147c:	d1 c0       	rjmp	.+418    	; 0x1620 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	3d 83       	std	Y+5, r19	; 0x05
    1486:	2c 83       	std	Y+4, r18	; 0x04
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	91 05       	cpc	r25, r1
    1490:	09 f4       	brne	.+2      	; 0x1494 <GPIO_setupPinDirection+0x3a>
    1492:	43 c0       	rjmp	.+134    	; 0x151a <GPIO_setupPinDirection+0xc0>
    1494:	2c 81       	ldd	r18, Y+4	; 0x04
    1496:	3d 81       	ldd	r19, Y+5	; 0x05
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	2c f4       	brge	.+10     	; 0x14a8 <GPIO_setupPinDirection+0x4e>
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	9d 81       	ldd	r25, Y+5	; 0x05
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	71 f0       	breq	.+28     	; 0x14c2 <GPIO_setupPinDirection+0x68>
    14a6:	bc c0       	rjmp	.+376    	; 0x1620 <GPIO_setupPinDirection+0x1c6>
    14a8:	2c 81       	ldd	r18, Y+4	; 0x04
    14aa:	3d 81       	ldd	r19, Y+5	; 0x05
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <GPIO_setupPinDirection+0x5a>
    14b2:	5f c0       	rjmp	.+190    	; 0x1572 <GPIO_setupPinDirection+0x118>
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	83 30       	cpi	r24, 0x03	; 3
    14ba:	91 05       	cpc	r25, r1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <GPIO_setupPinDirection+0x66>
    14be:	85 c0       	rjmp	.+266    	; 0x15ca <GPIO_setupPinDirection+0x170>
    14c0:	af c0       	rjmp	.+350    	; 0x1620 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	a1 f4       	brne	.+40     	; 0x14f0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14c8:	aa e3       	ldi	r26, 0x3A	; 58
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	ea e3       	ldi	r30, 0x3A	; 58
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <GPIO_setupPinDirection+0x8c>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <GPIO_setupPinDirection+0x88>
    14ea:	84 2b       	or	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	98 c0       	rjmp	.+304    	; 0x1620 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14f0:	aa e3       	ldi	r26, 0x3A	; 58
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ea e3       	ldi	r30, 0x3A	; 58
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <GPIO_setupPinDirection+0xb4>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <GPIO_setupPinDirection+0xb0>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	83 c0       	rjmp	.+262    	; 0x1620 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	a1 f4       	brne	.+40     	; 0x1548 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1520:	a7 e3       	ldi	r26, 0x37	; 55
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e7 e3       	ldi	r30, 0x37	; 55
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <GPIO_setupPinDirection+0xe4>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <GPIO_setupPinDirection+0xe0>
    1542:	84 2b       	or	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	6c c0       	rjmp	.+216    	; 0x1620 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1548:	a7 e3       	ldi	r26, 0x37	; 55
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e7 e3       	ldi	r30, 0x37	; 55
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <GPIO_setupPinDirection+0x10c>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <GPIO_setupPinDirection+0x108>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	57 c0       	rjmp	.+174    	; 0x1620 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	a1 f4       	brne	.+40     	; 0x15a0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1578:	a4 e3       	ldi	r26, 0x34	; 52
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e4 e3       	ldi	r30, 0x34	; 52
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_setupPinDirection+0x13c>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_setupPinDirection+0x138>
    159a:	84 2b       	or	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	40 c0       	rjmp	.+128    	; 0x1620 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15a0:	a4 e3       	ldi	r26, 0x34	; 52
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e4 e3       	ldi	r30, 0x34	; 52
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <GPIO_setupPinDirection+0x164>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <GPIO_setupPinDirection+0x160>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	2b c0       	rjmp	.+86     	; 0x1620 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	a1 f4       	brne	.+40     	; 0x15f8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15d0:	a1 e3       	ldi	r26, 0x31	; 49
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e1 e3       	ldi	r30, 0x31	; 49
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <GPIO_setupPinDirection+0x194>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <GPIO_setupPinDirection+0x190>
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	14 c0       	rjmp	.+40     	; 0x1620 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15f8:	a1 e3       	ldi	r26, 0x31	; 49
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e1 e3       	ldi	r30, 0x31	; 49
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GPIO_setupPinDirection+0x1bc>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <GPIO_setupPinDirection+0x1b8>
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <GPIO_writePin+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <GPIO_writePin+0x8>
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	6a 83       	std	Y+2, r22	; 0x02
    1642:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	88 30       	cpi	r24, 0x08	; 8
    1648:	08 f0       	brcs	.+2      	; 0x164c <GPIO_writePin+0x1c>
    164a:	d5 c0       	rjmp	.+426    	; 0x17f6 <GPIO_writePin+0x1c6>
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	84 30       	cpi	r24, 0x04	; 4
    1650:	08 f0       	brcs	.+2      	; 0x1654 <GPIO_writePin+0x24>
    1652:	d1 c0       	rjmp	.+418    	; 0x17f6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	3d 83       	std	Y+5, r19	; 0x05
    165c:	2c 83       	std	Y+4, r18	; 0x04
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	9d 81       	ldd	r25, Y+5	; 0x05
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	91 05       	cpc	r25, r1
    1666:	09 f4       	brne	.+2      	; 0x166a <GPIO_writePin+0x3a>
    1668:	43 c0       	rjmp	.+134    	; 0x16f0 <GPIO_writePin+0xc0>
    166a:	2c 81       	ldd	r18, Y+4	; 0x04
    166c:	3d 81       	ldd	r19, Y+5	; 0x05
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	2c f4       	brge	.+10     	; 0x167e <GPIO_writePin+0x4e>
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	9d 81       	ldd	r25, Y+5	; 0x05
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	71 f0       	breq	.+28     	; 0x1698 <GPIO_writePin+0x68>
    167c:	bc c0       	rjmp	.+376    	; 0x17f6 <GPIO_writePin+0x1c6>
    167e:	2c 81       	ldd	r18, Y+4	; 0x04
    1680:	3d 81       	ldd	r19, Y+5	; 0x05
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <GPIO_writePin+0x5a>
    1688:	5f c0       	rjmp	.+190    	; 0x1748 <GPIO_writePin+0x118>
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
    168c:	9d 81       	ldd	r25, Y+5	; 0x05
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	91 05       	cpc	r25, r1
    1692:	09 f4       	brne	.+2      	; 0x1696 <GPIO_writePin+0x66>
    1694:	85 c0       	rjmp	.+266    	; 0x17a0 <GPIO_writePin+0x170>
    1696:	af c0       	rjmp	.+350    	; 0x17f6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	a1 f4       	brne	.+40     	; 0x16c6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    169e:	ab e3       	ldi	r26, 0x3B	; 59
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	eb e3       	ldi	r30, 0x3B	; 59
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <GPIO_writePin+0x8c>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <GPIO_writePin+0x88>
    16c0:	84 2b       	or	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	98 c0       	rjmp	.+304    	; 0x17f6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16c6:	ab e3       	ldi	r26, 0x3B	; 59
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	eb e3       	ldi	r30, 0x3B	; 59
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <GPIO_writePin+0xb4>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <GPIO_writePin+0xb0>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	83 c0       	rjmp	.+262    	; 0x17f6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	a1 f4       	brne	.+40     	; 0x171e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16f6:	a8 e3       	ldi	r26, 0x38	; 56
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e8 e3       	ldi	r30, 0x38	; 56
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <GPIO_writePin+0xe4>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <GPIO_writePin+0xe0>
    1718:	84 2b       	or	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	6c c0       	rjmp	.+216    	; 0x17f6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    171e:	a8 e3       	ldi	r26, 0x38	; 56
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e8 e3       	ldi	r30, 0x38	; 56
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <GPIO_writePin+0x10c>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <GPIO_writePin+0x108>
    1740:	80 95       	com	r24
    1742:	84 23       	and	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	57 c0       	rjmp	.+174    	; 0x17f6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	a1 f4       	brne	.+40     	; 0x1776 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    174e:	a5 e3       	ldi	r26, 0x35	; 53
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e5 e3       	ldi	r30, 0x35	; 53
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <GPIO_writePin+0x13c>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <GPIO_writePin+0x138>
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	40 c0       	rjmp	.+128    	; 0x17f6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1776:	a5 e3       	ldi	r26, 0x35	; 53
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e5 e3       	ldi	r30, 0x35	; 53
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <GPIO_writePin+0x164>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <GPIO_writePin+0x160>
    1798:	80 95       	com	r24
    179a:	84 23       	and	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	2b c0       	rjmp	.+86     	; 0x17f6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	a1 f4       	brne	.+40     	; 0x17ce <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17a6:	a2 e3       	ldi	r26, 0x32	; 50
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e2 e3       	ldi	r30, 0x32	; 50
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <GPIO_writePin+0x194>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <GPIO_writePin+0x190>
    17c8:	84 2b       	or	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17ce:	a2 e3       	ldi	r26, 0x32	; 50
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e2 e3       	ldi	r30, 0x32	; 50
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <GPIO_writePin+0x1bc>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <GPIO_writePin+0x1b8>
    17f0:	80 95       	com	r24
    17f2:	84 23       	and	r24, r20
    17f4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <GPIO_readPin+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <GPIO_readPin+0x8>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	8a 83       	std	Y+2, r24	; 0x02
    1816:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1818:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	88 30       	cpi	r24, 0x08	; 8
    181e:	08 f0       	brcs	.+2      	; 0x1822 <GPIO_readPin+0x1c>
    1820:	84 c0       	rjmp	.+264    	; 0x192a <GPIO_readPin+0x124>
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	84 30       	cpi	r24, 0x04	; 4
    1826:	08 f0       	brcs	.+2      	; 0x182a <GPIO_readPin+0x24>
    1828:	80 c0       	rjmp	.+256    	; 0x192a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	3d 83       	std	Y+5, r19	; 0x05
    1832:	2c 83       	std	Y+4, r18	; 0x04
    1834:	4c 81       	ldd	r20, Y+4	; 0x04
    1836:	5d 81       	ldd	r21, Y+5	; 0x05
    1838:	41 30       	cpi	r20, 0x01	; 1
    183a:	51 05       	cpc	r21, r1
    183c:	79 f1       	breq	.+94     	; 0x189c <GPIO_readPin+0x96>
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	82 30       	cpi	r24, 0x02	; 2
    1844:	91 05       	cpc	r25, r1
    1846:	34 f4       	brge	.+12     	; 0x1854 <GPIO_readPin+0x4e>
    1848:	2c 81       	ldd	r18, Y+4	; 0x04
    184a:	3d 81       	ldd	r19, Y+5	; 0x05
    184c:	21 15       	cp	r18, r1
    184e:	31 05       	cpc	r19, r1
    1850:	69 f0       	breq	.+26     	; 0x186c <GPIO_readPin+0x66>
    1852:	6b c0       	rjmp	.+214    	; 0x192a <GPIO_readPin+0x124>
    1854:	4c 81       	ldd	r20, Y+4	; 0x04
    1856:	5d 81       	ldd	r21, Y+5	; 0x05
    1858:	42 30       	cpi	r20, 0x02	; 2
    185a:	51 05       	cpc	r21, r1
    185c:	b9 f1       	breq	.+110    	; 0x18cc <GPIO_readPin+0xc6>
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <GPIO_readPin+0x64>
    1868:	49 c0       	rjmp	.+146    	; 0x18fc <GPIO_readPin+0xf6>
    186a:	5f c0       	rjmp	.+190    	; 0x192a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    186c:	e9 e3       	ldi	r30, 0x39	; 57
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a9 01       	movw	r20, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <GPIO_readPin+0x7e>
    1880:	55 95       	asr	r21
    1882:	47 95       	ror	r20
    1884:	8a 95       	dec	r24
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <GPIO_readPin+0x7a>
    1888:	ca 01       	movw	r24, r20
    188a:	81 70       	andi	r24, 0x01	; 1
    188c:	90 70       	andi	r25, 0x00	; 0
    188e:	88 23       	and	r24, r24
    1890:	19 f0       	breq	.+6      	; 0x1898 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	49 c0       	rjmp	.+146    	; 0x192a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1898:	19 82       	std	Y+1, r1	; 0x01
    189a:	47 c0       	rjmp	.+142    	; 0x192a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    189c:	e6 e3       	ldi	r30, 0x36	; 54
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a9 01       	movw	r20, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <GPIO_readPin+0xae>
    18b0:	55 95       	asr	r21
    18b2:	47 95       	ror	r20
    18b4:	8a 95       	dec	r24
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <GPIO_readPin+0xaa>
    18b8:	ca 01       	movw	r24, r20
    18ba:	81 70       	andi	r24, 0x01	; 1
    18bc:	90 70       	andi	r25, 0x00	; 0
    18be:	88 23       	and	r24, r24
    18c0:	19 f0       	breq	.+6      	; 0x18c8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	31 c0       	rjmp	.+98     	; 0x192a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18c8:	19 82       	std	Y+1, r1	; 0x01
    18ca:	2f c0       	rjmp	.+94     	; 0x192a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18cc:	e3 e3       	ldi	r30, 0x33	; 51
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a9 01       	movw	r20, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <GPIO_readPin+0xde>
    18e0:	55 95       	asr	r21
    18e2:	47 95       	ror	r20
    18e4:	8a 95       	dec	r24
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <GPIO_readPin+0xda>
    18e8:	ca 01       	movw	r24, r20
    18ea:	81 70       	andi	r24, 0x01	; 1
    18ec:	90 70       	andi	r25, 0x00	; 0
    18ee:	88 23       	and	r24, r24
    18f0:	19 f0       	breq	.+6      	; 0x18f8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	19 c0       	rjmp	.+50     	; 0x192a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18f8:	19 82       	std	Y+1, r1	; 0x01
    18fa:	17 c0       	rjmp	.+46     	; 0x192a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    18fc:	e0 e3       	ldi	r30, 0x30	; 48
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a9 01       	movw	r20, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <GPIO_readPin+0x10e>
    1910:	55 95       	asr	r21
    1912:	47 95       	ror	r20
    1914:	8a 95       	dec	r24
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <GPIO_readPin+0x10a>
    1918:	ca 01       	movw	r24, r20
    191a:	81 70       	andi	r24, 0x01	; 1
    191c:	90 70       	andi	r25, 0x00	; 0
    191e:	88 23       	and	r24, r24
    1920:	19 f0       	breq	.+6      	; 0x1928 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	01 c0       	rjmp	.+2      	; 0x192a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1928:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    192a:	89 81       	ldd	r24, Y+1	; 0x01
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <GPIO_setupPortDirection+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <GPIO_setupPortDirection+0x8>
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	84 30       	cpi	r24, 0x04	; 4
    1950:	90 f5       	brcc	.+100    	; 0x19b6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	3c 83       	std	Y+4, r19	; 0x04
    195a:	2b 83       	std	Y+3, r18	; 0x03
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	91 05       	cpc	r25, r1
    1964:	d1 f0       	breq	.+52     	; 0x199a <GPIO_setupPortDirection+0x5e>
    1966:	2b 81       	ldd	r18, Y+3	; 0x03
    1968:	3c 81       	ldd	r19, Y+4	; 0x04
    196a:	22 30       	cpi	r18, 0x02	; 2
    196c:	31 05       	cpc	r19, r1
    196e:	2c f4       	brge	.+10     	; 0x197a <GPIO_setupPortDirection+0x3e>
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	61 f0       	breq	.+24     	; 0x1990 <GPIO_setupPortDirection+0x54>
    1978:	1e c0       	rjmp	.+60     	; 0x19b6 <GPIO_setupPortDirection+0x7a>
    197a:	2b 81       	ldd	r18, Y+3	; 0x03
    197c:	3c 81       	ldd	r19, Y+4	; 0x04
    197e:	22 30       	cpi	r18, 0x02	; 2
    1980:	31 05       	cpc	r19, r1
    1982:	81 f0       	breq	.+32     	; 0x19a4 <GPIO_setupPortDirection+0x68>
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	83 30       	cpi	r24, 0x03	; 3
    198a:	91 05       	cpc	r25, r1
    198c:	81 f0       	breq	.+32     	; 0x19ae <GPIO_setupPortDirection+0x72>
    198e:	13 c0       	rjmp	.+38     	; 0x19b6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1990:	ea e3       	ldi	r30, 0x3A	; 58
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	80 83       	st	Z, r24
    1998:	0e c0       	rjmp	.+28     	; 0x19b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    199a:	e7 e3       	ldi	r30, 0x37	; 55
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	80 83       	st	Z, r24
    19a2:	09 c0       	rjmp	.+18     	; 0x19b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19a4:	e4 e3       	ldi	r30, 0x34	; 52
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	80 83       	st	Z, r24
    19ac:	04 c0       	rjmp	.+8      	; 0x19b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19ae:	e1 e3       	ldi	r30, 0x31	; 49
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	80 83       	st	Z, r24
			break;
		}
	}
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <GPIO_writePort+0x6>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <GPIO_writePort+0x8>
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	84 30       	cpi	r24, 0x04	; 4
    19d8:	90 f5       	brcc	.+100    	; 0x1a3e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	3c 83       	std	Y+4, r19	; 0x04
    19e2:	2b 83       	std	Y+3, r18	; 0x03
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	91 05       	cpc	r25, r1
    19ec:	d1 f0       	breq	.+52     	; 0x1a22 <GPIO_writePort+0x5e>
    19ee:	2b 81       	ldd	r18, Y+3	; 0x03
    19f0:	3c 81       	ldd	r19, Y+4	; 0x04
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <GPIO_writePort+0x3e>
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	61 f0       	breq	.+24     	; 0x1a18 <GPIO_writePort+0x54>
    1a00:	1e c0       	rjmp	.+60     	; 0x1a3e <GPIO_writePort+0x7a>
    1a02:	2b 81       	ldd	r18, Y+3	; 0x03
    1a04:	3c 81       	ldd	r19, Y+4	; 0x04
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	81 f0       	breq	.+32     	; 0x1a2c <GPIO_writePort+0x68>
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	83 30       	cpi	r24, 0x03	; 3
    1a12:	91 05       	cpc	r25, r1
    1a14:	81 f0       	breq	.+32     	; 0x1a36 <GPIO_writePort+0x72>
    1a16:	13 c0       	rjmp	.+38     	; 0x1a3e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a18:	eb e3       	ldi	r30, 0x3B	; 59
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	80 83       	st	Z, r24
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a22:	e8 e3       	ldi	r30, 0x38	; 56
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	80 83       	st	Z, r24
    1a2a:	09 c0       	rjmp	.+18     	; 0x1a3e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a2c:	e5 e3       	ldi	r30, 0x35	; 53
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	80 83       	st	Z, r24
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a36:	e2 e3       	ldi	r30, 0x32	; 50
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <GPIO_readPort+0x6>
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <GPIO_readPort+0x8>
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a5a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	84 30       	cpi	r24, 0x04	; 4
    1a60:	90 f5       	brcc	.+100    	; 0x1ac6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	3c 83       	std	Y+4, r19	; 0x04
    1a6a:	2b 83       	std	Y+3, r18	; 0x03
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	91 05       	cpc	r25, r1
    1a74:	d1 f0       	breq	.+52     	; 0x1aaa <GPIO_readPort+0x5e>
    1a76:	2b 81       	ldd	r18, Y+3	; 0x03
    1a78:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7a:	22 30       	cpi	r18, 0x02	; 2
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	2c f4       	brge	.+10     	; 0x1a8a <GPIO_readPort+0x3e>
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	61 f0       	breq	.+24     	; 0x1aa0 <GPIO_readPort+0x54>
    1a88:	1e c0       	rjmp	.+60     	; 0x1ac6 <GPIO_readPort+0x7a>
    1a8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8e:	22 30       	cpi	r18, 0x02	; 2
    1a90:	31 05       	cpc	r19, r1
    1a92:	81 f0       	breq	.+32     	; 0x1ab4 <GPIO_readPort+0x68>
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	83 30       	cpi	r24, 0x03	; 3
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	81 f0       	breq	.+32     	; 0x1abe <GPIO_readPort+0x72>
    1a9e:	13 c0       	rjmp	.+38     	; 0x1ac6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1aa0:	e9 e3       	ldi	r30, 0x39	; 57
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	0e c0       	rjmp	.+28     	; 0x1ac6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1aaa:	e6 e3       	ldi	r30, 0x36	; 54
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	09 c0       	rjmp	.+18     	; 0x1ac6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ab4:	e3 e3       	ldi	r30, 0x33	; 51
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1abe:	e0 e3       	ldi	r30, 0x30	; 48
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	2e 97       	sbiw	r28, 0x0e	; 14
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	61 e0       	ldi	r22, 0x01	; 1
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_setupPinDirection>
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a0 ea       	ldi	r26, 0xA0	; 160
    1b04:	b1 e4       	ldi	r27, 0x41	; 65
    1b06:	8b 87       	std	Y+11, r24	; 0x0b
    1b08:	9c 87       	std	Y+12, r25	; 0x0c
    1b0a:	ad 87       	std	Y+13, r26	; 0x0d
    1b0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	4a ef       	ldi	r20, 0xFA	; 250
    1b1c:	54 e4       	ldi	r21, 0x44	; 68
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8f 83       	std	Y+7, r24	; 0x07
    1b28:	98 87       	std	Y+8, r25	; 0x08
    1b2a:	a9 87       	std	Y+9, r26	; 0x09
    1b2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b30:	78 85       	ldd	r23, Y+8	; 0x08
    1b32:	89 85       	ldd	r24, Y+9	; 0x09
    1b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	5f e3       	ldi	r21, 0x3F	; 63
    1b3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b42:	88 23       	and	r24, r24
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <LCD_init+0x7a>
		__ticks = 1;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	3f c0       	rjmp	.+126    	; 0x1bce <LCD_init+0xf8>
	else if (__tmp > 65535)
    1b50:	6f 81       	ldd	r22, Y+7	; 0x07
    1b52:	78 85       	ldd	r23, Y+8	; 0x08
    1b54:	89 85       	ldd	r24, Y+9	; 0x09
    1b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	3f ef       	ldi	r19, 0xFF	; 255
    1b5c:	4f e7       	ldi	r20, 0x7F	; 127
    1b5e:	57 e4       	ldi	r21, 0x47	; 71
    1b60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b64:	18 16       	cp	r1, r24
    1b66:	4c f5       	brge	.+82     	; 0x1bba <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e2       	ldi	r20, 0x20	; 32
    1b76:	51 e4       	ldi	r21, 0x41	; 65
    1b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <LCD_init+0xda>
    1b92:	88 ec       	ldi	r24, 0xC8	; 200
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9c 83       	std	Y+4, r25	; 0x04
    1b98:	8b 83       	std	Y+3, r24	; 0x03
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_init+0xc8>
    1ba2:	9c 83       	std	Y+4, r25	; 0x04
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	9e 83       	std	Y+6, r25	; 0x06
    1bae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	69 f7       	brne	.-38     	; 0x1b92 <LCD_init+0xbc>
    1bb8:	14 c0       	rjmp	.+40     	; 0x1be2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bba:	6f 81       	ldd	r22, Y+7	; 0x07
    1bbc:	78 85       	ldd	r23, Y+8	; 0x08
    1bbe:	89 85       	ldd	r24, Y+9	; 0x09
    1bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LCD_init+0x104>
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	6f ef       	ldi	r22, 0xFF	; 255
    1be6:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1bea:	88 e3       	ldi	r24, 0x38	; 56
    1bec:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1bf0:	8c e0       	ldi	r24, 0x0C	; 12
    1bf2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_sendCommand>
}
    1bfc:	2e 96       	adiw	r28, 0x0e	; 14
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	e9 97       	sbiw	r28, 0x39	; 57
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a0 e8       	ldi	r26, 0x80	; 128
    1c34:	bf e3       	ldi	r27, 0x3F	; 63
    1c36:	8d ab       	std	Y+53, r24	; 0x35
    1c38:	9e ab       	std	Y+54, r25	; 0x36
    1c3a:	af ab       	std	Y+55, r26	; 0x37
    1c3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c40:	7e a9       	ldd	r23, Y+54	; 0x36
    1c42:	8f a9       	ldd	r24, Y+55	; 0x37
    1c44:	98 ad       	ldd	r25, Y+56	; 0x38
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4a ef       	ldi	r20, 0xFA	; 250
    1c4c:	54 e4       	ldi	r21, 0x44	; 68
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	89 ab       	std	Y+49, r24	; 0x31
    1c58:	9a ab       	std	Y+50, r25	; 0x32
    1c5a:	ab ab       	std	Y+51, r26	; 0x33
    1c5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c60:	7a a9       	ldd	r23, Y+50	; 0x32
    1c62:	8b a9       	ldd	r24, Y+51	; 0x33
    1c64:	9c a9       	ldd	r25, Y+52	; 0x34
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e8       	ldi	r20, 0x80	; 128
    1c6c:	5f e3       	ldi	r21, 0x3F	; 63
    1c6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c72:	88 23       	and	r24, r24
    1c74:	2c f4       	brge	.+10     	; 0x1c80 <LCD_sendCommand+0x72>
		__ticks = 1;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	98 ab       	std	Y+48, r25	; 0x30
    1c7c:	8f a7       	std	Y+47, r24	; 0x2f
    1c7e:	3f c0       	rjmp	.+126    	; 0x1cfe <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1c80:	69 a9       	ldd	r22, Y+49	; 0x31
    1c82:	7a a9       	ldd	r23, Y+50	; 0x32
    1c84:	8b a9       	ldd	r24, Y+51	; 0x33
    1c86:	9c a9       	ldd	r25, Y+52	; 0x34
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	3f ef       	ldi	r19, 0xFF	; 255
    1c8c:	4f e7       	ldi	r20, 0x7F	; 127
    1c8e:	57 e4       	ldi	r21, 0x47	; 71
    1c90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c94:	18 16       	cp	r1, r24
    1c96:	4c f5       	brge	.+82     	; 0x1cea <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c98:	6d a9       	ldd	r22, Y+53	; 0x35
    1c9a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c9c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c9e:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e2       	ldi	r20, 0x20	; 32
    1ca6:	51 e4       	ldi	r21, 0x41	; 65
    1ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	bc 01       	movw	r22, r24
    1cb2:	cd 01       	movw	r24, r26
    1cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	98 ab       	std	Y+48, r25	; 0x30
    1cbe:	8f a7       	std	Y+47, r24	; 0x2f
    1cc0:	0f c0       	rjmp	.+30     	; 0x1ce0 <LCD_sendCommand+0xd2>
    1cc2:	88 ec       	ldi	r24, 0xC8	; 200
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9e a7       	std	Y+46, r25	; 0x2e
    1cc8:	8d a7       	std	Y+45, r24	; 0x2d
    1cca:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ccc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <LCD_sendCommand+0xc0>
    1cd2:	9e a7       	std	Y+46, r25	; 0x2e
    1cd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	98 ab       	std	Y+48, r25	; 0x30
    1cde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ce2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	69 f7       	brne	.-38     	; 0x1cc2 <LCD_sendCommand+0xb4>
    1ce8:	14 c0       	rjmp	.+40     	; 0x1d12 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cea:	69 a9       	ldd	r22, Y+49	; 0x31
    1cec:	7a a9       	ldd	r23, Y+50	; 0x32
    1cee:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	98 ab       	std	Y+48, r25	; 0x30
    1cfc:	8f a7       	std	Y+47, r24	; 0x2f
    1cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d00:	98 a9       	ldd	r25, Y+48	; 0x30
    1d02:	9c a7       	std	Y+44, r25	; 0x2c
    1d04:	8b a7       	std	Y+43, r24	; 0x2b
    1d06:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d08:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <LCD_sendCommand+0xfc>
    1d0e:	9c a7       	std	Y+44, r25	; 0x2c
    1d10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	61 e0       	ldi	r22, 0x01	; 1
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a0 e8       	ldi	r26, 0x80	; 128
    1d22:	bf e3       	ldi	r27, 0x3F	; 63
    1d24:	8f a3       	std	Y+39, r24	; 0x27
    1d26:	98 a7       	std	Y+40, r25	; 0x28
    1d28:	a9 a7       	std	Y+41, r26	; 0x29
    1d2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d30:	89 a5       	ldd	r24, Y+41	; 0x29
    1d32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	4a ef       	ldi	r20, 0xFA	; 250
    1d3a:	54 e4       	ldi	r21, 0x44	; 68
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	8b a3       	std	Y+35, r24	; 0x23
    1d46:	9c a3       	std	Y+36, r25	; 0x24
    1d48:	ad a3       	std	Y+37, r26	; 0x25
    1d4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d50:	8d a1       	ldd	r24, Y+37	; 0x25
    1d52:	9e a1       	ldd	r25, Y+38	; 0x26
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e8       	ldi	r20, 0x80	; 128
    1d5a:	5f e3       	ldi	r21, 0x3F	; 63
    1d5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d60:	88 23       	and	r24, r24
    1d62:	2c f4       	brge	.+10     	; 0x1d6e <LCD_sendCommand+0x160>
		__ticks = 1;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9a a3       	std	Y+34, r25	; 0x22
    1d6a:	89 a3       	std	Y+33, r24	; 0x21
    1d6c:	3f c0       	rjmp	.+126    	; 0x1dec <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1d6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d70:	7c a1       	ldd	r23, Y+36	; 0x24
    1d72:	8d a1       	ldd	r24, Y+37	; 0x25
    1d74:	9e a1       	ldd	r25, Y+38	; 0x26
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	3f ef       	ldi	r19, 0xFF	; 255
    1d7a:	4f e7       	ldi	r20, 0x7F	; 127
    1d7c:	57 e4       	ldi	r21, 0x47	; 71
    1d7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d82:	18 16       	cp	r1, r24
    1d84:	4c f5       	brge	.+82     	; 0x1dd8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d86:	6f a1       	ldd	r22, Y+39	; 0x27
    1d88:	78 a5       	ldd	r23, Y+40	; 0x28
    1d8a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e2       	ldi	r20, 0x20	; 32
    1d94:	51 e4       	ldi	r21, 0x41	; 65
    1d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9a a3       	std	Y+34, r25	; 0x22
    1dac:	89 a3       	std	Y+33, r24	; 0x21
    1dae:	0f c0       	rjmp	.+30     	; 0x1dce <LCD_sendCommand+0x1c0>
    1db0:	88 ec       	ldi	r24, 0xC8	; 200
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	98 a3       	std	Y+32, r25	; 0x20
    1db6:	8f 8f       	std	Y+31, r24	; 0x1f
    1db8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dba:	98 a1       	ldd	r25, Y+32	; 0x20
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_sendCommand+0x1ae>
    1dc0:	98 a3       	std	Y+32, r25	; 0x20
    1dc2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	9a a3       	std	Y+34, r25	; 0x22
    1dcc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dce:	89 a1       	ldd	r24, Y+33	; 0x21
    1dd0:	9a a1       	ldd	r25, Y+34	; 0x22
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	69 f7       	brne	.-38     	; 0x1db0 <LCD_sendCommand+0x1a2>
    1dd6:	14 c0       	rjmp	.+40     	; 0x1e00 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dda:	7c a1       	ldd	r23, Y+36	; 0x24
    1ddc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dde:	9e a1       	ldd	r25, Y+38	; 0x26
    1de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9a a3       	std	Y+34, r25	; 0x22
    1dea:	89 a3       	std	Y+33, r24	; 0x21
    1dec:	89 a1       	ldd	r24, Y+33	; 0x21
    1dee:	9a a1       	ldd	r25, Y+34	; 0x22
    1df0:	9e 8f       	std	Y+30, r25	; 0x1e
    1df2:	8d 8f       	std	Y+29, r24	; 0x1d
    1df4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <LCD_sendCommand+0x1ea>
    1dfc:	9e 8f       	std	Y+30, r25	; 0x1e
    1dfe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	69 ad       	ldd	r22, Y+57	; 0x39
    1e04:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <GPIO_writePort>
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	a0 e8       	ldi	r26, 0x80	; 128
    1e0e:	bf e3       	ldi	r27, 0x3F	; 63
    1e10:	89 8f       	std	Y+25, r24	; 0x19
    1e12:	9a 8f       	std	Y+26, r25	; 0x1a
    1e14:	ab 8f       	std	Y+27, r26	; 0x1b
    1e16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e18:	69 8d       	ldd	r22, Y+25	; 0x19
    1e1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	4a ef       	ldi	r20, 0xFA	; 250
    1e26:	54 e4       	ldi	r21, 0x44	; 68
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	8d 8b       	std	Y+21, r24	; 0x15
    1e32:	9e 8b       	std	Y+22, r25	; 0x16
    1e34:	af 8b       	std	Y+23, r26	; 0x17
    1e36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e38:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e8       	ldi	r20, 0x80	; 128
    1e46:	5f e3       	ldi	r21, 0x3F	; 63
    1e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e4c:	88 23       	and	r24, r24
    1e4e:	2c f4       	brge	.+10     	; 0x1e5a <LCD_sendCommand+0x24c>
		__ticks = 1;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	9c 8b       	std	Y+20, r25	; 0x14
    1e56:	8b 8b       	std	Y+19, r24	; 0x13
    1e58:	3f c0       	rjmp	.+126    	; 0x1ed8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1e5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e60:	98 8d       	ldd	r25, Y+24	; 0x18
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	3f ef       	ldi	r19, 0xFF	; 255
    1e66:	4f e7       	ldi	r20, 0x7F	; 127
    1e68:	57 e4       	ldi	r21, 0x47	; 71
    1e6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e6e:	18 16       	cp	r1, r24
    1e70:	4c f5       	brge	.+82     	; 0x1ec4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e72:	69 8d       	ldd	r22, Y+25	; 0x19
    1e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e2       	ldi	r20, 0x20	; 32
    1e80:	51 e4       	ldi	r21, 0x41	; 65
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	9c 8b       	std	Y+20, r25	; 0x14
    1e98:	8b 8b       	std	Y+19, r24	; 0x13
    1e9a:	0f c0       	rjmp	.+30     	; 0x1eba <LCD_sendCommand+0x2ac>
    1e9c:	88 ec       	ldi	r24, 0xC8	; 200
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	9a 8b       	std	Y+18, r25	; 0x12
    1ea2:	89 8b       	std	Y+17, r24	; 0x11
    1ea4:	89 89       	ldd	r24, Y+17	; 0x11
    1ea6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_sendCommand+0x29a>
    1eac:	9a 8b       	std	Y+18, r25	; 0x12
    1eae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	9c 8b       	std	Y+20, r25	; 0x14
    1eb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eba:	8b 89       	ldd	r24, Y+19	; 0x13
    1ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	69 f7       	brne	.-38     	; 0x1e9c <LCD_sendCommand+0x28e>
    1ec2:	14 c0       	rjmp	.+40     	; 0x1eec <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	9c 8b       	std	Y+20, r25	; 0x14
    1ed6:	8b 8b       	std	Y+19, r24	; 0x13
    1ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eda:	9c 89       	ldd	r25, Y+20	; 0x14
    1edc:	98 8b       	std	Y+16, r25	; 0x10
    1ede:	8f 87       	std	Y+15, r24	; 0x0f
    1ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee2:	98 89       	ldd	r25, Y+16	; 0x10
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	f1 f7       	brne	.-4      	; 0x1ee4 <LCD_sendCommand+0x2d6>
    1ee8:	98 8b       	std	Y+16, r25	; 0x10
    1eea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	a0 e8       	ldi	r26, 0x80	; 128
    1efc:	bf e3       	ldi	r27, 0x3F	; 63
    1efe:	8b 87       	std	Y+11, r24	; 0x0b
    1f00:	9c 87       	std	Y+12, r25	; 0x0c
    1f02:	ad 87       	std	Y+13, r26	; 0x0d
    1f04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a ef       	ldi	r20, 0xFA	; 250
    1f14:	54 e4       	ldi	r21, 0x44	; 68
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	8f 83       	std	Y+7, r24	; 0x07
    1f20:	98 87       	std	Y+8, r25	; 0x08
    1f22:	a9 87       	std	Y+9, r26	; 0x09
    1f24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f26:	6f 81       	ldd	r22, Y+7	; 0x07
    1f28:	78 85       	ldd	r23, Y+8	; 0x08
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e8       	ldi	r20, 0x80	; 128
    1f34:	5f e3       	ldi	r21, 0x3F	; 63
    1f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	3f c0       	rjmp	.+126    	; 0x1fc6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	3f ef       	ldi	r19, 0xFF	; 255
    1f54:	4f e7       	ldi	r20, 0x7F	; 127
    1f56:	57 e4       	ldi	r21, 0x47	; 71
    1f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	4c f5       	brge	.+82     	; 0x1fb2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e2       	ldi	r20, 0x20	; 32
    1f6e:	51 e4       	ldi	r21, 0x41	; 65
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9e 83       	std	Y+6, r25	; 0x06
    1f86:	8d 83       	std	Y+5, r24	; 0x05
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <LCD_sendCommand+0x39a>
    1f8a:	88 ec       	ldi	r24, 0xC8	; 200
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_sendCommand+0x388>
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	69 f7       	brne	.-38     	; 0x1f8a <LCD_sendCommand+0x37c>
    1fb0:	14 c0       	rjmp	.+40     	; 0x1fda <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	78 85       	ldd	r23, Y+8	; 0x08
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <LCD_sendCommand+0x3c4>
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1fda:	e9 96       	adiw	r28, 0x39	; 57
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	e9 97       	sbiw	r28, 0x39	; 57
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a0 e8       	ldi	r26, 0x80	; 128
    2012:	bf e3       	ldi	r27, 0x3F	; 63
    2014:	8d ab       	std	Y+53, r24	; 0x35
    2016:	9e ab       	std	Y+54, r25	; 0x36
    2018:	af ab       	std	Y+55, r26	; 0x37
    201a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201c:	6d a9       	ldd	r22, Y+53	; 0x35
    201e:	7e a9       	ldd	r23, Y+54	; 0x36
    2020:	8f a9       	ldd	r24, Y+55	; 0x37
    2022:	98 ad       	ldd	r25, Y+56	; 0x38
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a ef       	ldi	r20, 0xFA	; 250
    202a:	54 e4       	ldi	r21, 0x44	; 68
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	89 ab       	std	Y+49, r24	; 0x31
    2036:	9a ab       	std	Y+50, r25	; 0x32
    2038:	ab ab       	std	Y+51, r26	; 0x33
    203a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    203c:	69 a9       	ldd	r22, Y+49	; 0x31
    203e:	7a a9       	ldd	r23, Y+50	; 0x32
    2040:	8b a9       	ldd	r24, Y+51	; 0x33
    2042:	9c a9       	ldd	r25, Y+52	; 0x34
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	2c f4       	brge	.+10     	; 0x205e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	98 ab       	std	Y+48, r25	; 0x30
    205a:	8f a7       	std	Y+47, r24	; 0x2f
    205c:	3f c0       	rjmp	.+126    	; 0x20dc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    205e:	69 a9       	ldd	r22, Y+49	; 0x31
    2060:	7a a9       	ldd	r23, Y+50	; 0x32
    2062:	8b a9       	ldd	r24, Y+51	; 0x33
    2064:	9c a9       	ldd	r25, Y+52	; 0x34
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	57 e4       	ldi	r21, 0x47	; 71
    206e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	4c f5       	brge	.+82     	; 0x20c8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2076:	6d a9       	ldd	r22, Y+53	; 0x35
    2078:	7e a9       	ldd	r23, Y+54	; 0x36
    207a:	8f a9       	ldd	r24, Y+55	; 0x37
    207c:	98 ad       	ldd	r25, Y+56	; 0x38
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e2       	ldi	r20, 0x20	; 32
    2084:	51 e4       	ldi	r21, 0x41	; 65
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	98 ab       	std	Y+48, r25	; 0x30
    209c:	8f a7       	std	Y+47, r24	; 0x2f
    209e:	0f c0       	rjmp	.+30     	; 0x20be <LCD_displayCharacter+0xd2>
    20a0:	88 ec       	ldi	r24, 0xC8	; 200
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e a7       	std	Y+46, r25	; 0x2e
    20a6:	8d a7       	std	Y+45, r24	; 0x2d
    20a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    20aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_displayCharacter+0xc0>
    20b0:	9e a7       	std	Y+46, r25	; 0x2e
    20b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b6:	98 a9       	ldd	r25, Y+48	; 0x30
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	98 ab       	std	Y+48, r25	; 0x30
    20bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20be:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c0:	98 a9       	ldd	r25, Y+48	; 0x30
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	69 f7       	brne	.-38     	; 0x20a0 <LCD_displayCharacter+0xb4>
    20c6:	14 c0       	rjmp	.+40     	; 0x20f0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c8:	69 a9       	ldd	r22, Y+49	; 0x31
    20ca:	7a a9       	ldd	r23, Y+50	; 0x32
    20cc:	8b a9       	ldd	r24, Y+51	; 0x33
    20ce:	9c a9       	ldd	r25, Y+52	; 0x34
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	98 ab       	std	Y+48, r25	; 0x30
    20da:	8f a7       	std	Y+47, r24	; 0x2f
    20dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    20de:	98 a9       	ldd	r25, Y+48	; 0x30
    20e0:	9c a7       	std	Y+44, r25	; 0x2c
    20e2:	8b a7       	std	Y+43, r24	; 0x2b
    20e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <LCD_displayCharacter+0xfc>
    20ec:	9c a7       	std	Y+44, r25	; 0x2c
    20ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	a0 e8       	ldi	r26, 0x80	; 128
    2100:	bf e3       	ldi	r27, 0x3F	; 63
    2102:	8f a3       	std	Y+39, r24	; 0x27
    2104:	98 a7       	std	Y+40, r25	; 0x28
    2106:	a9 a7       	std	Y+41, r26	; 0x29
    2108:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210a:	6f a1       	ldd	r22, Y+39	; 0x27
    210c:	78 a5       	ldd	r23, Y+40	; 0x28
    210e:	89 a5       	ldd	r24, Y+41	; 0x29
    2110:	9a a5       	ldd	r25, Y+42	; 0x2a
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	4a ef       	ldi	r20, 0xFA	; 250
    2118:	54 e4       	ldi	r21, 0x44	; 68
    211a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	8b a3       	std	Y+35, r24	; 0x23
    2124:	9c a3       	std	Y+36, r25	; 0x24
    2126:	ad a3       	std	Y+37, r26	; 0x25
    2128:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    212a:	6b a1       	ldd	r22, Y+35	; 0x23
    212c:	7c a1       	ldd	r23, Y+36	; 0x24
    212e:	8d a1       	ldd	r24, Y+37	; 0x25
    2130:	9e a1       	ldd	r25, Y+38	; 0x26
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e8       	ldi	r20, 0x80	; 128
    2138:	5f e3       	ldi	r21, 0x3F	; 63
    213a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    213e:	88 23       	and	r24, r24
    2140:	2c f4       	brge	.+10     	; 0x214c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9a a3       	std	Y+34, r25	; 0x22
    2148:	89 a3       	std	Y+33, r24	; 0x21
    214a:	3f c0       	rjmp	.+126    	; 0x21ca <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    214c:	6b a1       	ldd	r22, Y+35	; 0x23
    214e:	7c a1       	ldd	r23, Y+36	; 0x24
    2150:	8d a1       	ldd	r24, Y+37	; 0x25
    2152:	9e a1       	ldd	r25, Y+38	; 0x26
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	4c f5       	brge	.+82     	; 0x21b6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2164:	6f a1       	ldd	r22, Y+39	; 0x27
    2166:	78 a5       	ldd	r23, Y+40	; 0x28
    2168:	89 a5       	ldd	r24, Y+41	; 0x29
    216a:	9a a5       	ldd	r25, Y+42	; 0x2a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e2       	ldi	r20, 0x20	; 32
    2172:	51 e4       	ldi	r21, 0x41	; 65
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9a a3       	std	Y+34, r25	; 0x22
    218a:	89 a3       	std	Y+33, r24	; 0x21
    218c:	0f c0       	rjmp	.+30     	; 0x21ac <LCD_displayCharacter+0x1c0>
    218e:	88 ec       	ldi	r24, 0xC8	; 200
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	98 a3       	std	Y+32, r25	; 0x20
    2194:	8f 8f       	std	Y+31, r24	; 0x1f
    2196:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2198:	98 a1       	ldd	r25, Y+32	; 0x20
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_displayCharacter+0x1ae>
    219e:	98 a3       	std	Y+32, r25	; 0x20
    21a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a2:	89 a1       	ldd	r24, Y+33	; 0x21
    21a4:	9a a1       	ldd	r25, Y+34	; 0x22
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	9a a3       	std	Y+34, r25	; 0x22
    21aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ac:	89 a1       	ldd	r24, Y+33	; 0x21
    21ae:	9a a1       	ldd	r25, Y+34	; 0x22
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	69 f7       	brne	.-38     	; 0x218e <LCD_displayCharacter+0x1a2>
    21b4:	14 c0       	rjmp	.+40     	; 0x21de <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b6:	6b a1       	ldd	r22, Y+35	; 0x23
    21b8:	7c a1       	ldd	r23, Y+36	; 0x24
    21ba:	8d a1       	ldd	r24, Y+37	; 0x25
    21bc:	9e a1       	ldd	r25, Y+38	; 0x26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9a a3       	std	Y+34, r25	; 0x22
    21c8:	89 a3       	std	Y+33, r24	; 0x21
    21ca:	89 a1       	ldd	r24, Y+33	; 0x21
    21cc:	9a a1       	ldd	r25, Y+34	; 0x22
    21ce:	9e 8f       	std	Y+30, r25	; 0x1e
    21d0:	8d 8f       	std	Y+29, r24	; 0x1d
    21d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_displayCharacter+0x1ea>
    21da:	9e 8f       	std	Y+30, r25	; 0x1e
    21dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	69 ad       	ldd	r22, Y+57	; 0x39
    21e2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <GPIO_writePort>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a0 e8       	ldi	r26, 0x80	; 128
    21ec:	bf e3       	ldi	r27, 0x3F	; 63
    21ee:	89 8f       	std	Y+25, r24	; 0x19
    21f0:	9a 8f       	std	Y+26, r25	; 0x1a
    21f2:	ab 8f       	std	Y+27, r26	; 0x1b
    21f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f6:	69 8d       	ldd	r22, Y+25	; 0x19
    21f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	4a ef       	ldi	r20, 0xFA	; 250
    2204:	54 e4       	ldi	r21, 0x44	; 68
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8d 8b       	std	Y+21, r24	; 0x15
    2210:	9e 8b       	std	Y+22, r25	; 0x16
    2212:	af 8b       	std	Y+23, r26	; 0x17
    2214:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2216:	6d 89       	ldd	r22, Y+21	; 0x15
    2218:	7e 89       	ldd	r23, Y+22	; 0x16
    221a:	8f 89       	ldd	r24, Y+23	; 0x17
    221c:	98 8d       	ldd	r25, Y+24	; 0x18
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	2c f4       	brge	.+10     	; 0x2238 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9c 8b       	std	Y+20, r25	; 0x14
    2234:	8b 8b       	std	Y+19, r24	; 0x13
    2236:	3f c0       	rjmp	.+126    	; 0x22b6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2238:	6d 89       	ldd	r22, Y+21	; 0x15
    223a:	7e 89       	ldd	r23, Y+22	; 0x16
    223c:	8f 89       	ldd	r24, Y+23	; 0x17
    223e:	98 8d       	ldd	r25, Y+24	; 0x18
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	3f ef       	ldi	r19, 0xFF	; 255
    2244:	4f e7       	ldi	r20, 0x7F	; 127
    2246:	57 e4       	ldi	r21, 0x47	; 71
    2248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224c:	18 16       	cp	r1, r24
    224e:	4c f5       	brge	.+82     	; 0x22a2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2250:	69 8d       	ldd	r22, Y+25	; 0x19
    2252:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2254:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2256:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e2       	ldi	r20, 0x20	; 32
    225e:	51 e4       	ldi	r21, 0x41	; 65
    2260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9c 8b       	std	Y+20, r25	; 0x14
    2276:	8b 8b       	std	Y+19, r24	; 0x13
    2278:	0f c0       	rjmp	.+30     	; 0x2298 <LCD_displayCharacter+0x2ac>
    227a:	88 ec       	ldi	r24, 0xC8	; 200
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	9a 8b       	std	Y+18, r25	; 0x12
    2280:	89 8b       	std	Y+17, r24	; 0x11
    2282:	89 89       	ldd	r24, Y+17	; 0x11
    2284:	9a 89       	ldd	r25, Y+18	; 0x12
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <LCD_displayCharacter+0x29a>
    228a:	9a 8b       	std	Y+18, r25	; 0x12
    228c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228e:	8b 89       	ldd	r24, Y+19	; 0x13
    2290:	9c 89       	ldd	r25, Y+20	; 0x14
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	9c 8b       	std	Y+20, r25	; 0x14
    2296:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2298:	8b 89       	ldd	r24, Y+19	; 0x13
    229a:	9c 89       	ldd	r25, Y+20	; 0x14
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	69 f7       	brne	.-38     	; 0x227a <LCD_displayCharacter+0x28e>
    22a0:	14 c0       	rjmp	.+40     	; 0x22ca <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a2:	6d 89       	ldd	r22, Y+21	; 0x15
    22a4:	7e 89       	ldd	r23, Y+22	; 0x16
    22a6:	8f 89       	ldd	r24, Y+23	; 0x17
    22a8:	98 8d       	ldd	r25, Y+24	; 0x18
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9c 8b       	std	Y+20, r25	; 0x14
    22b4:	8b 8b       	std	Y+19, r24	; 0x13
    22b6:	8b 89       	ldd	r24, Y+19	; 0x13
    22b8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ba:	98 8b       	std	Y+16, r25	; 0x10
    22bc:	8f 87       	std	Y+15, r24	; 0x0f
    22be:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c0:	98 89       	ldd	r25, Y+16	; 0x10
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <LCD_displayCharacter+0x2d6>
    22c6:	98 8b       	std	Y+16, r25	; 0x10
    22c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_writePin>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	a0 e8       	ldi	r26, 0x80	; 128
    22da:	bf e3       	ldi	r27, 0x3F	; 63
    22dc:	8b 87       	std	Y+11, r24	; 0x0b
    22de:	9c 87       	std	Y+12, r25	; 0x0c
    22e0:	ad 87       	std	Y+13, r26	; 0x0d
    22e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	4a ef       	ldi	r20, 0xFA	; 250
    22f2:	54 e4       	ldi	r21, 0x44	; 68
    22f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	8f 83       	std	Y+7, r24	; 0x07
    22fe:	98 87       	std	Y+8, r25	; 0x08
    2300:	a9 87       	std	Y+9, r26	; 0x09
    2302:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2304:	6f 81       	ldd	r22, Y+7	; 0x07
    2306:	78 85       	ldd	r23, Y+8	; 0x08
    2308:	89 85       	ldd	r24, Y+9	; 0x09
    230a:	9a 85       	ldd	r25, Y+10	; 0x0a
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e8       	ldi	r20, 0x80	; 128
    2312:	5f e3       	ldi	r21, 0x3F	; 63
    2314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2318:	88 23       	and	r24, r24
    231a:	2c f4       	brge	.+10     	; 0x2326 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
    2324:	3f c0       	rjmp	.+126    	; 0x23a4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	3f ef       	ldi	r19, 0xFF	; 255
    2332:	4f e7       	ldi	r20, 0x7F	; 127
    2334:	57 e4       	ldi	r21, 0x47	; 71
    2336:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233a:	18 16       	cp	r1, r24
    233c:	4c f5       	brge	.+82     	; 0x2390 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2340:	7c 85       	ldd	r23, Y+12	; 0x0c
    2342:	8d 85       	ldd	r24, Y+13	; 0x0d
    2344:	9e 85       	ldd	r25, Y+14	; 0x0e
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e2       	ldi	r20, 0x20	; 32
    234c:	51 e4       	ldi	r21, 0x41	; 65
    234e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	bc 01       	movw	r22, r24
    2358:	cd 01       	movw	r24, r26
    235a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
    2366:	0f c0       	rjmp	.+30     	; 0x2386 <LCD_displayCharacter+0x39a>
    2368:	88 ec       	ldi	r24, 0xC8	; 200
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9c 83       	std	Y+4, r25	; 0x04
    236e:	8b 83       	std	Y+3, r24	; 0x03
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <LCD_displayCharacter+0x388>
    2378:	9c 83       	std	Y+4, r25	; 0x04
    237a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	9e 81       	ldd	r25, Y+6	; 0x06
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	9e 83       	std	Y+6, r25	; 0x06
    2384:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2386:	8d 81       	ldd	r24, Y+5	; 0x05
    2388:	9e 81       	ldd	r25, Y+6	; 0x06
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	69 f7       	brne	.-38     	; 0x2368 <LCD_displayCharacter+0x37c>
    238e:	14 c0       	rjmp	.+40     	; 0x23b8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2390:	6f 81       	ldd	r22, Y+7	; 0x07
    2392:	78 85       	ldd	r23, Y+8	; 0x08
    2394:	89 85       	ldd	r24, Y+9	; 0x09
    2396:	9a 85       	ldd	r25, Y+10	; 0x0a
    2398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	9a 81       	ldd	r25, Y+2	; 0x02
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <LCD_displayCharacter+0x3c4>
    23b4:	9a 83       	std	Y+2, r25	; 0x02
    23b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23b8:	e9 96       	adiw	r28, 0x39	; 57
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <LCD_displayString+0x6>
    23d0:	0f 92       	push	r0
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	9b 83       	std	Y+3, r25	; 0x03
    23d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23da:	19 82       	std	Y+1, r1	; 0x01
    23dc:	0e c0       	rjmp	.+28     	; 0x23fa <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	9b 81       	ldd	r25, Y+3	; 0x03
    23e8:	fc 01       	movw	r30, r24
    23ea:	e2 0f       	add	r30, r18
    23ec:	f3 1f       	adc	r31, r19
    23ee:	80 81       	ld	r24, Z
    23f0:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_displayCharacter>
		i++;
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	8f 5f       	subi	r24, 0xFF	; 255
    23f8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	fc 01       	movw	r30, r24
    2406:	e2 0f       	add	r30, r18
    2408:	f3 1f       	adc	r31, r19
    240a:	80 81       	ld	r24, Z
    240c:	88 23       	and	r24, r24
    240e:	39 f7       	brne	.-50     	; 0x23de <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	00 d0       	rcall	.+0      	; 0x2422 <LCD_moveCursor+0x6>
    2422:	00 d0       	rcall	.+0      	; 0x2424 <LCD_moveCursor+0x8>
    2424:	0f 92       	push	r0
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	8a 83       	std	Y+2, r24	; 0x02
    242c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	3d 83       	std	Y+5, r19	; 0x05
    2436:	2c 83       	std	Y+4, r18	; 0x04
    2438:	8c 81       	ldd	r24, Y+4	; 0x04
    243a:	9d 81       	ldd	r25, Y+5	; 0x05
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	91 05       	cpc	r25, r1
    2440:	c1 f0       	breq	.+48     	; 0x2472 <LCD_moveCursor+0x56>
    2442:	2c 81       	ldd	r18, Y+4	; 0x04
    2444:	3d 81       	ldd	r19, Y+5	; 0x05
    2446:	22 30       	cpi	r18, 0x02	; 2
    2448:	31 05       	cpc	r19, r1
    244a:	2c f4       	brge	.+10     	; 0x2456 <LCD_moveCursor+0x3a>
    244c:	8c 81       	ldd	r24, Y+4	; 0x04
    244e:	9d 81       	ldd	r25, Y+5	; 0x05
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	61 f0       	breq	.+24     	; 0x246c <LCD_moveCursor+0x50>
    2454:	19 c0       	rjmp	.+50     	; 0x2488 <LCD_moveCursor+0x6c>
    2456:	2c 81       	ldd	r18, Y+4	; 0x04
    2458:	3d 81       	ldd	r19, Y+5	; 0x05
    245a:	22 30       	cpi	r18, 0x02	; 2
    245c:	31 05       	cpc	r19, r1
    245e:	69 f0       	breq	.+26     	; 0x247a <LCD_moveCursor+0x5e>
    2460:	8c 81       	ldd	r24, Y+4	; 0x04
    2462:	9d 81       	ldd	r25, Y+5	; 0x05
    2464:	83 30       	cpi	r24, 0x03	; 3
    2466:	91 05       	cpc	r25, r1
    2468:	61 f0       	breq	.+24     	; 0x2482 <LCD_moveCursor+0x66>
    246a:	0e c0       	rjmp	.+28     	; 0x2488 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	0b c0       	rjmp	.+22     	; 0x2488 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	80 5c       	subi	r24, 0xC0	; 192
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	07 c0       	rjmp	.+14     	; 0x2488 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	80 5f       	subi	r24, 0xF0	; 240
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	03 c0       	rjmp	.+6      	; 0x2488 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	80 5b       	subi	r24, 0xB0	; 176
    2486:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	80 68       	ori	r24, 0x80	; 128
    248c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_sendCommand>
}
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <LCD_displayStringRowColumn+0x6>
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <LCD_displayStringRowColumn+0x8>
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	6a 83       	std	Y+2, r22	; 0x02
    24b0:	5c 83       	std	Y+4, r21	; 0x04
    24b2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	6a 81       	ldd	r22, Y+2	; 0x02
    24b8:	0e 94 0e 12 	call	0x241c	; 0x241c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	9c 81       	ldd	r25, Y+4	; 0x04
    24c0:	0e 94 e5 11 	call	0x23ca	; 0x23ca <LCD_displayString>
}
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	62 97       	sbiw	r28, 0x12	; 18
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	cd bf       	out	0x3d, r28	; 61
    24e6:	9a 8b       	std	Y+18, r25	; 0x12
    24e8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    24ea:	89 89       	ldd	r24, Y+17	; 0x11
    24ec:	9a 89       	ldd	r25, Y+18	; 0x12
    24ee:	9e 01       	movw	r18, r28
    24f0:	2f 5f       	subi	r18, 0xFF	; 255
    24f2:	3f 4f       	sbci	r19, 0xFF	; 255
    24f4:	b9 01       	movw	r22, r18
    24f6:	4a e0       	ldi	r20, 0x0A	; 10
    24f8:	50 e0       	ldi	r21, 0x00	; 0
    24fa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <itoa>
   LCD_displayString(buff); /* Display the string */
    24fe:	ce 01       	movw	r24, r28
    2500:	01 96       	adiw	r24, 0x01	; 1
    2502:	0e 94 e5 11 	call	0x23ca	; 0x23ca <LCD_displayString>
}
    2506:	62 96       	adiw	r28, 0x12	; 18
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	de bf       	out	0x3e, r29	; 62
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	cd bf       	out	0x3d, r28	; 61
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_sendCommand>
}
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <PWM_Timer0_Start>:
 * Setup the prescaler with F_CPU/8.
 * Setup the compare value based on the required input duty cycle
 * Setup the direction for OC0 as output pin through the GPIO driver.
 * The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */
void PWM_Timer0_Start(uint8 duty_cycle) {
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	00 d0       	rcall	.+0      	; 0x2532 <PWM_Timer0_Start+0x6>
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	8a 83       	std	Y+2, r24	; 0x02
	if (duty_cycle == 0) {
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
    253a:	88 23       	and	r24, r24
    253c:	51 f4       	brne	.+20     	; 0x2552 <PWM_Timer0_Start+0x26>
		TCNT0 = 0; //Set Timer Initial value
    253e:	e2 e5       	ldi	r30, 0x52	; 82
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	10 82       	st	Z, r1
		OCR0 = 0;
    2544:	ec e5       	ldi	r30, 0x5C	; 92
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	10 82       	st	Z, r1
		TCCR0 = 0;
    254a:	e3 e5       	ldi	r30, 0x53	; 83
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	10 82       	st	Z, r1
    2550:	29 c0       	rjmp	.+82     	; 0x25a4 <PWM_Timer0_Start+0x78>
		return;
	}
	uint8 acmpValue = 0; //Compare Value
    2552:	19 82       	std	Y+1, r1	; 0x01
	acmpValue = (255 * duty_cycle) / 100;
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	48 2f       	mov	r20, r24
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	ca 01       	movw	r24, r20
    255c:	9c 01       	movw	r18, r24
    255e:	22 0f       	add	r18, r18
    2560:	33 1f       	adc	r19, r19
    2562:	c9 01       	movw	r24, r18
    2564:	96 95       	lsr	r25
    2566:	98 2f       	mov	r25, r24
    2568:	88 27       	eor	r24, r24
    256a:	97 95       	ror	r25
    256c:	87 95       	ror	r24
    256e:	82 1b       	sub	r24, r18
    2570:	93 0b       	sbc	r25, r19
    2572:	84 0f       	add	r24, r20
    2574:	95 1f       	adc	r25, r21
    2576:	24 e6       	ldi	r18, 0x64	; 100
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	b9 01       	movw	r22, r18
    257c:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__divmodhi4>
    2580:	cb 01       	movw	r24, r22
    2582:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    2584:	e2 e5       	ldi	r30, 0x52	; 82
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	10 82       	st	Z, r1

	OCR0 = acmpValue; // Set Compare Value
    258a:	ec e5       	ldi	r30, 0x5C	; 92
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	80 83       	st	Z, r24

	//set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	63 e0       	ldi	r22, 0x03	; 3
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
    259c:	e3 e5       	ldi	r30, 0x53	; 83
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	8a e6       	ldi	r24, 0x6A	; 106
    25a2:	80 83       	st	Z, r24
}
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect) {
    25ae:	1f 92       	push	r1
    25b0:	0f 92       	push	r0
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	0f 92       	push	r0
    25b6:	11 24       	eor	r1, r1
    25b8:	2f 93       	push	r18
    25ba:	3f 93       	push	r19
    25bc:	4f 93       	push	r20
    25be:	5f 93       	push	r21
    25c0:	6f 93       	push	r22
    25c2:	7f 93       	push	r23
    25c4:	8f 93       	push	r24
    25c6:	9f 93       	push	r25
    25c8:	af 93       	push	r26
    25ca:	bf 93       	push	r27
    25cc:	ef 93       	push	r30
    25ce:	ff 93       	push	r31
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER1_callBack_ptr != NULL_PTR) {
    25d8:	80 91 86 00 	lds	r24, 0x0086
    25dc:	90 91 87 00 	lds	r25, 0x0087
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	29 f0       	breq	.+10     	; 0x25ee <__vector_7+0x40>
		/* Call the Call Back function in the application interrupt */
		(*g_TIMER1_callBack_ptr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    25e4:	e0 91 86 00 	lds	r30, 0x0086
    25e8:	f0 91 87 00 	lds	r31, 0x0087
    25ec:	09 95       	icall
	}
}
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	ff 91       	pop	r31
    25f4:	ef 91       	pop	r30
    25f6:	bf 91       	pop	r27
    25f8:	af 91       	pop	r26
    25fa:	9f 91       	pop	r25
    25fc:	8f 91       	pop	r24
    25fe:	7f 91       	pop	r23
    2600:	6f 91       	pop	r22
    2602:	5f 91       	pop	r21
    2604:	4f 91       	pop	r20
    2606:	3f 91       	pop	r19
    2608:	2f 91       	pop	r18
    260a:	0f 90       	pop	r0
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	0f 90       	pop	r0
    2610:	1f 90       	pop	r1
    2612:	18 95       	reti

00002614 <__vector_9>:
ISR(TIMER1_OVF_vect) {
    2614:	1f 92       	push	r1
    2616:	0f 92       	push	r0
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	0f 92       	push	r0
    261c:	11 24       	eor	r1, r1
    261e:	2f 93       	push	r18
    2620:	3f 93       	push	r19
    2622:	4f 93       	push	r20
    2624:	5f 93       	push	r21
    2626:	6f 93       	push	r22
    2628:	7f 93       	push	r23
    262a:	8f 93       	push	r24
    262c:	9f 93       	push	r25
    262e:	af 93       	push	r26
    2630:	bf 93       	push	r27
    2632:	ef 93       	push	r30
    2634:	ff 93       	push	r31
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER1_callBack_ptr != NULL_PTR) {
    263e:	80 91 86 00 	lds	r24, 0x0086
    2642:	90 91 87 00 	lds	r25, 0x0087
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	29 f0       	breq	.+10     	; 0x2654 <__vector_9+0x40>
		/* Call the Call Back function in the application interrupt */
		(*g_TIMER1_callBack_ptr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    264a:	e0 91 86 00 	lds	r30, 0x0086
    264e:	f0 91 87 00 	lds	r31, 0x0087
    2652:	09 95       	icall
	}
}
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	ff 91       	pop	r31
    265a:	ef 91       	pop	r30
    265c:	bf 91       	pop	r27
    265e:	af 91       	pop	r26
    2660:	9f 91       	pop	r25
    2662:	8f 91       	pop	r24
    2664:	7f 91       	pop	r23
    2666:	6f 91       	pop	r22
    2668:	5f 91       	pop	r21
    266a:	4f 91       	pop	r20
    266c:	3f 91       	pop	r19
    266e:	2f 91       	pop	r18
    2670:	0f 90       	pop	r0
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	0f 90       	pop	r0
    2676:	1f 90       	pop	r1
    2678:	18 95       	reti

0000267a <Timer1_init>:
 * 	1. Set the required mode.
 * 	2. Set the required initial and compare value.
 * 	2. Set the required prescaler.
 * 	4. Initialize Timer1 Registers
 */
void Timer1_init(const TIMER1_ConfigType *Config_Ptr) {
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	00 d0       	rcall	.+0      	; 0x2680 <Timer1_init+0x6>
    2680:	00 d0       	rcall	.+0      	; 0x2682 <Timer1_init+0x8>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->mode) {
    268a:	e9 81       	ldd	r30, Y+1	; 0x01
    268c:	fa 81       	ldd	r31, Y+2	; 0x02
    268e:	80 81       	ld	r24, Z
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	3c 83       	std	Y+4, r19	; 0x04
    2696:	2b 83       	std	Y+3, r18	; 0x03
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	9c 81       	ldd	r25, Y+4	; 0x04
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	31 f0       	breq	.+12     	; 0x26ac <Timer1_init+0x32>
    26a0:	2b 81       	ldd	r18, Y+3	; 0x03
    26a2:	3c 81       	ldd	r19, Y+4	; 0x04
    26a4:	22 30       	cpi	r18, 0x02	; 2
    26a6:	31 05       	cpc	r19, r1
    26a8:	19 f1       	breq	.+70     	; 0x26f0 <Timer1_init+0x76>
    26aa:	54 c0       	rjmp	.+168    	; 0x2754 <Timer1_init+0xda>
	case 0: {
		/* Timer1 operates in Normal Mode (Non-PWM) */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    26ac:	ef e4       	ldi	r30, 0x4F	; 79
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	8c e0       	ldi	r24, 0x0C	; 12
    26b2:	80 83       	st	Z, r24
		/* Initial Value for Timer1 */
		TCNT1 = Config_Ptr->initialValue;
    26b4:	ac e4       	ldi	r26, 0x4C	; 76
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ba:	fa 81       	ldd	r31, Y+2	; 0x02
    26bc:	81 81       	ldd	r24, Z+1	; 0x01
    26be:	92 81       	ldd	r25, Z+2	; 0x02
    26c0:	11 96       	adiw	r26, 0x01	; 1
    26c2:	9c 93       	st	X, r25
    26c4:	8e 93       	st	-X, r24
		/* Enable the Overflow interrupt to generate an interrupt when the register overflows*/
		SET_BIT(TIMSK, TOIE1);
    26c6:	a9 e5       	ldi	r26, 0x59	; 89
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e9 e5       	ldi	r30, 0x59	; 89
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	84 60       	ori	r24, 0x04	; 4
    26d2:	8c 93       	st	X, r24
		/* Enable the global interrupt flag*/
		SREG |= (1 << 7);
    26d4:	af e5       	ldi	r26, 0x5F	; 95
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	ef e5       	ldi	r30, 0x5F	; 95
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	80 68       	ori	r24, 0x80	; 128
    26e0:	8c 93       	st	X, r24
		/*insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register*/
		TCCR1B = Config_Ptr->prescaler;
    26e2:	ae e4       	ldi	r26, 0x4E	; 78
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e9 81       	ldd	r30, Y+1	; 0x01
    26e8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ea:	85 81       	ldd	r24, Z+5	; 0x05
    26ec:	8c 93       	st	X, r24
    26ee:	32 c0       	rjmp	.+100    	; 0x2754 <Timer1_init+0xda>
		break;
	}
	case 2: {
		/* Timer1 operates in Compare Mode on (Non-PWM) */
		TCCR1A = (1 << FOC1A);
    26f0:	ef e4       	ldi	r30, 0x4F	; 79
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	88 e0       	ldi	r24, 0x08	; 8
    26f6:	80 83       	st	Z, r24
		/* Initial Value for Timer1 */
		TCNT1 = Config_Ptr->initialValue;
    26f8:	ac e4       	ldi	r26, 0x4C	; 76
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e9 81       	ldd	r30, Y+1	; 0x01
    26fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2700:	81 81       	ldd	r24, Z+1	; 0x01
    2702:	92 81       	ldd	r25, Z+2	; 0x02
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	9c 93       	st	X, r25
    2708:	8e 93       	st	-X, r24
		/* Compare Value for Timer1 */
		OCR1A = Config_Ptr->compareValue;
    270a:	aa e4       	ldi	r26, 0x4A	; 74
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e9 81       	ldd	r30, Y+1	; 0x01
    2710:	fa 81       	ldd	r31, Y+2	; 0x02
    2712:	83 81       	ldd	r24, Z+3	; 0x03
    2714:	94 81       	ldd	r25, Z+4	; 0x04
    2716:	11 96       	adiw	r26, 0x01	; 1
    2718:	9c 93       	st	X, r25
    271a:	8e 93       	st	-X, r24
		/* Enable the Timer1 Output Compare A interrupt to generate an interrupt when the register Matches the value */
		TIMSK = (1 << OCIE1A);
    271c:	e9 e5       	ldi	r30, 0x59	; 89
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 e1       	ldi	r24, 0x10	; 16
    2722:	80 83       	st	Z, r24
		/* Enable the global interrupt flag*/
		SREG |= (1 << 7);
    2724:	af e5       	ldi	r26, 0x5F	; 95
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	ef e5       	ldi	r30, 0x5F	; 95
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	80 68       	ori	r24, 0x80	; 128
    2730:	8c 93       	st	X, r24
		/*insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register
		 * and the WGM12 BIT for CTC mode
		 */
		TCCR1B = ((Config_Ptr->mode) << 2) | (Config_Ptr->prescaler);
    2732:	ae e4       	ldi	r26, 0x4E	; 78
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e9 81       	ldd	r30, Y+1	; 0x01
    2738:	fa 81       	ldd	r31, Y+2	; 0x02
    273a:	80 81       	ld	r24, Z
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	98 2f       	mov	r25, r24
    274a:	e9 81       	ldd	r30, Y+1	; 0x01
    274c:	fa 81       	ldd	r31, Y+2	; 0x02
    274e:	85 81       	ldd	r24, Z+5	; 0x05
    2750:	89 2b       	or	r24, r25
    2752:	8c 93       	st	X, r24
	}
	}
}
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void)) {
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <Timer1_setCallBack+0x6>
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_TIMER1_callBack_ptr = a_ptr;
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	90 93 87 00 	sts	0x0087, r25
    2778:	80 93 86 00 	sts	0x0086, r24
}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <Timer1_deInit>:

void Timer1_deInit(void) {
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    278e:	ef e4       	ldi	r30, 0x4F	; 79
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	10 82       	st	Z, r1
	TCNT1 = 0;
    2794:	ec e4       	ldi	r30, 0x4C	; 76
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	11 82       	std	Z+1, r1	; 0x01
    279a:	10 82       	st	Z, r1
	OCR1A = 0;
    279c:	ea e4       	ldi	r30, 0x4A	; 74
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	11 82       	std	Z+1, r1	; 0x01
    27a2:	10 82       	st	Z, r1
	TCCR1B = 0;
    27a4:	ee e4       	ldi	r30, 0x4E	; 78
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	10 82       	st	Z, r1
	/* Disable the Output Compare A interrupt */
	CLEAR_BIT(TIMSK, OCIE1A);
    27aa:	a9 e5       	ldi	r26, 0x59	; 89
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e9 e5       	ldi	r30, 0x59	; 89
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	8f 7e       	andi	r24, 0xEF	; 239
    27b6:	8c 93       	st	X, r24
	/* Disable the Overflow interrupt */
	CLEAR_BIT(TIMSK, TOIE1);
    27b8:	a9 e5       	ldi	r26, 0x59	; 89
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	e9 e5       	ldi	r30, 0x59	; 89
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	8b 7f       	andi	r24, 0xFB	; 251
    27c4:	8c 93       	st	X, r24
	/* Reset the global pointer value */
	g_TIMER1_callBack_ptr = NULL_PTR;
    27c6:	10 92 87 00 	sts	0x0087, r1
    27ca:	10 92 86 00 	sts	0x0086, r1
}
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	08 95       	ret

000027d4 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    27dc:	e0 e2       	ldi	r30, 0x20	; 32
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	82 e0       	ldi	r24, 0x02	; 2
    27e2:	80 83       	st	Z, r24
	TWSR = 0x00;
    27e4:	e1 e2       	ldi	r30, 0x21	; 33
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    27ea:	e2 e2       	ldi	r30, 0x22	; 34
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	82 e0       	ldi	r24, 0x02	; 2
    27f0:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    27f2:	e6 e5       	ldi	r30, 0x56	; 86
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	84 e0       	ldi	r24, 0x04	; 4
    27f8:	80 83       	st	Z, r24
}
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <TWI_start>:

void TWI_start(void)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2808:	e6 e5       	ldi	r30, 0x56	; 86
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	84 ea       	ldi	r24, 0xA4	; 164
    280e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2810:	e6 e5       	ldi	r30, 0x56	; 86
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	88 23       	and	r24, r24
    2818:	dc f7       	brge	.-10     	; 0x2810 <TWI_start+0x10>
}
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <TWI_stop>:

void TWI_stop(void)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2828:	e6 e5       	ldi	r30, 0x56	; 86
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	84 e9       	ldi	r24, 0x94	; 148
    282e:	80 83       	st	Z, r24
}
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	0f 92       	push	r0
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2842:	e3 e2       	ldi	r30, 0x23	; 35
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    284a:	e6 e5       	ldi	r30, 0x56	; 86
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	84 e8       	ldi	r24, 0x84	; 132
    2850:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2852:	e6 e5       	ldi	r30, 0x56	; 86
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	88 23       	and	r24, r24
    285a:	dc f7       	brge	.-10     	; 0x2852 <TWI_writeByte+0x1c>
}
    285c:	0f 90       	pop	r0
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    286c:	e6 e5       	ldi	r30, 0x56	; 86
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	84 ec       	ldi	r24, 0xC4	; 196
    2872:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2874:	e6 e5       	ldi	r30, 0x56	; 86
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	88 23       	and	r24, r24
    287c:	dc f7       	brge	.-10     	; 0x2874 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    287e:	e3 e2       	ldi	r30, 0x23	; 35
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
}
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2892:	e6 e5       	ldi	r30, 0x56	; 86
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	84 e8       	ldi	r24, 0x84	; 132
    2898:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    289a:	e6 e5       	ldi	r30, 0x56	; 86
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	88 23       	and	r24, r24
    28a2:	dc f7       	brge	.-10     	; 0x289a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    28a4:	e3 e2       	ldi	r30, 0x23	; 35
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
}
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	0f 92       	push	r0
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    28ba:	e1 e2       	ldi	r30, 0x21	; 33
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	88 7f       	andi	r24, 0xF8	; 248
    28c2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28c6:	0f 90       	pop	r0
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <USART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void USART_init(const USART_ConfigType *Config_Ptr) {
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <USART_init+0x6>
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <USART_init+0x8>
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	9c 83       	std	Y+4, r25	; 0x04
    28dc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    28de:	1a 82       	std	Y+2, r1	; 0x02
    28e0:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    28e2:	eb e2       	ldi	r30, 0x2B	; 43
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    28ea:	ea e2       	ldi	r30, 0x2A	; 42
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	88 e1       	ldi	r24, 0x18	; 24
    28f0:	80 83       	st	Z, r24
	 * UPM1:0    Disable parity bit
	 * USBS      One stop bit
	 * UCSZ1:0   For 8-bit data mode
	 * UCPOL     Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL);
    28f2:	e0 e4       	ldi	r30, 0x40	; 64
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 e8       	ldi	r24, 0x80	; 128
    28f8:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->mode) << 6);
    28fa:	a0 e4       	ldi	r26, 0x40	; 64
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e0 e4       	ldi	r30, 0x40	; 64
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	28 2f       	mov	r18, r24
    2906:	2f 7b       	andi	r18, 0xBF	; 191
    2908:	eb 81       	ldd	r30, Y+3	; 0x03
    290a:	fc 81       	ldd	r31, Y+4	; 0x04
    290c:	80 81       	ld	r24, Z
    290e:	88 2f       	mov	r24, r24
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	00 24       	eor	r0, r0
    2914:	96 95       	lsr	r25
    2916:	87 95       	ror	r24
    2918:	07 94       	ror	r0
    291a:	96 95       	lsr	r25
    291c:	87 95       	ror	r24
    291e:	07 94       	ror	r0
    2920:	98 2f       	mov	r25, r24
    2922:	80 2d       	mov	r24, r0
    2924:	82 2b       	or	r24, r18
    2926:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity) << 5);
    2928:	a0 e4       	ldi	r26, 0x40	; 64
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e0 e4       	ldi	r30, 0x40	; 64
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	28 2f       	mov	r18, r24
    2934:	2f 7c       	andi	r18, 0xCF	; 207
    2936:	eb 81       	ldd	r30, Y+3	; 0x03
    2938:	fc 81       	ldd	r31, Y+4	; 0x04
    293a:	81 81       	ldd	r24, Z+1	; 0x01
    293c:	88 2f       	mov	r24, r24
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	82 95       	swap	r24
    2946:	92 95       	swap	r25
    2948:	90 7f       	andi	r25, 0xF0	; 240
    294a:	98 27       	eor	r25, r24
    294c:	80 7f       	andi	r24, 0xF0	; 240
    294e:	98 27       	eor	r25, r24
    2950:	82 2b       	or	r24, r18
    2952:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop) << 3);
    2954:	a0 e4       	ldi	r26, 0x40	; 64
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e0 e4       	ldi	r30, 0x40	; 64
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	28 2f       	mov	r18, r24
    2960:	27 7f       	andi	r18, 0xF7	; 247
    2962:	eb 81       	ldd	r30, Y+3	; 0x03
    2964:	fc 81       	ldd	r31, Y+4	; 0x04
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	88 2f       	mov	r24, r24
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	82 2b       	or	r24, r18
    297a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->size) << 1);
    297c:	a0 e4       	ldi	r26, 0x40	; 64
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e0 e4       	ldi	r30, 0x40	; 64
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	28 2f       	mov	r18, r24
    2988:	29 7f       	andi	r18, 0xF9	; 249
    298a:	eb 81       	ldd	r30, Y+3	; 0x03
    298c:	fc 81       	ldd	r31, Y+4	; 0x04
    298e:	83 81       	ldd	r24, Z+3	; 0x03
    2990:	88 2f       	mov	r24, r24
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	88 0f       	add	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	82 2b       	or	r24, r18
    299a:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->BaudRate) * 8UL))) - 1);
    299c:	eb 81       	ldd	r30, Y+3	; 0x03
    299e:	fc 81       	ldd	r31, Y+4	; 0x04
    29a0:	84 81       	ldd	r24, Z+4	; 0x04
    29a2:	95 81       	ldd	r25, Z+5	; 0x05
    29a4:	cc 01       	movw	r24, r24
    29a6:	a0 e0       	ldi	r26, 0x00	; 0
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	aa 1f       	adc	r26, r26
    29b0:	bb 1f       	adc	r27, r27
    29b2:	88 0f       	add	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	aa 1f       	adc	r26, r26
    29b8:	bb 1f       	adc	r27, r27
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	aa 1f       	adc	r26, r26
    29c0:	bb 1f       	adc	r27, r27
    29c2:	9c 01       	movw	r18, r24
    29c4:	ad 01       	movw	r20, r26
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	92 e1       	ldi	r25, 0x12	; 18
    29ca:	aa e7       	ldi	r26, 0x7A	; 122
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <__udivmodsi4>
    29d6:	da 01       	movw	r26, r20
    29d8:	c9 01       	movw	r24, r18
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    29e0:	e0 e4       	ldi	r30, 0x40	; 64
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	89 2f       	mov	r24, r25
    29ea:	99 27       	eor	r25, r25
    29ec:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    29ee:	e9 e2       	ldi	r30, 0x29	; 41
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	80 83       	st	Z, r24
}
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <USART_sendByte>:
void USART_sendByte(uint8 data) {
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	0f 92       	push	r0
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    2a10:	ec e2       	ldi	r30, 0x2C	; 44
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(UCSRA, TXC)) {
    2a18:	eb e2       	ldi	r30, 0x2B	; 43
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	88 2f       	mov	r24, r24
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	80 74       	andi	r24, 0x40	; 64
    2a24:	90 70       	andi	r25, 0x00	; 0
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	b9 f3       	breq	.-18     	; 0x2a18 <USART_sendByte+0x14>
	} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA, TXC); // Clear the TXC flag
    2a2a:	ab e2       	ldi	r26, 0x2B	; 43
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	eb e2       	ldi	r30, 0x2B	; 43
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	80 64       	ori	r24, 0x40	; 64
    2a36:	8c 93       	st	X, r24
}
    2a38:	0f 90       	pop	r0
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <USART_recieveByte>:
uint8 USART_recieveByte(void) {
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    2a48:	eb e2       	ldi	r30, 0x2B	; 43
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	88 23       	and	r24, r24
    2a50:	dc f7       	brge	.-10     	; 0x2a48 <USART_recieveByte+0x8>
	}
	return UDR;
    2a52:	ec e2       	ldi	r30, 0x2C	; 44
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
}
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <USART_sendString>:
void USART_sendString(const uint8 *Str) {
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <USART_sendString+0x6>
    2a64:	0f 92       	push	r0
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	9b 83       	std	Y+3, r25	; 0x03
    2a6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a6e:	19 82       	std	Y+1, r1	; 0x01
    2a70:	0e c0       	rjmp	.+28     	; 0x2a8e <USART_sendString+0x30>
	/* Send the whole string */
	while (Str[i] != '\0') {
		USART_sendByte(Str[i]);
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	e2 0f       	add	r30, r18
    2a80:	f3 1f       	adc	r31, r19
    2a82:	80 81       	ld	r24, Z
    2a84:	0e 94 02 15 	call	0x2a04	; 0x2a04 <USART_sendByte>
		i++;
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}
void USART_sendString(const uint8 *Str) {
	uint8 i = 0;
	/* Send the whole string */
	while (Str[i] != '\0') {
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	9b 81       	ldd	r25, Y+3	; 0x03
    2a98:	fc 01       	movw	r30, r24
    2a9a:	e2 0f       	add	r30, r18
    2a9c:	f3 1f       	adc	r31, r19
    2a9e:	80 81       	ld	r24, Z
    2aa0:	88 23       	and	r24, r24
    2aa2:	39 f7       	brne	.-50     	; 0x2a72 <USART_sendString+0x14>
		USART_sendByte(Str[i]);
		i++;
	}
}
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <USART_receiveString>:
void USART_receiveString(uint8 *Str) {
    2ab0:	0f 93       	push	r16
    2ab2:	1f 93       	push	r17
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <USART_receiveString+0xa>
    2aba:	0f 92       	push	r0
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	9b 83       	std	Y+3, r25	; 0x03
    2ac2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ac4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = USART_recieveByte();
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad0:	8c 01       	movw	r16, r24
    2ad2:	02 0f       	add	r16, r18
    2ad4:	13 1f       	adc	r17, r19
    2ad6:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
    2ada:	f8 01       	movw	r30, r16
    2adc:	80 83       	st	Z, r24
    2ade:	0f c0       	rjmp	.+30     	; 0x2afe <USART_receiveString+0x4e>

	/* Receive the whole string until the '$' */
	while (Str[i] != '$') {
		i++;
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	8f 5f       	subi	r24, 0xFF	; 255
    2ae4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_recieveByte();
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	28 2f       	mov	r18, r24
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	9b 81       	ldd	r25, Y+3	; 0x03
    2af0:	8c 01       	movw	r16, r24
    2af2:	02 0f       	add	r16, r18
    2af4:	13 1f       	adc	r17, r19
    2af6:	0e 94 20 15 	call	0x2a40	; 0x2a40 <USART_recieveByte>
    2afa:	f8 01       	movw	r30, r16
    2afc:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = USART_recieveByte();

	/* Receive the whole string until the '$' */
	while (Str[i] != '$') {
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	9b 81       	ldd	r25, Y+3	; 0x03
    2b08:	fc 01       	movw	r30, r24
    2b0a:	e2 0f       	add	r30, r18
    2b0c:	f3 1f       	adc	r31, r19
    2b0e:	80 81       	ld	r24, Z
    2b10:	84 32       	cpi	r24, 0x24	; 36
    2b12:	31 f7       	brne	.-52     	; 0x2ae0 <USART_receiveString+0x30>
		i++;
		Str[i] = USART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1e:	fc 01       	movw	r30, r24
    2b20:	e2 0f       	add	r30, r18
    2b22:	f3 1f       	adc	r31, r19
    2b24:	10 82       	st	Z, r1
}
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	08 95       	ret

00002b36 <__divmodhi4>:
    2b36:	97 fb       	bst	r25, 7
    2b38:	09 2e       	mov	r0, r25
    2b3a:	07 26       	eor	r0, r23
    2b3c:	0a d0       	rcall	.+20     	; 0x2b52 <__divmodhi4_neg1>
    2b3e:	77 fd       	sbrc	r23, 7
    2b40:	04 d0       	rcall	.+8      	; 0x2b4a <__divmodhi4_neg2>
    2b42:	2e d0       	rcall	.+92     	; 0x2ba0 <__udivmodhi4>
    2b44:	06 d0       	rcall	.+12     	; 0x2b52 <__divmodhi4_neg1>
    2b46:	00 20       	and	r0, r0
    2b48:	1a f4       	brpl	.+6      	; 0x2b50 <__divmodhi4_exit>

00002b4a <__divmodhi4_neg2>:
    2b4a:	70 95       	com	r23
    2b4c:	61 95       	neg	r22
    2b4e:	7f 4f       	sbci	r23, 0xFF	; 255

00002b50 <__divmodhi4_exit>:
    2b50:	08 95       	ret

00002b52 <__divmodhi4_neg1>:
    2b52:	f6 f7       	brtc	.-4      	; 0x2b50 <__divmodhi4_exit>
    2b54:	90 95       	com	r25
    2b56:	81 95       	neg	r24
    2b58:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5a:	08 95       	ret

00002b5c <__udivmodsi4>:
    2b5c:	a1 e2       	ldi	r26, 0x21	; 33
    2b5e:	1a 2e       	mov	r1, r26
    2b60:	aa 1b       	sub	r26, r26
    2b62:	bb 1b       	sub	r27, r27
    2b64:	fd 01       	movw	r30, r26
    2b66:	0d c0       	rjmp	.+26     	; 0x2b82 <__udivmodsi4_ep>

00002b68 <__udivmodsi4_loop>:
    2b68:	aa 1f       	adc	r26, r26
    2b6a:	bb 1f       	adc	r27, r27
    2b6c:	ee 1f       	adc	r30, r30
    2b6e:	ff 1f       	adc	r31, r31
    2b70:	a2 17       	cp	r26, r18
    2b72:	b3 07       	cpc	r27, r19
    2b74:	e4 07       	cpc	r30, r20
    2b76:	f5 07       	cpc	r31, r21
    2b78:	20 f0       	brcs	.+8      	; 0x2b82 <__udivmodsi4_ep>
    2b7a:	a2 1b       	sub	r26, r18
    2b7c:	b3 0b       	sbc	r27, r19
    2b7e:	e4 0b       	sbc	r30, r20
    2b80:	f5 0b       	sbc	r31, r21

00002b82 <__udivmodsi4_ep>:
    2b82:	66 1f       	adc	r22, r22
    2b84:	77 1f       	adc	r23, r23
    2b86:	88 1f       	adc	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	1a 94       	dec	r1
    2b8c:	69 f7       	brne	.-38     	; 0x2b68 <__udivmodsi4_loop>
    2b8e:	60 95       	com	r22
    2b90:	70 95       	com	r23
    2b92:	80 95       	com	r24
    2b94:	90 95       	com	r25
    2b96:	9b 01       	movw	r18, r22
    2b98:	ac 01       	movw	r20, r24
    2b9a:	bd 01       	movw	r22, r26
    2b9c:	cf 01       	movw	r24, r30
    2b9e:	08 95       	ret

00002ba0 <__udivmodhi4>:
    2ba0:	aa 1b       	sub	r26, r26
    2ba2:	bb 1b       	sub	r27, r27
    2ba4:	51 e1       	ldi	r21, 0x11	; 17
    2ba6:	07 c0       	rjmp	.+14     	; 0x2bb6 <__udivmodhi4_ep>

00002ba8 <__udivmodhi4_loop>:
    2ba8:	aa 1f       	adc	r26, r26
    2baa:	bb 1f       	adc	r27, r27
    2bac:	a6 17       	cp	r26, r22
    2bae:	b7 07       	cpc	r27, r23
    2bb0:	10 f0       	brcs	.+4      	; 0x2bb6 <__udivmodhi4_ep>
    2bb2:	a6 1b       	sub	r26, r22
    2bb4:	b7 0b       	sbc	r27, r23

00002bb6 <__udivmodhi4_ep>:
    2bb6:	88 1f       	adc	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	5a 95       	dec	r21
    2bbc:	a9 f7       	brne	.-22     	; 0x2ba8 <__udivmodhi4_loop>
    2bbe:	80 95       	com	r24
    2bc0:	90 95       	com	r25
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	08 95       	ret

00002bc8 <__prologue_saves__>:
    2bc8:	2f 92       	push	r2
    2bca:	3f 92       	push	r3
    2bcc:	4f 92       	push	r4
    2bce:	5f 92       	push	r5
    2bd0:	6f 92       	push	r6
    2bd2:	7f 92       	push	r7
    2bd4:	8f 92       	push	r8
    2bd6:	9f 92       	push	r9
    2bd8:	af 92       	push	r10
    2bda:	bf 92       	push	r11
    2bdc:	cf 92       	push	r12
    2bde:	df 92       	push	r13
    2be0:	ef 92       	push	r14
    2be2:	ff 92       	push	r15
    2be4:	0f 93       	push	r16
    2be6:	1f 93       	push	r17
    2be8:	cf 93       	push	r28
    2bea:	df 93       	push	r29
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	ca 1b       	sub	r28, r26
    2bf2:	db 0b       	sbc	r29, r27
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	09 94       	ijmp

00002c00 <__epilogue_restores__>:
    2c00:	2a 88       	ldd	r2, Y+18	; 0x12
    2c02:	39 88       	ldd	r3, Y+17	; 0x11
    2c04:	48 88       	ldd	r4, Y+16	; 0x10
    2c06:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c08:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c0a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c0c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c0e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c10:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c12:	b9 84       	ldd	r11, Y+9	; 0x09
    2c14:	c8 84       	ldd	r12, Y+8	; 0x08
    2c16:	df 80       	ldd	r13, Y+7	; 0x07
    2c18:	ee 80       	ldd	r14, Y+6	; 0x06
    2c1a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c1c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c1e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c20:	aa 81       	ldd	r26, Y+2	; 0x02
    2c22:	b9 81       	ldd	r27, Y+1	; 0x01
    2c24:	ce 0f       	add	r28, r30
    2c26:	d1 1d       	adc	r29, r1
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	ed 01       	movw	r28, r26
    2c34:	08 95       	ret

00002c36 <itoa>:
    2c36:	fb 01       	movw	r30, r22
    2c38:	9f 01       	movw	r18, r30
    2c3a:	e8 94       	clt
    2c3c:	42 30       	cpi	r20, 0x02	; 2
    2c3e:	c4 f0       	brlt	.+48     	; 0x2c70 <itoa+0x3a>
    2c40:	45 32       	cpi	r20, 0x25	; 37
    2c42:	b4 f4       	brge	.+44     	; 0x2c70 <itoa+0x3a>
    2c44:	4a 30       	cpi	r20, 0x0A	; 10
    2c46:	29 f4       	brne	.+10     	; 0x2c52 <itoa+0x1c>
    2c48:	97 fb       	bst	r25, 7
    2c4a:	1e f4       	brtc	.+6      	; 0x2c52 <itoa+0x1c>
    2c4c:	90 95       	com	r25
    2c4e:	81 95       	neg	r24
    2c50:	9f 4f       	sbci	r25, 0xFF	; 255
    2c52:	64 2f       	mov	r22, r20
    2c54:	77 27       	eor	r23, r23
    2c56:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__udivmodhi4>
    2c5a:	80 5d       	subi	r24, 0xD0	; 208
    2c5c:	8a 33       	cpi	r24, 0x3A	; 58
    2c5e:	0c f0       	brlt	.+2      	; 0x2c62 <itoa+0x2c>
    2c60:	89 5d       	subi	r24, 0xD9	; 217
    2c62:	81 93       	st	Z+, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	00 97       	sbiw	r24, 0x00	; 0
    2c68:	a1 f7       	brne	.-24     	; 0x2c52 <itoa+0x1c>
    2c6a:	16 f4       	brtc	.+4      	; 0x2c70 <itoa+0x3a>
    2c6c:	5d e2       	ldi	r21, 0x2D	; 45
    2c6e:	51 93       	st	Z+, r21
    2c70:	10 82       	st	Z, r1
    2c72:	c9 01       	movw	r24, r18
    2c74:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <strrev>

00002c78 <strrev>:
    2c78:	dc 01       	movw	r26, r24
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	67 2f       	mov	r22, r23
    2c7e:	71 91       	ld	r23, Z+
    2c80:	77 23       	and	r23, r23
    2c82:	e1 f7       	brne	.-8      	; 0x2c7c <strrev+0x4>
    2c84:	32 97       	sbiw	r30, 0x02	; 2
    2c86:	04 c0       	rjmp	.+8      	; 0x2c90 <strrev+0x18>
    2c88:	7c 91       	ld	r23, X
    2c8a:	6d 93       	st	X+, r22
    2c8c:	70 83       	st	Z, r23
    2c8e:	62 91       	ld	r22, -Z
    2c90:	ae 17       	cp	r26, r30
    2c92:	bf 07       	cpc	r27, r31
    2c94:	c8 f3       	brcs	.-14     	; 0x2c88 <strrev+0x10>
    2c96:	08 95       	ret

00002c98 <_exit>:
    2c98:	f8 94       	cli

00002c9a <__stop_program>:
    2c9a:	ff cf       	rjmp	.-2      	; 0x2c9a <__stop_program>
