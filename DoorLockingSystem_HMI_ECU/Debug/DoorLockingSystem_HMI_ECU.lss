
DoorLockingSystem_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  000030fa  0000318e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800110  00800110  0000323e  2**0
                  ALLOC
  3 .stab         00002dc0  00000000  00000000  00003240  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a1  00000000  00000000  00006000  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000071a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000072e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007451  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ad34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b121  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b8ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 31       	cpi	r26, 0x14	; 20
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <main>
      8a:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ef       	ldi	r26, 0xF3	; 243
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ef       	ldi	r24, 0xF3	; 243
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CreatingSystemPassword>:
 *******************************************************************************/
/*
 * Description : Function creates a password for the system by taking the password two times and
 * sending it to the Control ECU to check if they match
 */
void CreatingSystemPassword(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e4 97       	sbiw	r28, 0x34	; 52
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*Arrays to hold the password first and second entry*/
	uint8 password[5] = { '@', '@', '@', '@', '@' };
     b5a:	ce 01       	movw	r24, r28
     b5c:	81 96       	adiw	r24, 0x21	; 33
     b5e:	9c a7       	std	Y+44, r25	; 0x2c
     b60:	8b a7       	std	Y+43, r24	; 0x2b
     b62:	e0 e0       	ldi	r30, 0x00	; 0
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	fe a7       	std	Y+46, r31	; 0x2e
     b68:	ed a7       	std	Y+45, r30	; 0x2d
     b6a:	f5 e0       	ldi	r31, 0x05	; 5
     b6c:	ff a7       	std	Y+47, r31	; 0x2f
     b6e:	ed a5       	ldd	r30, Y+45	; 0x2d
     b70:	fe a5       	ldd	r31, Y+46	; 0x2e
     b72:	00 80       	ld	r0, Z
     b74:	8d a5       	ldd	r24, Y+45	; 0x2d
     b76:	9e a5       	ldd	r25, Y+46	; 0x2e
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9e a7       	std	Y+46, r25	; 0x2e
     b7c:	8d a7       	std	Y+45, r24	; 0x2d
     b7e:	eb a5       	ldd	r30, Y+43	; 0x2b
     b80:	fc a5       	ldd	r31, Y+44	; 0x2c
     b82:	00 82       	st	Z, r0
     b84:	8b a5       	ldd	r24, Y+43	; 0x2b
     b86:	9c a5       	ldd	r25, Y+44	; 0x2c
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9c a7       	std	Y+44, r25	; 0x2c
     b8c:	8b a7       	std	Y+43, r24	; 0x2b
     b8e:	9f a5       	ldd	r25, Y+47	; 0x2f
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9f a7       	std	Y+47, r25	; 0x2f
     b94:	ef a5       	ldd	r30, Y+47	; 0x2f
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <CreatingSystemPassword+0x28>
	uint8 passwordCheck[5] = { '*', '*', '*', '*', '*' };
     b9a:	ce 01       	movw	r24, r28
     b9c:	86 96       	adiw	r24, 0x26	; 38
     b9e:	99 ab       	std	Y+49, r25	; 0x31
     ba0:	88 ab       	std	Y+48, r24	; 0x30
     ba2:	eb ef       	ldi	r30, 0xFB	; 251
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	fb ab       	std	Y+51, r31	; 0x33
     ba8:	ea ab       	std	Y+50, r30	; 0x32
     baa:	f5 e0       	ldi	r31, 0x05	; 5
     bac:	fc ab       	std	Y+52, r31	; 0x34
     bae:	ea a9       	ldd	r30, Y+50	; 0x32
     bb0:	fb a9       	ldd	r31, Y+51	; 0x33
     bb2:	00 80       	ld	r0, Z
     bb4:	8a a9       	ldd	r24, Y+50	; 0x32
     bb6:	9b a9       	ldd	r25, Y+51	; 0x33
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	9b ab       	std	Y+51, r25	; 0x33
     bbc:	8a ab       	std	Y+50, r24	; 0x32
     bbe:	e8 a9       	ldd	r30, Y+48	; 0x30
     bc0:	f9 a9       	ldd	r31, Y+49	; 0x31
     bc2:	00 82       	st	Z, r0
     bc4:	88 a9       	ldd	r24, Y+48	; 0x30
     bc6:	99 a9       	ldd	r25, Y+49	; 0x31
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	99 ab       	std	Y+49, r25	; 0x31
     bcc:	88 ab       	std	Y+48, r24	; 0x30
     bce:	9c a9       	ldd	r25, Y+52	; 0x34
     bd0:	91 50       	subi	r25, 0x01	; 1
     bd2:	9c ab       	std	Y+52, r25	; 0x34
     bd4:	ec a9       	ldd	r30, Y+52	; 0x34
     bd6:	ee 23       	and	r30, r30
     bd8:	51 f7       	brne	.-44     	; 0xbae <CreatingSystemPassword+0x68>
	key = 0;
     bda:	10 92 13 01 	sts	0x0113, r1
	LCD_displayString("Enter NEW Pass:");
     bde:	80 e6       	ldi	r24, 0x60	; 96
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	LCD_moveCursor(1, 0);
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_moveCursor>
     bee:	bb c0       	rjmp	.+374    	; 0xd66 <CreatingSystemPassword+0x220>
	/*while loop to fill the first password entry array*/
	while (key != '=') {
		key = KEYPAD_getPressedKey();
     bf0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <KEYPAD_getPressedKey>
     bf4:	80 93 13 01 	sts	0x0113, r24
		if ((key >= 0 && key < 10) && (password[0] == '@')) {
     bf8:	80 91 13 01 	lds	r24, 0x0113
     bfc:	8a 30       	cpi	r24, 0x0A	; 10
     bfe:	50 f4       	brcc	.+20     	; 0xc14 <CreatingSystemPassword+0xce>
     c00:	89 a1       	ldd	r24, Y+33	; 0x21
     c02:	80 34       	cpi	r24, 0x40	; 64
     c04:	39 f4       	brne	.+14     	; 0xc14 <CreatingSystemPassword+0xce>
			password[0] = key;
     c06:	80 91 13 01 	lds	r24, 0x0113
     c0a:	89 a3       	std	Y+33, r24	; 0x21
			LCD_displayCharacter('*');
     c0c:	8a e2       	ldi	r24, 0x2A	; 42
     c0e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
     c12:	37 c0       	rjmp	.+110    	; 0xc82 <CreatingSystemPassword+0x13c>
		} else if ((key >= 0 && key < 10) && (password[1] == '@')) {
     c14:	80 91 13 01 	lds	r24, 0x0113
     c18:	8a 30       	cpi	r24, 0x0A	; 10
     c1a:	50 f4       	brcc	.+20     	; 0xc30 <CreatingSystemPassword+0xea>
     c1c:	8a a1       	ldd	r24, Y+34	; 0x22
     c1e:	80 34       	cpi	r24, 0x40	; 64
     c20:	39 f4       	brne	.+14     	; 0xc30 <CreatingSystemPassword+0xea>
			password[1] = key;
     c22:	80 91 13 01 	lds	r24, 0x0113
     c26:	8a a3       	std	Y+34, r24	; 0x22
			LCD_displayCharacter('*');
     c28:	8a e2       	ldi	r24, 0x2A	; 42
     c2a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
     c2e:	29 c0       	rjmp	.+82     	; 0xc82 <CreatingSystemPassword+0x13c>
		} else if ((key >= 0 && key < 10) && (password[2] == '@')) {
     c30:	80 91 13 01 	lds	r24, 0x0113
     c34:	8a 30       	cpi	r24, 0x0A	; 10
     c36:	50 f4       	brcc	.+20     	; 0xc4c <CreatingSystemPassword+0x106>
     c38:	8b a1       	ldd	r24, Y+35	; 0x23
     c3a:	80 34       	cpi	r24, 0x40	; 64
     c3c:	39 f4       	brne	.+14     	; 0xc4c <CreatingSystemPassword+0x106>
			password[2] = key;
     c3e:	80 91 13 01 	lds	r24, 0x0113
     c42:	8b a3       	std	Y+35, r24	; 0x23
			LCD_displayCharacter('*');
     c44:	8a e2       	ldi	r24, 0x2A	; 42
     c46:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
     c4a:	1b c0       	rjmp	.+54     	; 0xc82 <CreatingSystemPassword+0x13c>
		} else if ((key >= 0 && key < 10) && (password[3] == '@')) {
     c4c:	80 91 13 01 	lds	r24, 0x0113
     c50:	8a 30       	cpi	r24, 0x0A	; 10
     c52:	50 f4       	brcc	.+20     	; 0xc68 <CreatingSystemPassword+0x122>
     c54:	8c a1       	ldd	r24, Y+36	; 0x24
     c56:	80 34       	cpi	r24, 0x40	; 64
     c58:	39 f4       	brne	.+14     	; 0xc68 <CreatingSystemPassword+0x122>
			password[3] = key;
     c5a:	80 91 13 01 	lds	r24, 0x0113
     c5e:	8c a3       	std	Y+36, r24	; 0x24
			LCD_displayCharacter('*');
     c60:	8a e2       	ldi	r24, 0x2A	; 42
     c62:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
     c66:	0d c0       	rjmp	.+26     	; 0xc82 <CreatingSystemPassword+0x13c>
		} else if ((key >= 0 && key < 10) && (password[4] == '@')) {
     c68:	80 91 13 01 	lds	r24, 0x0113
     c6c:	8a 30       	cpi	r24, 0x0A	; 10
     c6e:	48 f4       	brcc	.+18     	; 0xc82 <CreatingSystemPassword+0x13c>
     c70:	8d a1       	ldd	r24, Y+37	; 0x25
     c72:	80 34       	cpi	r24, 0x40	; 64
     c74:	31 f4       	brne	.+12     	; 0xc82 <CreatingSystemPassword+0x13c>
			password[4] = key;
     c76:	80 91 13 01 	lds	r24, 0x0113
     c7a:	8d a3       	std	Y+37, r24	; 0x25
			LCD_displayCharacter('*');
     c7c:	8a e2       	ldi	r24, 0x2A	; 42
     c7e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a8 e4       	ldi	r26, 0x48	; 72
     c88:	b3 e4       	ldi	r27, 0x43	; 67
     c8a:	89 8f       	std	Y+25, r24	; 0x19
     c8c:	9a 8f       	std	Y+26, r25	; 0x1a
     c8e:	ab 8f       	std	Y+27, r26	; 0x1b
     c90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c92:	69 8d       	ldd	r22, Y+25	; 0x19
     c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	4a ef       	ldi	r20, 0xFA	; 250
     ca0:	54 e4       	ldi	r21, 0x44	; 68
     ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	8d 8b       	std	Y+21, r24	; 0x15
     cac:	9e 8b       	std	Y+22, r25	; 0x16
     cae:	af 8b       	std	Y+23, r26	; 0x17
     cb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cb2:	6d 89       	ldd	r22, Y+21	; 0x15
     cb4:	7e 89       	ldd	r23, Y+22	; 0x16
     cb6:	8f 89       	ldd	r24, Y+23	; 0x17
     cb8:	98 8d       	ldd	r25, Y+24	; 0x18
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e8       	ldi	r20, 0x80	; 128
     cc0:	5f e3       	ldi	r21, 0x3F	; 63
     cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	2c f4       	brge	.+10     	; 0xcd4 <CreatingSystemPassword+0x18e>
		__ticks = 1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	9c 8b       	std	Y+20, r25	; 0x14
     cd0:	8b 8b       	std	Y+19, r24	; 0x13
     cd2:	3f c0       	rjmp	.+126    	; 0xd52 <CreatingSystemPassword+0x20c>
	else if (__tmp > 65535)
     cd4:	6d 89       	ldd	r22, Y+21	; 0x15
     cd6:	7e 89       	ldd	r23, Y+22	; 0x16
     cd8:	8f 89       	ldd	r24, Y+23	; 0x17
     cda:	98 8d       	ldd	r25, Y+24	; 0x18
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	3f ef       	ldi	r19, 0xFF	; 255
     ce0:	4f e7       	ldi	r20, 0x7F	; 127
     ce2:	57 e4       	ldi	r21, 0x47	; 71
     ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce8:	18 16       	cp	r1, r24
     cea:	4c f5       	brge	.+82     	; 0xd3e <CreatingSystemPassword+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cec:	69 8d       	ldd	r22, Y+25	; 0x19
     cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e2       	ldi	r20, 0x20	; 32
     cfa:	51 e4       	ldi	r21, 0x41	; 65
     cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	bc 01       	movw	r22, r24
     d06:	cd 01       	movw	r24, r26
     d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	9c 8b       	std	Y+20, r25	; 0x14
     d12:	8b 8b       	std	Y+19, r24	; 0x13
     d14:	0f c0       	rjmp	.+30     	; 0xd34 <CreatingSystemPassword+0x1ee>
     d16:	88 ec       	ldi	r24, 0xC8	; 200
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	9a 8b       	std	Y+18, r25	; 0x12
     d1c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d1e:	89 89       	ldd	r24, Y+17	; 0x11
     d20:	9a 89       	ldd	r25, Y+18	; 0x12
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <CreatingSystemPassword+0x1dc>
     d26:	9a 8b       	std	Y+18, r25	; 0x12
     d28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2a:	8b 89       	ldd	r24, Y+19	; 0x13
     d2c:	9c 89       	ldd	r25, Y+20	; 0x14
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	9c 8b       	std	Y+20, r25	; 0x14
     d32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d34:	8b 89       	ldd	r24, Y+19	; 0x13
     d36:	9c 89       	ldd	r25, Y+20	; 0x14
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	69 f7       	brne	.-38     	; 0xd16 <CreatingSystemPassword+0x1d0>
     d3c:	14 c0       	rjmp	.+40     	; 0xd66 <CreatingSystemPassword+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d3e:	6d 89       	ldd	r22, Y+21	; 0x15
     d40:	7e 89       	ldd	r23, Y+22	; 0x16
     d42:	8f 89       	ldd	r24, Y+23	; 0x17
     d44:	98 8d       	ldd	r25, Y+24	; 0x18
     d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	9c 8b       	std	Y+20, r25	; 0x14
     d50:	8b 8b       	std	Y+19, r24	; 0x13
     d52:	8b 89       	ldd	r24, Y+19	; 0x13
     d54:	9c 89       	ldd	r25, Y+20	; 0x14
     d56:	98 8b       	std	Y+16, r25	; 0x10
     d58:	8f 87       	std	Y+15, r24	; 0x0f
     d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5c:	98 89       	ldd	r25, Y+16	; 0x10
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CreatingSystemPassword+0x218>
     d62:	98 8b       	std	Y+16, r25	; 0x10
     d64:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 passwordCheck[5] = { '*', '*', '*', '*', '*' };
	key = 0;
	LCD_displayString("Enter NEW Pass:");
	LCD_moveCursor(1, 0);
	/*while loop to fill the first password entry array*/
	while (key != '=') {
     d66:	80 91 13 01 	lds	r24, 0x0113
     d6a:	8d 33       	cpi	r24, 0x3D	; 61
     d6c:	09 f0       	breq	.+2      	; 0xd70 <CreatingSystemPassword+0x22a>
     d6e:	40 cf       	rjmp	.-384    	; 0xbf0 <CreatingSystemPassword+0xaa>
			password[4] = key;
			LCD_displayCharacter('*');
		}
		_delay_ms(200);
	}/*sending the first password array to the Control ECU*/
	USART_sendByte(SEND_PASSWORD);
     d70:	81 e2       	ldi	r24, 0x21	; 33
     d72:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
	for (int i = 0; i < 5; i++) {
     d76:	18 a2       	std	Y+32, r1	; 0x20
     d78:	1f 8e       	std	Y+31, r1	; 0x1f
     d7a:	0f c0       	rjmp	.+30     	; 0xd9a <CreatingSystemPassword+0x254>
		USART_sendByte(password[i]);
     d7c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     d7e:	38 a1       	ldd	r19, Y+32	; 0x20
     d80:	ce 01       	movw	r24, r28
     d82:	81 96       	adiw	r24, 0x21	; 33
     d84:	fc 01       	movw	r30, r24
     d86:	e2 0f       	add	r30, r18
     d88:	f3 1f       	adc	r31, r19
     d8a:	80 81       	ld	r24, Z
     d8c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
			LCD_displayCharacter('*');
		}
		_delay_ms(200);
	}/*sending the first password array to the Control ECU*/
	USART_sendByte(SEND_PASSWORD);
	for (int i = 0; i < 5; i++) {
     d90:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d92:	98 a1       	ldd	r25, Y+32	; 0x20
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	98 a3       	std	Y+32, r25	; 0x20
     d98:	8f 8f       	std	Y+31, r24	; 0x1f
     d9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d9c:	98 a1       	ldd	r25, Y+32	; 0x20
     d9e:	85 30       	cpi	r24, 0x05	; 5
     da0:	91 05       	cpc	r25, r1
     da2:	64 f3       	brlt	.-40     	; 0xd7c <CreatingSystemPassword+0x236>
		USART_sendByte(password[i]);
	}
	LCD_clearScreen();
     da4:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	key = 0;
     da8:	10 92 13 01 	sts	0x0113, r1
	LCD_displayString("Re-Enter the");
     dac:	80 e7       	ldi	r24, 0x70	; 112
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	LCD_moveCursor(1, 0);
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_moveCursor>
	LCD_displayString("same pass:");
     dbc:	8d e7       	ldi	r24, 0x7D	; 125
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
     dc4:	bb c0       	rjmp	.+374    	; 0xf3c <CreatingSystemPassword+0x3f6>
	/*while loop to fill the second password entry array*/
	while (key != '=') {
		key = KEYPAD_getPressedKey();
     dc6:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <KEYPAD_getPressedKey>
     dca:	80 93 13 01 	sts	0x0113, r24
		if ((key >= 0 && key < 10) && (passwordCheck[0] == '*')) {
     dce:	80 91 13 01 	lds	r24, 0x0113
     dd2:	8a 30       	cpi	r24, 0x0A	; 10
     dd4:	50 f4       	brcc	.+20     	; 0xdea <CreatingSystemPassword+0x2a4>
     dd6:	8e a1       	ldd	r24, Y+38	; 0x26
     dd8:	8a 32       	cpi	r24, 0x2A	; 42
     dda:	39 f4       	brne	.+14     	; 0xdea <CreatingSystemPassword+0x2a4>
			passwordCheck[0] = key;
     ddc:	80 91 13 01 	lds	r24, 0x0113
     de0:	8e a3       	std	Y+38, r24	; 0x26
			LCD_displayCharacter('*');
     de2:	8a e2       	ldi	r24, 0x2A	; 42
     de4:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <CreatingSystemPassword+0x312>
		} else if ((key >= 0 && key < 10) && (passwordCheck[1] == '*')) {
     dea:	80 91 13 01 	lds	r24, 0x0113
     dee:	8a 30       	cpi	r24, 0x0A	; 10
     df0:	50 f4       	brcc	.+20     	; 0xe06 <CreatingSystemPassword+0x2c0>
     df2:	8f a1       	ldd	r24, Y+39	; 0x27
     df4:	8a 32       	cpi	r24, 0x2A	; 42
     df6:	39 f4       	brne	.+14     	; 0xe06 <CreatingSystemPassword+0x2c0>
			passwordCheck[1] = key;
     df8:	80 91 13 01 	lds	r24, 0x0113
     dfc:	8f a3       	std	Y+39, r24	; 0x27
			LCD_displayCharacter('*');
     dfe:	8a e2       	ldi	r24, 0x2A	; 42
     e00:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
     e04:	29 c0       	rjmp	.+82     	; 0xe58 <CreatingSystemPassword+0x312>
		} else if ((key >= 0 && key < 10) && (passwordCheck[2] == '*')) {
     e06:	80 91 13 01 	lds	r24, 0x0113
     e0a:	8a 30       	cpi	r24, 0x0A	; 10
     e0c:	50 f4       	brcc	.+20     	; 0xe22 <CreatingSystemPassword+0x2dc>
     e0e:	88 a5       	ldd	r24, Y+40	; 0x28
     e10:	8a 32       	cpi	r24, 0x2A	; 42
     e12:	39 f4       	brne	.+14     	; 0xe22 <CreatingSystemPassword+0x2dc>
			passwordCheck[2] = key;
     e14:	80 91 13 01 	lds	r24, 0x0113
     e18:	88 a7       	std	Y+40, r24	; 0x28
			LCD_displayCharacter('*');
     e1a:	8a e2       	ldi	r24, 0x2A	; 42
     e1c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
     e20:	1b c0       	rjmp	.+54     	; 0xe58 <CreatingSystemPassword+0x312>
		} else if ((key >= 0 && key < 10) && (passwordCheck[3] == '*')) {
     e22:	80 91 13 01 	lds	r24, 0x0113
     e26:	8a 30       	cpi	r24, 0x0A	; 10
     e28:	50 f4       	brcc	.+20     	; 0xe3e <CreatingSystemPassword+0x2f8>
     e2a:	89 a5       	ldd	r24, Y+41	; 0x29
     e2c:	8a 32       	cpi	r24, 0x2A	; 42
     e2e:	39 f4       	brne	.+14     	; 0xe3e <CreatingSystemPassword+0x2f8>
			passwordCheck[3] = key;
     e30:	80 91 13 01 	lds	r24, 0x0113
     e34:	89 a7       	std	Y+41, r24	; 0x29
			LCD_displayCharacter('*');
     e36:	8a e2       	ldi	r24, 0x2A	; 42
     e38:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
     e3c:	0d c0       	rjmp	.+26     	; 0xe58 <CreatingSystemPassword+0x312>
		} else if ((key >= 0 && key < 10) && (passwordCheck[4] == '*')) {
     e3e:	80 91 13 01 	lds	r24, 0x0113
     e42:	8a 30       	cpi	r24, 0x0A	; 10
     e44:	48 f4       	brcc	.+18     	; 0xe58 <CreatingSystemPassword+0x312>
     e46:	8a a5       	ldd	r24, Y+42	; 0x2a
     e48:	8a 32       	cpi	r24, 0x2A	; 42
     e4a:	31 f4       	brne	.+12     	; 0xe58 <CreatingSystemPassword+0x312>
			passwordCheck[4] = key;
     e4c:	80 91 13 01 	lds	r24, 0x0113
     e50:	8a a7       	std	Y+42, r24	; 0x2a
			LCD_displayCharacter('*');
     e52:	8a e2       	ldi	r24, 0x2A	; 42
     e54:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	a8 e4       	ldi	r26, 0x48	; 72
     e5e:	b3 e4       	ldi	r27, 0x43	; 67
     e60:	8b 87       	std	Y+11, r24	; 0x0b
     e62:	9c 87       	std	Y+12, r25	; 0x0c
     e64:	ad 87       	std	Y+13, r26	; 0x0d
     e66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e68:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	4a ef       	ldi	r20, 0xFA	; 250
     e76:	54 e4       	ldi	r21, 0x44	; 68
     e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	8f 83       	std	Y+7, r24	; 0x07
     e82:	98 87       	std	Y+8, r25	; 0x08
     e84:	a9 87       	std	Y+9, r26	; 0x09
     e86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e88:	6f 81       	ldd	r22, Y+7	; 0x07
     e8a:	78 85       	ldd	r23, Y+8	; 0x08
     e8c:	89 85       	ldd	r24, Y+9	; 0x09
     e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e8       	ldi	r20, 0x80	; 128
     e96:	5f e3       	ldi	r21, 0x3F	; 63
     e98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e9c:	88 23       	and	r24, r24
     e9e:	2c f4       	brge	.+10     	; 0xeaa <CreatingSystemPassword+0x364>
		__ticks = 1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9e 83       	std	Y+6, r25	; 0x06
     ea6:	8d 83       	std	Y+5, r24	; 0x05
     ea8:	3f c0       	rjmp	.+126    	; 0xf28 <CreatingSystemPassword+0x3e2>
	else if (__tmp > 65535)
     eaa:	6f 81       	ldd	r22, Y+7	; 0x07
     eac:	78 85       	ldd	r23, Y+8	; 0x08
     eae:	89 85       	ldd	r24, Y+9	; 0x09
     eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	3f ef       	ldi	r19, 0xFF	; 255
     eb6:	4f e7       	ldi	r20, 0x7F	; 127
     eb8:	57 e4       	ldi	r21, 0x47	; 71
     eba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ebe:	18 16       	cp	r1, r24
     ec0:	4c f5       	brge	.+82     	; 0xf14 <CreatingSystemPassword+0x3ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e2       	ldi	r20, 0x20	; 32
     ed0:	51 e4       	ldi	r21, 0x41	; 65
     ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	bc 01       	movw	r22, r24
     edc:	cd 01       	movw	r24, r26
     ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
     eea:	0f c0       	rjmp	.+30     	; 0xf0a <CreatingSystemPassword+0x3c4>
     eec:	88 ec       	ldi	r24, 0xC8	; 200
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <CreatingSystemPassword+0x3b2>
     efc:	9c 83       	std	Y+4, r25	; 0x04
     efe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	9e 83       	std	Y+6, r25	; 0x06
     f08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	9e 81       	ldd	r25, Y+6	; 0x06
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	69 f7       	brne	.-38     	; 0xeec <CreatingSystemPassword+0x3a6>
     f12:	14 c0       	rjmp	.+40     	; 0xf3c <CreatingSystemPassword+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f14:	6f 81       	ldd	r22, Y+7	; 0x07
     f16:	78 85       	ldd	r23, Y+8	; 0x08
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	8d 83       	std	Y+5, r24	; 0x05
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <CreatingSystemPassword+0x3ee>
     f38:	9a 83       	std	Y+2, r25	; 0x02
     f3a:	89 83       	std	Y+1, r24	; 0x01
	key = 0;
	LCD_displayString("Re-Enter the");
	LCD_moveCursor(1, 0);
	LCD_displayString("same pass:");
	/*while loop to fill the second password entry array*/
	while (key != '=') {
     f3c:	80 91 13 01 	lds	r24, 0x0113
     f40:	8d 33       	cpi	r24, 0x3D	; 61
     f42:	09 f0       	breq	.+2      	; 0xf46 <CreatingSystemPassword+0x400>
     f44:	40 cf       	rjmp	.-384    	; 0xdc6 <CreatingSystemPassword+0x280>
			LCD_displayCharacter('*');
		}
		_delay_ms(200);
	}
	/*sending the second password array to the Control ECU*/
	USART_sendByte(SEND_CHECK);
     f46:	82 e2       	ldi	r24, 0x22	; 34
     f48:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
	for (int i = 0; i < 5; i++) {
     f4c:	1e 8e       	std	Y+30, r1	; 0x1e
     f4e:	1d 8e       	std	Y+29, r1	; 0x1d
     f50:	0f c0       	rjmp	.+30     	; 0xf70 <CreatingSystemPassword+0x42a>
		USART_sendByte(passwordCheck[i]);
     f52:	2d 8d       	ldd	r18, Y+29	; 0x1d
     f54:	3e 8d       	ldd	r19, Y+30	; 0x1e
     f56:	ce 01       	movw	r24, r28
     f58:	86 96       	adiw	r24, 0x26	; 38
     f5a:	fc 01       	movw	r30, r24
     f5c:	e2 0f       	add	r30, r18
     f5e:	f3 1f       	adc	r31, r19
     f60:	80 81       	ld	r24, Z
     f62:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
		}
		_delay_ms(200);
	}
	/*sending the second password array to the Control ECU*/
	USART_sendByte(SEND_CHECK);
	for (int i = 0; i < 5; i++) {
     f66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f68:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	9e 8f       	std	Y+30, r25	; 0x1e
     f6e:	8d 8f       	std	Y+29, r24	; 0x1d
     f70:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f72:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f74:	85 30       	cpi	r24, 0x05	; 5
     f76:	91 05       	cpc	r25, r1
     f78:	64 f3       	brlt	.-40     	; 0xf52 <CreatingSystemPassword+0x40c>
		USART_sendByte(passwordCheck[i]);
	}

}
     f7a:	e4 96       	adiw	r28, 0x34	; 52
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <EnteringPassword>:
/*Description : Function for Entering the saved password and sending it to the Control ECU*/
uint8 EnteringPassword(void) {
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	6b 97       	sbiw	r28, 0x1b	; 27
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
	key = 0;
     fa0:	10 92 13 01 	sts	0x0113, r1
	/*Array to store the password*/
	uint8 password[5] = { '@', '@', '@', '@', '@' };
     fa4:	ce 01       	movw	r24, r28
     fa6:	42 96       	adiw	r24, 0x12	; 18
     fa8:	98 8f       	std	Y+24, r25	; 0x18
     faa:	8f 8b       	std	Y+23, r24	; 0x17
     fac:	e5 e0       	ldi	r30, 0x05	; 5
     fae:	f1 e0       	ldi	r31, 0x01	; 1
     fb0:	fa 8f       	std	Y+26, r31	; 0x1a
     fb2:	e9 8f       	std	Y+25, r30	; 0x19
     fb4:	f5 e0       	ldi	r31, 0x05	; 5
     fb6:	fb 8f       	std	Y+27, r31	; 0x1b
     fb8:	e9 8d       	ldd	r30, Y+25	; 0x19
     fba:	fa 8d       	ldd	r31, Y+26	; 0x1a
     fbc:	00 80       	ld	r0, Z
     fbe:	89 8d       	ldd	r24, Y+25	; 0x19
     fc0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	9a 8f       	std	Y+26, r25	; 0x1a
     fc6:	89 8f       	std	Y+25, r24	; 0x19
     fc8:	ef 89       	ldd	r30, Y+23	; 0x17
     fca:	f8 8d       	ldd	r31, Y+24	; 0x18
     fcc:	00 82       	st	Z, r0
     fce:	8f 89       	ldd	r24, Y+23	; 0x17
     fd0:	98 8d       	ldd	r25, Y+24	; 0x18
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	98 8f       	std	Y+24, r25	; 0x18
     fd6:	8f 8b       	std	Y+23, r24	; 0x17
     fd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fda:	91 50       	subi	r25, 0x01	; 1
     fdc:	9b 8f       	std	Y+27, r25	; 0x1b
     fde:	eb 8d       	ldd	r30, Y+27	; 0x1b
     fe0:	ee 23       	and	r30, r30
     fe2:	51 f7       	brne	.-44     	; 0xfb8 <EnteringPassword+0x2c>
	uint8 status;
	LCD_clearScreen();
     fe4:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	LCD_displayString("Plz Enter Pass:");
     fe8:	88 e8       	ldi	r24, 0x88	; 136
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	LCD_moveCursor(1, 0);
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_moveCursor>
     ff8:	bb c0       	rjmp	.+374    	; 0x1170 <EnteringPassword+0x1e4>
	/*while loop to fill password entry array*/
	while (key != '=') {
		key = KEYPAD_getPressedKey();
     ffa:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <KEYPAD_getPressedKey>
     ffe:	80 93 13 01 	sts	0x0113, r24
		if ((key >= 0 && key < 10) && (password[0] == '@')) {
    1002:	80 91 13 01 	lds	r24, 0x0113
    1006:	8a 30       	cpi	r24, 0x0A	; 10
    1008:	50 f4       	brcc	.+20     	; 0x101e <EnteringPassword+0x92>
    100a:	8a 89       	ldd	r24, Y+18	; 0x12
    100c:	80 34       	cpi	r24, 0x40	; 64
    100e:	39 f4       	brne	.+14     	; 0x101e <EnteringPassword+0x92>
			password[0] = key;
    1010:	80 91 13 01 	lds	r24, 0x0113
    1014:	8a 8b       	std	Y+18, r24	; 0x12
			LCD_displayCharacter('*');
    1016:	8a e2       	ldi	r24, 0x2A	; 42
    1018:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
    101c:	37 c0       	rjmp	.+110    	; 0x108c <EnteringPassword+0x100>
		} else if ((key >= 0 && key < 10) && (password[1] == '@')) {
    101e:	80 91 13 01 	lds	r24, 0x0113
    1022:	8a 30       	cpi	r24, 0x0A	; 10
    1024:	50 f4       	brcc	.+20     	; 0x103a <EnteringPassword+0xae>
    1026:	8b 89       	ldd	r24, Y+19	; 0x13
    1028:	80 34       	cpi	r24, 0x40	; 64
    102a:	39 f4       	brne	.+14     	; 0x103a <EnteringPassword+0xae>
			password[1] = key;
    102c:	80 91 13 01 	lds	r24, 0x0113
    1030:	8b 8b       	std	Y+19, r24	; 0x13
			LCD_displayCharacter('*');
    1032:	8a e2       	ldi	r24, 0x2A	; 42
    1034:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
    1038:	29 c0       	rjmp	.+82     	; 0x108c <EnteringPassword+0x100>
		} else if ((key >= 0 && key < 10) && (password[2] == '@')) {
    103a:	80 91 13 01 	lds	r24, 0x0113
    103e:	8a 30       	cpi	r24, 0x0A	; 10
    1040:	50 f4       	brcc	.+20     	; 0x1056 <EnteringPassword+0xca>
    1042:	8c 89       	ldd	r24, Y+20	; 0x14
    1044:	80 34       	cpi	r24, 0x40	; 64
    1046:	39 f4       	brne	.+14     	; 0x1056 <EnteringPassword+0xca>
			password[2] = key;
    1048:	80 91 13 01 	lds	r24, 0x0113
    104c:	8c 8b       	std	Y+20, r24	; 0x14
			LCD_displayCharacter('*');
    104e:	8a e2       	ldi	r24, 0x2A	; 42
    1050:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
    1054:	1b c0       	rjmp	.+54     	; 0x108c <EnteringPassword+0x100>
		} else if ((key >= 0 && key < 10) && (password[3] == '@')) {
    1056:	80 91 13 01 	lds	r24, 0x0113
    105a:	8a 30       	cpi	r24, 0x0A	; 10
    105c:	50 f4       	brcc	.+20     	; 0x1072 <EnteringPassword+0xe6>
    105e:	8d 89       	ldd	r24, Y+21	; 0x15
    1060:	80 34       	cpi	r24, 0x40	; 64
    1062:	39 f4       	brne	.+14     	; 0x1072 <EnteringPassword+0xe6>
			password[3] = key;
    1064:	80 91 13 01 	lds	r24, 0x0113
    1068:	8d 8b       	std	Y+21, r24	; 0x15
			LCD_displayCharacter('*');
    106a:	8a e2       	ldi	r24, 0x2A	; 42
    106c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
    1070:	0d c0       	rjmp	.+26     	; 0x108c <EnteringPassword+0x100>
		} else if ((key >= 0 && key < 10) && (password[4] == '@')) {
    1072:	80 91 13 01 	lds	r24, 0x0113
    1076:	8a 30       	cpi	r24, 0x0A	; 10
    1078:	48 f4       	brcc	.+18     	; 0x108c <EnteringPassword+0x100>
    107a:	8e 89       	ldd	r24, Y+22	; 0x16
    107c:	80 34       	cpi	r24, 0x40	; 64
    107e:	31 f4       	brne	.+12     	; 0x108c <EnteringPassword+0x100>
			password[4] = key;
    1080:	80 91 13 01 	lds	r24, 0x0113
    1084:	8e 8b       	std	Y+22, r24	; 0x16
			LCD_displayCharacter('*');
    1086:	8a e2       	ldi	r24, 0x2A	; 42
    1088:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a6 e9       	ldi	r26, 0x96	; 150
    1092:	b3 e4       	ldi	r27, 0x43	; 67
    1094:	8b 87       	std	Y+11, r24	; 0x0b
    1096:	9c 87       	std	Y+12, r25	; 0x0c
    1098:	ad 87       	std	Y+13, r26	; 0x0d
    109a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    109c:	6b 85       	ldd	r22, Y+11	; 0x0b
    109e:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	4a ef       	ldi	r20, 0xFA	; 250
    10aa:	54 e4       	ldi	r21, 0x44	; 68
    10ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	8f 83       	std	Y+7, r24	; 0x07
    10b6:	98 87       	std	Y+8, r25	; 0x08
    10b8:	a9 87       	std	Y+9, r26	; 0x09
    10ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10bc:	6f 81       	ldd	r22, Y+7	; 0x07
    10be:	78 85       	ldd	r23, Y+8	; 0x08
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e8       	ldi	r20, 0x80	; 128
    10ca:	5f e3       	ldi	r21, 0x3F	; 63
    10cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d0:	88 23       	and	r24, r24
    10d2:	2c f4       	brge	.+10     	; 0x10de <EnteringPassword+0x152>
		__ticks = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9e 83       	std	Y+6, r25	; 0x06
    10da:	8d 83       	std	Y+5, r24	; 0x05
    10dc:	3f c0       	rjmp	.+126    	; 0x115c <EnteringPassword+0x1d0>
	else if (__tmp > 65535)
    10de:	6f 81       	ldd	r22, Y+7	; 0x07
    10e0:	78 85       	ldd	r23, Y+8	; 0x08
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	3f ef       	ldi	r19, 0xFF	; 255
    10ea:	4f e7       	ldi	r20, 0x7F	; 127
    10ec:	57 e4       	ldi	r21, 0x47	; 71
    10ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f2:	18 16       	cp	r1, r24
    10f4:	4c f5       	brge	.+82     	; 0x1148 <EnteringPassword+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e2       	ldi	r20, 0x20	; 32
    1104:	51 e4       	ldi	r21, 0x41	; 65
    1106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9e 83       	std	Y+6, r25	; 0x06
    111c:	8d 83       	std	Y+5, r24	; 0x05
    111e:	0f c0       	rjmp	.+30     	; 0x113e <EnteringPassword+0x1b2>
    1120:	88 ec       	ldi	r24, 0xC8	; 200
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	9c 83       	std	Y+4, r25	; 0x04
    1126:	8b 83       	std	Y+3, r24	; 0x03
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9c 81       	ldd	r25, Y+4	; 0x04
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <EnteringPassword+0x1a0>
    1130:	9c 83       	std	Y+4, r25	; 0x04
    1132:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	9e 83       	std	Y+6, r25	; 0x06
    113c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	69 f7       	brne	.-38     	; 0x1120 <EnteringPassword+0x194>
    1146:	14 c0       	rjmp	.+40     	; 0x1170 <EnteringPassword+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1148:	6f 81       	ldd	r22, Y+7	; 0x07
    114a:	78 85       	ldd	r23, Y+8	; 0x08
    114c:	89 85       	ldd	r24, Y+9	; 0x09
    114e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	9e 83       	std	Y+6, r25	; 0x06
    115a:	8d 83       	std	Y+5, r24	; 0x05
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	9a 83       	std	Y+2, r25	; 0x02
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <EnteringPassword+0x1dc>
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
	uint8 status;
	LCD_clearScreen();
	LCD_displayString("Plz Enter Pass:");
	LCD_moveCursor(1, 0);
	/*while loop to fill password entry array*/
	while (key != '=') {
    1170:	80 91 13 01 	lds	r24, 0x0113
    1174:	8d 33       	cpi	r24, 0x3D	; 61
    1176:	09 f0       	breq	.+2      	; 0x117a <EnteringPassword+0x1ee>
    1178:	40 cf       	rjmp	.-384    	; 0xffa <EnteringPassword+0x6e>
			LCD_displayCharacter('*');
		}
		_delay_ms(300);
	}
	/*sending the first password array to the Control ECU*/
	USART_sendByte(SEND_PASSWORD);
    117a:	81 e2       	ldi	r24, 0x21	; 33
    117c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
	for (int i = 0; i < 5; i++) {
    1180:	18 8a       	std	Y+16, r1	; 0x10
    1182:	1f 86       	std	Y+15, r1	; 0x0f
    1184:	0f c0       	rjmp	.+30     	; 0x11a4 <EnteringPassword+0x218>
		USART_sendByte(password[i]);
    1186:	2f 85       	ldd	r18, Y+15	; 0x0f
    1188:	38 89       	ldd	r19, Y+16	; 0x10
    118a:	ce 01       	movw	r24, r28
    118c:	42 96       	adiw	r24, 0x12	; 18
    118e:	fc 01       	movw	r30, r24
    1190:	e2 0f       	add	r30, r18
    1192:	f3 1f       	adc	r31, r19
    1194:	80 81       	ld	r24, Z
    1196:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
		}
		_delay_ms(300);
	}
	/*sending the first password array to the Control ECU*/
	USART_sendByte(SEND_PASSWORD);
	for (int i = 0; i < 5; i++) {
    119a:	8f 85       	ldd	r24, Y+15	; 0x0f
    119c:	98 89       	ldd	r25, Y+16	; 0x10
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	98 8b       	std	Y+16, r25	; 0x10
    11a2:	8f 87       	std	Y+15, r24	; 0x0f
    11a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a6:	98 89       	ldd	r25, Y+16	; 0x10
    11a8:	85 30       	cpi	r24, 0x05	; 5
    11aa:	91 05       	cpc	r25, r1
    11ac:	64 f3       	brlt	.-40     	; 0x1186 <EnteringPassword+0x1fa>
		USART_sendByte(password[i]);
	}
	/*Waiting for a response to make sure they are Synched*/
	while (USART_recieveByte() != READY) {}
    11ae:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    11b2:	81 31       	cpi	r24, 0x11	; 17
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <EnteringPassword+0x222>
	/*Receiving the status from the Control ECU if the password matches the saved password or not*/
	status = USART_recieveByte();
    11b6:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    11ba:	89 8b       	std	Y+17, r24	; 0x11
	return status;
    11bc:	89 89       	ldd	r24, Y+17	; 0x11
}
    11be:	6b 96       	adiw	r28, 0x1b	; 27
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <OpeningDoorOption>:
/* Description : Function displaying status for the open door option*/
void OpeningDoorOption(void) {
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
	/*Send READY to the Control ECU and Waiting for a response to make sure they are Synched*/
	USART_sendByte(READY);
    11d8:	81 e1       	ldi	r24, 0x11	; 17
    11da:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
	LCD_clearScreen();
    11de:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	LCD_displayString("DOOR UNLOCKING");
    11e2:	88 e9       	ldi	r24, 0x98	; 152
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	while (USART_recieveByte() != DOOR_OPENED) {}
    11ea:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    11ee:	87 31       	cpi	r24, 0x17	; 23
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <OpeningDoorOption+0x1a>
	/*Waiting for a response to make sure they are Synched*/
	LCD_clearScreen();
    11f2:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	LCD_displayString("DOOR OPEN");
    11f6:	87 ea       	ldi	r24, 0xA7	; 167
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	while (USART_recieveByte() != HOLD) {}
    11fe:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    1202:	86 31       	cpi	r24, 0x16	; 22
    1204:	e1 f7       	brne	.-8      	; 0x11fe <OpeningDoorOption+0x2e>
	/*Waiting for a response to make sure they are Synched*/
	LCD_clearScreen();
    1206:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	LCD_displayString("DOOR LOCKING");
    120a:	81 eb       	ldi	r24, 0xB1	; 177
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	while (USART_recieveByte() != DOOR_CLOSED) {}
    1212:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    1216:	88 31       	cpi	r24, 0x18	; 24
    1218:	e1 f7       	brne	.-8      	; 0x1212 <OpeningDoorOption+0x42>
	LCD_clearScreen();
    121a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <ChangePassOption>:
/* Description : Function displaying status and takes input from user
 *  for change password option*/
void ChangePassOption(void) {
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	2e 97       	sbiw	r28, 0x0e	; 14
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
	/*Send READY to the Control ECU to make sure they are Synched*/
	USART_sendByte(READY);
    1238:	81 e1       	ldi	r24, 0x11	; 17
    123a:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
	/*Takes input Passwords and sends them to the Control ECU to check on them
	 * until the control responds that they match and displays that the password is created*/

	do {
		LCD_clearScreen();
    123e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
		CreatingSystemPassword();
    1242:	0e 94 a3 05 	call	0xb46	; 0xb46 <CreatingSystemPassword>
		while (USART_recieveByte() != READY) {
    1246:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    124a:	81 31       	cpi	r24, 0x11	; 17
    124c:	e1 f7       	brne	.-8      	; 0x1246 <ChangePassOption+0x22>
		}
		PasswordStatus = USART_recieveByte();
    124e:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    1252:	80 93 12 01 	sts	0x0112, r24
	} while (PasswordStatus != MATCHING);
    1256:	80 91 12 01 	lds	r24, 0x0112
    125a:	84 31       	cpi	r24, 0x14	; 20
    125c:	81 f7       	brne	.-32     	; 0x123e <ChangePassOption+0x1a>
	LCD_clearScreen();
    125e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	LCD_displayString("Password Created");
    1262:	8e eb       	ldi	r24, 0xBE	; 190
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	aa e7       	ldi	r26, 0x7A	; 122
    1270:	b4 e4       	ldi	r27, 0x44	; 68
    1272:	8b 87       	std	Y+11, r24	; 0x0b
    1274:	9c 87       	std	Y+12, r25	; 0x0c
    1276:	ad 87       	std	Y+13, r26	; 0x0d
    1278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127a:	6b 85       	ldd	r22, Y+11	; 0x0b
    127c:	7c 85       	ldd	r23, Y+12	; 0x0c
    127e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1280:	9e 85       	ldd	r25, Y+14	; 0x0e
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	4a ef       	ldi	r20, 0xFA	; 250
    1288:	54 e4       	ldi	r21, 0x44	; 68
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	8f 83       	std	Y+7, r24	; 0x07
    1294:	98 87       	std	Y+8, r25	; 0x08
    1296:	a9 87       	std	Y+9, r26	; 0x09
    1298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    129a:	6f 81       	ldd	r22, Y+7	; 0x07
    129c:	78 85       	ldd	r23, Y+8	; 0x08
    129e:	89 85       	ldd	r24, Y+9	; 0x09
    12a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e8       	ldi	r20, 0x80	; 128
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	2c f4       	brge	.+10     	; 0x12bc <ChangePassOption+0x98>
		__ticks = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9e 83       	std	Y+6, r25	; 0x06
    12b8:	8d 83       	std	Y+5, r24	; 0x05
    12ba:	3f c0       	rjmp	.+126    	; 0x133a <ChangePassOption+0x116>
	else if (__tmp > 65535)
    12bc:	6f 81       	ldd	r22, Y+7	; 0x07
    12be:	78 85       	ldd	r23, Y+8	; 0x08
    12c0:	89 85       	ldd	r24, Y+9	; 0x09
    12c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	57 e4       	ldi	r21, 0x47	; 71
    12cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	4c f5       	brge	.+82     	; 0x1326 <ChangePassOption+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12da:	9e 85       	ldd	r25, Y+14	; 0x0e
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9e 83       	std	Y+6, r25	; 0x06
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <ChangePassOption+0xf8>
    12fe:	88 ec       	ldi	r24, 0xC8	; 200
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9c 83       	std	Y+4, r25	; 0x04
    1304:	8b 83       	std	Y+3, r24	; 0x03
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <ChangePassOption+0xe6>
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	9e 83       	std	Y+6, r25	; 0x06
    131a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	69 f7       	brne	.-38     	; 0x12fe <ChangePassOption+0xda>
    1324:	14 c0       	rjmp	.+40     	; 0x134e <ChangePassOption+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1326:	6f 81       	ldd	r22, Y+7	; 0x07
    1328:	78 85       	ldd	r23, Y+8	; 0x08
    132a:	89 85       	ldd	r24, Y+9	; 0x09
    132c:	9a 85       	ldd	r25, Y+10	; 0x0a
    132e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	9a 83       	std	Y+2, r25	; 0x02
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <ChangePassOption+0x122>
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
    134e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
}
    1352:	2e 96       	adiw	r28, 0x0e	; 14
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <WrongPasswordEntry>:
void WrongPasswordEntry(void (*func_ptr)(void)) {
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <WrongPasswordEntry+0x6>
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	9b 83       	std	Y+3, r25	; 0x03
    1372:	8a 83       	std	Y+2, r24	; 0x02
	/*Variable to count the times for password entry*/
	uint8 count = 0;
    1374:	19 82       	std	Y+1, r1	; 0x01
	/*sends the input password to Control ECU to check if it matches the saved password
	 *  maximum 2 times and if it matches before this it exits the loop
	 *  and calls the selected option function if not it displays ERROR*/
	do {
		LCD_clearScreen();
    1376:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
		PasswordStatus = EnteringPassword();
    137a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <EnteringPassword>
    137e:	80 93 12 01 	sts	0x0112, r24
		count++;
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	89 83       	std	Y+1, r24	; 0x01
	} while ( (count < 2) && (PasswordStatus != MATCHING) );
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	20 f4       	brcc	.+8      	; 0x1396 <WrongPasswordEntry+0x32>
    138e:	80 91 12 01 	lds	r24, 0x0112
    1392:	84 31       	cpi	r24, 0x14	; 20
    1394:	81 f7       	brne	.-32     	; 0x1376 <WrongPasswordEntry+0x12>
	LCD_clearScreen();
    1396:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	if (count == 2 && (PasswordStatus != MATCHING) ) {
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	82 30       	cpi	r24, 0x02	; 2
    139e:	91 f4       	brne	.+36     	; 0x13c4 <WrongPasswordEntry+0x60>
    13a0:	80 91 12 01 	lds	r24, 0x0112
    13a4:	84 31       	cpi	r24, 0x14	; 20
    13a6:	71 f0       	breq	.+28     	; 0x13c4 <WrongPasswordEntry+0x60>
		/*displaying ERROR*/
		LCD_displayString("ERROR");
    13a8:	8f ec       	ldi	r24, 0xCF	; 207
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
		USART_sendByte(BUZZER_ON);
    13b0:	83 e2       	ldi	r24, 0x23	; 35
    13b2:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
		/*Waiting for the Control ECU to turn off buzzer so the system goes to normal state*/
		while (USART_recieveByte() != BUZZER_OFF) {}
    13b6:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    13ba:	84 32       	cpi	r24, 0x24	; 36
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <WrongPasswordEntry+0x52>
		LCD_clearScreen();
    13be:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <WrongPasswordEntry+0x6e>
	} else if (PasswordStatus == MATCHING) {
    13c4:	80 91 12 01 	lds	r24, 0x0112
    13c8:	84 31       	cpi	r24, 0x14	; 20
    13ca:	19 f4       	brne	.+6      	; 0x13d2 <WrongPasswordEntry+0x6e>
		/*Calling the selected option function*/
		func_ptr();
    13cc:	ea 81       	ldd	r30, Y+2	; 0x02
    13ce:	fb 81       	ldd	r31, Y+3	; 0x03
    13d0:	09 95       	icall
	}
}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <MainOptions>:

/* Description : Function that displays the menu options */
void MainOptions(void) {
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	60 97       	sbiw	r28, 0x10	; 16
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
	key = 0;
    13f2:	10 92 13 01 	sts	0x0113, r1
	PasswordStatus = 0;
    13f6:	10 92 12 01 	sts	0x0112, r1
	LCD_displayString("+ : Open Door");
    13fa:	85 ed       	ldi	r24, 0xD5	; 213
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	LCD_moveCursor(1, 0);
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    140a:	83 ee       	ldi	r24, 0xE3	; 227
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
    1412:	76 c0       	rjmp	.+236    	; 0x1500 <MainOptions+0x122>
	/*taking input from user for the selected option*/
	while ((key != OPEN_DOOR_OPTION) && (key != CHANGE_PASSWORD_OPTION)) {
		key = KEYPAD_getPressedKey();
    1414:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <KEYPAD_getPressedKey>
    1418:	80 93 13 01 	sts	0x0113, r24
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a6 e9       	ldi	r26, 0x96	; 150
    1422:	b3 e4       	ldi	r27, 0x43	; 67
    1424:	8b 87       	std	Y+11, r24	; 0x0b
    1426:	9c 87       	std	Y+12, r25	; 0x0c
    1428:	ad 87       	std	Y+13, r26	; 0x0d
    142a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142c:	6b 85       	ldd	r22, Y+11	; 0x0b
    142e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1430:	8d 85       	ldd	r24, Y+13	; 0x0d
    1432:	9e 85       	ldd	r25, Y+14	; 0x0e
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a ef       	ldi	r20, 0xFA	; 250
    143a:	54 e4       	ldi	r21, 0x44	; 68
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	8f 83       	std	Y+7, r24	; 0x07
    1446:	98 87       	std	Y+8, r25	; 0x08
    1448:	a9 87       	std	Y+9, r26	; 0x09
    144a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    144c:	6f 81       	ldd	r22, Y+7	; 0x07
    144e:	78 85       	ldd	r23, Y+8	; 0x08
    1450:	89 85       	ldd	r24, Y+9	; 0x09
    1452:	9a 85       	ldd	r25, Y+10	; 0x0a
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e8       	ldi	r20, 0x80	; 128
    145a:	5f e3       	ldi	r21, 0x3F	; 63
    145c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1460:	88 23       	and	r24, r24
    1462:	2c f4       	brge	.+10     	; 0x146e <MainOptions+0x90>
		__ticks = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9e 83       	std	Y+6, r25	; 0x06
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	3f c0       	rjmp	.+126    	; 0x14ec <MainOptions+0x10e>
	else if (__tmp > 65535)
    146e:	6f 81       	ldd	r22, Y+7	; 0x07
    1470:	78 85       	ldd	r23, Y+8	; 0x08
    1472:	89 85       	ldd	r24, Y+9	; 0x09
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	3f ef       	ldi	r19, 0xFF	; 255
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	57 e4       	ldi	r21, 0x47	; 71
    147e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1482:	18 16       	cp	r1, r24
    1484:	4c f5       	brge	.+82     	; 0x14d8 <MainOptions+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1486:	6b 85       	ldd	r22, Y+11	; 0x0b
    1488:	7c 85       	ldd	r23, Y+12	; 0x0c
    148a:	8d 85       	ldd	r24, Y+13	; 0x0d
    148c:	9e 85       	ldd	r25, Y+14	; 0x0e
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e2       	ldi	r20, 0x20	; 32
    1494:	51 e4       	ldi	r21, 0x41	; 65
    1496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 83       	std	Y+5, r24	; 0x05
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <MainOptions+0xf0>
    14b0:	88 ec       	ldi	r24, 0xC8	; 200
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9c 83       	std	Y+4, r25	; 0x04
    14b6:	8b 83       	std	Y+3, r24	; 0x03
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <MainOptions+0xde>
    14c0:	9c 83       	std	Y+4, r25	; 0x04
    14c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	69 f7       	brne	.-38     	; 0x14b0 <MainOptions+0xd2>
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <MainOptions+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d8:	6f 81       	ldd	r22, Y+7	; 0x07
    14da:	78 85       	ldd	r23, Y+8	; 0x08
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <MainOptions+0x11a>
    14fc:	9a 83       	std	Y+2, r25	; 0x02
    14fe:	89 83       	std	Y+1, r24	; 0x01
	PasswordStatus = 0;
	LCD_displayString("+ : Open Door");
	LCD_moveCursor(1, 0);
	LCD_displayString("- : Change Pass");
	/*taking input from user for the selected option*/
	while ((key != OPEN_DOOR_OPTION) && (key != CHANGE_PASSWORD_OPTION)) {
    1500:	80 91 13 01 	lds	r24, 0x0113
    1504:	8b 32       	cpi	r24, 0x2B	; 43
    1506:	29 f0       	breq	.+10     	; 0x1512 <MainOptions+0x134>
    1508:	80 91 13 01 	lds	r24, 0x0113
    150c:	8d 32       	cpi	r24, 0x2D	; 45
    150e:	09 f0       	breq	.+2      	; 0x1512 <MainOptions+0x134>
    1510:	81 cf       	rjmp	.-254    	; 0x1414 <MainOptions+0x36>
		key = KEYPAD_getPressedKey();
		_delay_ms(300);
	}
	/*Switches on the selected option by the user*/
	switch (key) {
    1512:	80 91 13 01 	lds	r24, 0x0113
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	38 8b       	std	Y+16, r19	; 0x10
    151c:	2f 87       	std	Y+15, r18	; 0x0f
    151e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1520:	98 89       	ldd	r25, Y+16	; 0x10
    1522:	8b 32       	cpi	r24, 0x2B	; 43
    1524:	91 05       	cpc	r25, r1
    1526:	31 f0       	breq	.+12     	; 0x1534 <MainOptions+0x156>
    1528:	2f 85       	ldd	r18, Y+15	; 0x0f
    152a:	38 89       	ldd	r19, Y+16	; 0x10
    152c:	2d 32       	cpi	r18, 0x2D	; 45
    152e:	31 05       	cpc	r19, r1
    1530:	d9 f0       	breq	.+54     	; 0x1568 <MainOptions+0x18a>
    1532:	33 c0       	rjmp	.+102    	; 0x159a <MainOptions+0x1bc>
	/*if the selected option is to OPEN DOOR checks sends to Control ECU
	 * that a command is selected and sends it too and asks the user for the system password
	 * if it matches calls the function to open door if not it calls the function responsible
	 * for wrong password entry*/
	case OPEN_DOOR_OPTION: {
		USART_sendByte(COMMAND);
    1534:	82 e1       	ldi	r24, 0x12	; 18
    1536:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
		USART_sendByte(OPEN_DOOR);
    153a:	85 e1       	ldi	r24, 0x15	; 21
    153c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
		PasswordStatus = EnteringPassword();
    1540:	0e 94 c6 07 	call	0xf8c	; 0xf8c <EnteringPassword>
    1544:	80 93 12 01 	sts	0x0112, r24
		if (PasswordStatus == MATCHING) {
    1548:	80 91 12 01 	lds	r24, 0x0112
    154c:	84 31       	cpi	r24, 0x14	; 20
    154e:	19 f4       	brne	.+6      	; 0x1556 <MainOptions+0x178>
			OpeningDoorOption();
    1550:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <OpeningDoorOption>
    1554:	22 c0       	rjmp	.+68     	; 0x159a <MainOptions+0x1bc>
		} else if (PasswordStatus == NOT_MATCHING) {
    1556:	80 91 12 01 	lds	r24, 0x0112
    155a:	83 31       	cpi	r24, 0x13	; 19
    155c:	f1 f4       	brne	.+60     	; 0x159a <MainOptions+0x1bc>
			WrongPasswordEntry(OpeningDoorOption);
    155e:	88 ee       	ldi	r24, 0xE8	; 232
    1560:	98 e0       	ldi	r25, 0x08	; 8
    1562:	0e 94 b2 09 	call	0x1364	; 0x1364 <WrongPasswordEntry>
    1566:	19 c0       	rjmp	.+50     	; 0x159a <MainOptions+0x1bc>
	/*if the selected option is to CHANGE PASSWORD checks sends to Control ECU
	 * that a command is selected and sends it too and asks the user for the system password
	 * if it matches calls the function to Change Password if not
	 * it calls the function responsible for wrong password entry*/
	case CHANGE_PASSWORD_OPTION: {
		USART_sendByte(COMMAND);
    1568:	82 e1       	ldi	r24, 0x12	; 18
    156a:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
		USART_sendByte(CHANGE_PASSWORD);
    156e:	89 e1       	ldi	r24, 0x19	; 25
    1570:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
		PasswordStatus = EnteringPassword();
    1574:	0e 94 c6 07 	call	0xf8c	; 0xf8c <EnteringPassword>
    1578:	80 93 12 01 	sts	0x0112, r24
		if (PasswordStatus == MATCHING) {
    157c:	80 91 12 01 	lds	r24, 0x0112
    1580:	84 31       	cpi	r24, 0x14	; 20
    1582:	19 f4       	brne	.+6      	; 0x158a <MainOptions+0x1ac>
			ChangePassOption();
    1584:	0e 94 12 09 	call	0x1224	; 0x1224 <ChangePassOption>
    1588:	08 c0       	rjmp	.+16     	; 0x159a <MainOptions+0x1bc>
		}else if(PasswordStatus == NOT_MATCHING){
    158a:	80 91 12 01 	lds	r24, 0x0112
    158e:	83 31       	cpi	r24, 0x13	; 19
    1590:	21 f4       	brne	.+8      	; 0x159a <MainOptions+0x1bc>
			WrongPasswordEntry(ChangePassOption);
    1592:	82 e1       	ldi	r24, 0x12	; 18
    1594:	99 e0       	ldi	r25, 0x09	; 9
    1596:	0e 94 b2 09 	call	0x1364	; 0x1364 <WrongPasswordEntry>
		}
		break;
	}
	}
	LCD_clearScreen();
    159a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
}
    159e:	60 96       	adiw	r28, 0x10	; 16
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <main>:

int main() {
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	69 97       	sbiw	r28, 0x19	; 25
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
		 * Mode:ASYNCHRONZIED
		 * Parity:DISABLED
		 * STOP_BIT: ONEBIT
		 * BIT-DATA: 8BITS
		 * BAUD RATE:9600*/
	USART_ConfigType Config_Ptr = { ASYNCH, DISABLED, ONEBIT, EIGHTBITS, 9600 };
    15c4:	ce 01       	movw	r24, r28
    15c6:	0f 96       	adiw	r24, 0x0f	; 15
    15c8:	9e 8b       	std	Y+22, r25	; 0x16
    15ca:	8d 8b       	std	Y+21, r24	; 0x15
    15cc:	ea e0       	ldi	r30, 0x0A	; 10
    15ce:	f1 e0       	ldi	r31, 0x01	; 1
    15d0:	f8 8f       	std	Y+24, r31	; 0x18
    15d2:	ef 8b       	std	Y+23, r30	; 0x17
    15d4:	f6 e0       	ldi	r31, 0x06	; 6
    15d6:	f9 8f       	std	Y+25, r31	; 0x19
    15d8:	ef 89       	ldd	r30, Y+23	; 0x17
    15da:	f8 8d       	ldd	r31, Y+24	; 0x18
    15dc:	00 80       	ld	r0, Z
    15de:	8f 89       	ldd	r24, Y+23	; 0x17
    15e0:	98 8d       	ldd	r25, Y+24	; 0x18
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	98 8f       	std	Y+24, r25	; 0x18
    15e6:	8f 8b       	std	Y+23, r24	; 0x17
    15e8:	ed 89       	ldd	r30, Y+21	; 0x15
    15ea:	fe 89       	ldd	r31, Y+22	; 0x16
    15ec:	00 82       	st	Z, r0
    15ee:	8d 89       	ldd	r24, Y+21	; 0x15
    15f0:	9e 89       	ldd	r25, Y+22	; 0x16
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	9e 8b       	std	Y+22, r25	; 0x16
    15f6:	8d 8b       	std	Y+21, r24	; 0x15
    15f8:	99 8d       	ldd	r25, Y+25	; 0x19
    15fa:	91 50       	subi	r25, 0x01	; 1
    15fc:	99 8f       	std	Y+25, r25	; 0x19
    15fe:	e9 8d       	ldd	r30, Y+25	; 0x19
    1600:	ee 23       	and	r30, r30
    1602:	51 f7       	brne	.-44     	; 0x15d8 <main+0x28>
	/*Initializing the USART*/
	USART_init(&Config_Ptr);
    1604:	ce 01       	movw	r24, r28
    1606:	0f 96       	adiw	r24, 0x0f	; 15
    1608:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <USART_init>
	/*Initializing the LCD*/
	LCD_init();
    160c:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_init>
	/*Send READY to the Control ECU and Waiting for a response to make sure they are Synched*/
	USART_sendByte(READY);
    1610:	81 e1       	ldi	r24, 0x11	; 17
    1612:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
	while (USART_recieveByte() != READY) {}
    1616:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    161a:	81 31       	cpi	r24, 0x11	; 17
    161c:	e1 f7       	brne	.-8      	; 0x1616 <main+0x66>
	/*Creating system password for first time*/
	do {
		LCD_clearScreen();
    161e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
		CreatingSystemPassword();
    1622:	0e 94 a3 05 	call	0xb46	; 0xb46 <CreatingSystemPassword>
		while (USART_recieveByte() != READY) {}
    1626:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    162a:	81 31       	cpi	r24, 0x11	; 17
    162c:	e1 f7       	brne	.-8      	; 0x1626 <main+0x76>
		PasswordStatus = USART_recieveByte();
    162e:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    1632:	80 93 12 01 	sts	0x0112, r24
	} while (PasswordStatus != MATCHING);
    1636:	80 91 12 01 	lds	r24, 0x0112
    163a:	84 31       	cpi	r24, 0x14	; 20
    163c:	81 f7       	brne	.-32     	; 0x161e <main+0x6e>
	LCD_clearScreen();
    163e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	LCD_displayString("Password Created");
    1642:	8e eb       	ldi	r24, 0xBE	; 190
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	aa e7       	ldi	r26, 0x7A	; 122
    1650:	b4 e4       	ldi	r27, 0x44	; 68
    1652:	8b 87       	std	Y+11, r24	; 0x0b
    1654:	9c 87       	std	Y+12, r25	; 0x0c
    1656:	ad 87       	std	Y+13, r26	; 0x0d
    1658:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165a:	6b 85       	ldd	r22, Y+11	; 0x0b
    165c:	7c 85       	ldd	r23, Y+12	; 0x0c
    165e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1660:	9e 85       	ldd	r25, Y+14	; 0x0e
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4a ef       	ldi	r20, 0xFA	; 250
    1668:	54 e4       	ldi	r21, 0x44	; 68
    166a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	8f 83       	std	Y+7, r24	; 0x07
    1674:	98 87       	std	Y+8, r25	; 0x08
    1676:	a9 87       	std	Y+9, r26	; 0x09
    1678:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    167a:	6f 81       	ldd	r22, Y+7	; 0x07
    167c:	78 85       	ldd	r23, Y+8	; 0x08
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	9a 85       	ldd	r25, Y+10	; 0x0a
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e8       	ldi	r20, 0x80	; 128
    1688:	5f e3       	ldi	r21, 0x3F	; 63
    168a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    168e:	88 23       	and	r24, r24
    1690:	2c f4       	brge	.+10     	; 0x169c <main+0xec>
		__ticks = 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
    169a:	3f c0       	rjmp	.+126    	; 0x171a <main+0x16a>
	else if (__tmp > 65535)
    169c:	6f 81       	ldd	r22, Y+7	; 0x07
    169e:	78 85       	ldd	r23, Y+8	; 0x08
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	3f ef       	ldi	r19, 0xFF	; 255
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	57 e4       	ldi	r21, 0x47	; 71
    16ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	4c f5       	brge	.+82     	; 0x1706 <main+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e2       	ldi	r20, 0x20	; 32
    16c2:	51 e4       	ldi	r21, 0x41	; 65
    16c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	8d 83       	std	Y+5, r24	; 0x05
    16dc:	0f c0       	rjmp	.+30     	; 0x16fc <main+0x14c>
    16de:	88 ec       	ldi	r24, 0xC8	; 200
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8b 83       	std	Y+3, r24	; 0x03
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <main+0x13a>
    16ee:	9c 83       	std	Y+4, r25	; 0x04
    16f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	69 f7       	brne	.-38     	; 0x16de <main+0x12e>
    1704:	14 c0       	rjmp	.+40     	; 0x172e <main+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1706:	6f 81       	ldd	r22, Y+7	; 0x07
    1708:	78 85       	ldd	r23, Y+8	; 0x08
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	9a 85       	ldd	r25, Y+10	; 0x0a
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <main+0x176>
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
    172e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	while (1) {
		/*Main Options Function so that LCD Always Displays the system option*/
		MainOptions();
    1732:	0e 94 ef 09 	call	0x13de	; 0x13de <MainOptions>
    1736:	fd cf       	rjmp	.-6      	; 0x1732 <main+0x182>

00001738 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <GPIO_setupPinDirection+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <GPIO_setupPinDirection+0x8>
    1740:	0f 92       	push	r0
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	6a 83       	std	Y+2, r22	; 0x02
    174a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	88 30       	cpi	r24, 0x08	; 8
    1750:	08 f0       	brcs	.+2      	; 0x1754 <GPIO_setupPinDirection+0x1c>
    1752:	d5 c0       	rjmp	.+426    	; 0x18fe <GPIO_setupPinDirection+0x1c6>
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	84 30       	cpi	r24, 0x04	; 4
    1758:	08 f0       	brcs	.+2      	; 0x175c <GPIO_setupPinDirection+0x24>
    175a:	d1 c0       	rjmp	.+418    	; 0x18fe <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	3d 83       	std	Y+5, r19	; 0x05
    1764:	2c 83       	std	Y+4, r18	; 0x04
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	91 05       	cpc	r25, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <GPIO_setupPinDirection+0x3a>
    1770:	43 c0       	rjmp	.+134    	; 0x17f8 <GPIO_setupPinDirection+0xc0>
    1772:	2c 81       	ldd	r18, Y+4	; 0x04
    1774:	3d 81       	ldd	r19, Y+5	; 0x05
    1776:	22 30       	cpi	r18, 0x02	; 2
    1778:	31 05       	cpc	r19, r1
    177a:	2c f4       	brge	.+10     	; 0x1786 <GPIO_setupPinDirection+0x4e>
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	9d 81       	ldd	r25, Y+5	; 0x05
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	71 f0       	breq	.+28     	; 0x17a0 <GPIO_setupPinDirection+0x68>
    1784:	bc c0       	rjmp	.+376    	; 0x18fe <GPIO_setupPinDirection+0x1c6>
    1786:	2c 81       	ldd	r18, Y+4	; 0x04
    1788:	3d 81       	ldd	r19, Y+5	; 0x05
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <GPIO_setupPinDirection+0x5a>
    1790:	5f c0       	rjmp	.+190    	; 0x1850 <GPIO_setupPinDirection+0x118>
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	83 30       	cpi	r24, 0x03	; 3
    1798:	91 05       	cpc	r25, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <GPIO_setupPinDirection+0x66>
    179c:	85 c0       	rjmp	.+266    	; 0x18a8 <GPIO_setupPinDirection+0x170>
    179e:	af c0       	rjmp	.+350    	; 0x18fe <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	a1 f4       	brne	.+40     	; 0x17ce <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17a6:	aa e3       	ldi	r26, 0x3A	; 58
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	ea e3       	ldi	r30, 0x3A	; 58
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <GPIO_setupPinDirection+0x8c>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <GPIO_setupPinDirection+0x88>
    17c8:	84 2b       	or	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	98 c0       	rjmp	.+304    	; 0x18fe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    17ce:	aa e3       	ldi	r26, 0x3A	; 58
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	ea e3       	ldi	r30, 0x3A	; 58
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <GPIO_setupPinDirection+0xb4>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <GPIO_setupPinDirection+0xb0>
    17f0:	80 95       	com	r24
    17f2:	84 23       	and	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	83 c0       	rjmp	.+262    	; 0x18fe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	a1 f4       	brne	.+40     	; 0x1826 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    17fe:	a7 e3       	ldi	r26, 0x37	; 55
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e7 e3       	ldi	r30, 0x37	; 55
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <GPIO_setupPinDirection+0xe4>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <GPIO_setupPinDirection+0xe0>
    1820:	84 2b       	or	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	6c c0       	rjmp	.+216    	; 0x18fe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1826:	a7 e3       	ldi	r26, 0x37	; 55
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e7 e3       	ldi	r30, 0x37	; 55
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	02 2e       	mov	r0, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <GPIO_setupPinDirection+0x10c>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <GPIO_setupPinDirection+0x108>
    1848:	80 95       	com	r24
    184a:	84 23       	and	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	57 c0       	rjmp	.+174    	; 0x18fe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	a1 f4       	brne	.+40     	; 0x187e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1856:	a4 e3       	ldi	r26, 0x34	; 52
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e4 e3       	ldi	r30, 0x34	; 52
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <GPIO_setupPinDirection+0x13c>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <GPIO_setupPinDirection+0x138>
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	40 c0       	rjmp	.+128    	; 0x18fe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    187e:	a4 e3       	ldi	r26, 0x34	; 52
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e4 e3       	ldi	r30, 0x34	; 52
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <GPIO_setupPinDirection+0x164>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <GPIO_setupPinDirection+0x160>
    18a0:	80 95       	com	r24
    18a2:	84 23       	and	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	2b c0       	rjmp	.+86     	; 0x18fe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	a1 f4       	brne	.+40     	; 0x18d6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    18ae:	a1 e3       	ldi	r26, 0x31	; 49
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e1 e3       	ldi	r30, 0x31	; 49
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <GPIO_setupPinDirection+0x194>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <GPIO_setupPinDirection+0x190>
    18d0:	84 2b       	or	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	14 c0       	rjmp	.+40     	; 0x18fe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    18d6:	a1 e3       	ldi	r26, 0x31	; 49
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e1 e3       	ldi	r30, 0x31	; 49
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <GPIO_setupPinDirection+0x1bc>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <GPIO_setupPinDirection+0x1b8>
    18f8:	80 95       	com	r24
    18fa:	84 23       	and	r24, r20
    18fc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	00 d0       	rcall	.+0      	; 0x1914 <GPIO_writePin+0x6>
    1914:	00 d0       	rcall	.+0      	; 0x1916 <GPIO_writePin+0x8>
    1916:	0f 92       	push	r0
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	6a 83       	std	Y+2, r22	; 0x02
    1920:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	88 30       	cpi	r24, 0x08	; 8
    1926:	08 f0       	brcs	.+2      	; 0x192a <GPIO_writePin+0x1c>
    1928:	d5 c0       	rjmp	.+426    	; 0x1ad4 <GPIO_writePin+0x1c6>
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	84 30       	cpi	r24, 0x04	; 4
    192e:	08 f0       	brcs	.+2      	; 0x1932 <GPIO_writePin+0x24>
    1930:	d1 c0       	rjmp	.+418    	; 0x1ad4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	3d 83       	std	Y+5, r19	; 0x05
    193a:	2c 83       	std	Y+4, r18	; 0x04
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	9d 81       	ldd	r25, Y+5	; 0x05
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	91 05       	cpc	r25, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <GPIO_writePin+0x3a>
    1946:	43 c0       	rjmp	.+134    	; 0x19ce <GPIO_writePin+0xc0>
    1948:	2c 81       	ldd	r18, Y+4	; 0x04
    194a:	3d 81       	ldd	r19, Y+5	; 0x05
    194c:	22 30       	cpi	r18, 0x02	; 2
    194e:	31 05       	cpc	r19, r1
    1950:	2c f4       	brge	.+10     	; 0x195c <GPIO_writePin+0x4e>
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	9d 81       	ldd	r25, Y+5	; 0x05
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	71 f0       	breq	.+28     	; 0x1976 <GPIO_writePin+0x68>
    195a:	bc c0       	rjmp	.+376    	; 0x1ad4 <GPIO_writePin+0x1c6>
    195c:	2c 81       	ldd	r18, Y+4	; 0x04
    195e:	3d 81       	ldd	r19, Y+5	; 0x05
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	09 f4       	brne	.+2      	; 0x1968 <GPIO_writePin+0x5a>
    1966:	5f c0       	rjmp	.+190    	; 0x1a26 <GPIO_writePin+0x118>
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	9d 81       	ldd	r25, Y+5	; 0x05
    196c:	83 30       	cpi	r24, 0x03	; 3
    196e:	91 05       	cpc	r25, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <GPIO_writePin+0x66>
    1972:	85 c0       	rjmp	.+266    	; 0x1a7e <GPIO_writePin+0x170>
    1974:	af c0       	rjmp	.+350    	; 0x1ad4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	a1 f4       	brne	.+40     	; 0x19a4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    197c:	ab e3       	ldi	r26, 0x3B	; 59
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	eb e3       	ldi	r30, 0x3B	; 59
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <GPIO_writePin+0x8c>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <GPIO_writePin+0x88>
    199e:	84 2b       	or	r24, r20
    19a0:	8c 93       	st	X, r24
    19a2:	98 c0       	rjmp	.+304    	; 0x1ad4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19a4:	ab e3       	ldi	r26, 0x3B	; 59
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	eb e3       	ldi	r30, 0x3B	; 59
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <GPIO_writePin+0xb4>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <GPIO_writePin+0xb0>
    19c6:	80 95       	com	r24
    19c8:	84 23       	and	r24, r20
    19ca:	8c 93       	st	X, r24
    19cc:	83 c0       	rjmp	.+262    	; 0x1ad4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	a1 f4       	brne	.+40     	; 0x19fc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    19d4:	a8 e3       	ldi	r26, 0x38	; 56
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e8 e3       	ldi	r30, 0x38	; 56
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <GPIO_writePin+0xe4>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <GPIO_writePin+0xe0>
    19f6:	84 2b       	or	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	6c c0       	rjmp	.+216    	; 0x1ad4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    19fc:	a8 e3       	ldi	r26, 0x38	; 56
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e8 e3       	ldi	r30, 0x38	; 56
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <GPIO_writePin+0x10c>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <GPIO_writePin+0x108>
    1a1e:	80 95       	com	r24
    1a20:	84 23       	and	r24, r20
    1a22:	8c 93       	st	X, r24
    1a24:	57 c0       	rjmp	.+174    	; 0x1ad4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	81 30       	cpi	r24, 0x01	; 1
    1a2a:	a1 f4       	brne	.+40     	; 0x1a54 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a2c:	a5 e3       	ldi	r26, 0x35	; 53
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e5 e3       	ldi	r30, 0x35	; 53
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <GPIO_writePin+0x13c>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <GPIO_writePin+0x138>
    1a4e:	84 2b       	or	r24, r20
    1a50:	8c 93       	st	X, r24
    1a52:	40 c0       	rjmp	.+128    	; 0x1ad4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a54:	a5 e3       	ldi	r26, 0x35	; 53
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e5 e3       	ldi	r30, 0x35	; 53
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <GPIO_writePin+0x164>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	0a 94       	dec	r0
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <GPIO_writePin+0x160>
    1a76:	80 95       	com	r24
    1a78:	84 23       	and	r24, r20
    1a7a:	8c 93       	st	X, r24
    1a7c:	2b c0       	rjmp	.+86     	; 0x1ad4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	a1 f4       	brne	.+40     	; 0x1aac <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1a84:	a2 e3       	ldi	r26, 0x32	; 50
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e2 e3       	ldi	r30, 0x32	; 50
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 2e       	mov	r0, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <GPIO_writePin+0x194>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	0a 94       	dec	r0
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <GPIO_writePin+0x190>
    1aa6:	84 2b       	or	r24, r20
    1aa8:	8c 93       	st	X, r24
    1aaa:	14 c0       	rjmp	.+40     	; 0x1ad4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1aac:	a2 e3       	ldi	r26, 0x32	; 50
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e2 e3       	ldi	r30, 0x32	; 50
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <GPIO_writePin+0x1bc>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <GPIO_writePin+0x1b8>
    1ace:	80 95       	com	r24
    1ad0:	84 23       	and	r24, r20
    1ad2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <GPIO_readPin+0x6>
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <GPIO_readPin+0x8>
    1aec:	0f 92       	push	r0
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	8a 83       	std	Y+2, r24	; 0x02
    1af4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1af6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	88 30       	cpi	r24, 0x08	; 8
    1afc:	08 f0       	brcs	.+2      	; 0x1b00 <GPIO_readPin+0x1c>
    1afe:	84 c0       	rjmp	.+264    	; 0x1c08 <GPIO_readPin+0x124>
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	84 30       	cpi	r24, 0x04	; 4
    1b04:	08 f0       	brcs	.+2      	; 0x1b08 <GPIO_readPin+0x24>
    1b06:	80 c0       	rjmp	.+256    	; 0x1c08 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	3d 83       	std	Y+5, r19	; 0x05
    1b10:	2c 83       	std	Y+4, r18	; 0x04
    1b12:	4c 81       	ldd	r20, Y+4	; 0x04
    1b14:	5d 81       	ldd	r21, Y+5	; 0x05
    1b16:	41 30       	cpi	r20, 0x01	; 1
    1b18:	51 05       	cpc	r21, r1
    1b1a:	79 f1       	breq	.+94     	; 0x1b7a <GPIO_readPin+0x96>
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b20:	82 30       	cpi	r24, 0x02	; 2
    1b22:	91 05       	cpc	r25, r1
    1b24:	34 f4       	brge	.+12     	; 0x1b32 <GPIO_readPin+0x4e>
    1b26:	2c 81       	ldd	r18, Y+4	; 0x04
    1b28:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2a:	21 15       	cp	r18, r1
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	69 f0       	breq	.+26     	; 0x1b4a <GPIO_readPin+0x66>
    1b30:	6b c0       	rjmp	.+214    	; 0x1c08 <GPIO_readPin+0x124>
    1b32:	4c 81       	ldd	r20, Y+4	; 0x04
    1b34:	5d 81       	ldd	r21, Y+5	; 0x05
    1b36:	42 30       	cpi	r20, 0x02	; 2
    1b38:	51 05       	cpc	r21, r1
    1b3a:	b9 f1       	breq	.+110    	; 0x1baa <GPIO_readPin+0xc6>
    1b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b40:	83 30       	cpi	r24, 0x03	; 3
    1b42:	91 05       	cpc	r25, r1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <GPIO_readPin+0x64>
    1b46:	49 c0       	rjmp	.+146    	; 0x1bda <GPIO_readPin+0xf6>
    1b48:	5f c0       	rjmp	.+190    	; 0x1c08 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b4a:	e9 e3       	ldi	r30, 0x39	; 57
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a9 01       	movw	r20, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <GPIO_readPin+0x7e>
    1b5e:	55 95       	asr	r21
    1b60:	47 95       	ror	r20
    1b62:	8a 95       	dec	r24
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <GPIO_readPin+0x7a>
    1b66:	ca 01       	movw	r24, r20
    1b68:	81 70       	andi	r24, 0x01	; 1
    1b6a:	90 70       	andi	r25, 0x00	; 0
    1b6c:	88 23       	and	r24, r24
    1b6e:	19 f0       	breq	.+6      	; 0x1b76 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	49 c0       	rjmp	.+146    	; 0x1c08 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b76:	19 82       	std	Y+1, r1	; 0x01
    1b78:	47 c0       	rjmp	.+142    	; 0x1c08 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1b7a:	e6 e3       	ldi	r30, 0x36	; 54
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a9 01       	movw	r20, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <GPIO_readPin+0xae>
    1b8e:	55 95       	asr	r21
    1b90:	47 95       	ror	r20
    1b92:	8a 95       	dec	r24
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <GPIO_readPin+0xaa>
    1b96:	ca 01       	movw	r24, r20
    1b98:	81 70       	andi	r24, 0x01	; 1
    1b9a:	90 70       	andi	r25, 0x00	; 0
    1b9c:	88 23       	and	r24, r24
    1b9e:	19 f0       	breq	.+6      	; 0x1ba6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	31 c0       	rjmp	.+98     	; 0x1c08 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ba6:	19 82       	std	Y+1, r1	; 0x01
    1ba8:	2f c0       	rjmp	.+94     	; 0x1c08 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1baa:	e3 e3       	ldi	r30, 0x33	; 51
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	88 2f       	mov	r24, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a9 01       	movw	r20, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <GPIO_readPin+0xde>
    1bbe:	55 95       	asr	r21
    1bc0:	47 95       	ror	r20
    1bc2:	8a 95       	dec	r24
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <GPIO_readPin+0xda>
    1bc6:	ca 01       	movw	r24, r20
    1bc8:	81 70       	andi	r24, 0x01	; 1
    1bca:	90 70       	andi	r25, 0x00	; 0
    1bcc:	88 23       	and	r24, r24
    1bce:	19 f0       	breq	.+6      	; 0x1bd6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	19 c0       	rjmp	.+50     	; 0x1c08 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bd6:	19 82       	std	Y+1, r1	; 0x01
    1bd8:	17 c0       	rjmp	.+46     	; 0x1c08 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1bda:	e0 e3       	ldi	r30, 0x30	; 48
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a9 01       	movw	r20, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <GPIO_readPin+0x10e>
    1bee:	55 95       	asr	r21
    1bf0:	47 95       	ror	r20
    1bf2:	8a 95       	dec	r24
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <GPIO_readPin+0x10a>
    1bf6:	ca 01       	movw	r24, r20
    1bf8:	81 70       	andi	r24, 0x01	; 1
    1bfa:	90 70       	andi	r25, 0x00	; 0
    1bfc:	88 23       	and	r24, r24
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c06:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <GPIO_setupPortDirection+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <GPIO_setupPortDirection+0x8>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	84 30       	cpi	r24, 0x04	; 4
    1c2e:	90 f5       	brcc	.+100    	; 0x1c94 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	3c 83       	std	Y+4, r19	; 0x04
    1c38:	2b 83       	std	Y+3, r18	; 0x03
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	91 05       	cpc	r25, r1
    1c42:	d1 f0       	breq	.+52     	; 0x1c78 <GPIO_setupPortDirection+0x5e>
    1c44:	2b 81       	ldd	r18, Y+3	; 0x03
    1c46:	3c 81       	ldd	r19, Y+4	; 0x04
    1c48:	22 30       	cpi	r18, 0x02	; 2
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	2c f4       	brge	.+10     	; 0x1c58 <GPIO_setupPortDirection+0x3e>
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	61 f0       	breq	.+24     	; 0x1c6e <GPIO_setupPortDirection+0x54>
    1c56:	1e c0       	rjmp	.+60     	; 0x1c94 <GPIO_setupPortDirection+0x7a>
    1c58:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5c:	22 30       	cpi	r18, 0x02	; 2
    1c5e:	31 05       	cpc	r19, r1
    1c60:	81 f0       	breq	.+32     	; 0x1c82 <GPIO_setupPortDirection+0x68>
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	83 30       	cpi	r24, 0x03	; 3
    1c68:	91 05       	cpc	r25, r1
    1c6a:	81 f0       	breq	.+32     	; 0x1c8c <GPIO_setupPortDirection+0x72>
    1c6c:	13 c0       	rjmp	.+38     	; 0x1c94 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c6e:	ea e3       	ldi	r30, 0x3A	; 58
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	80 83       	st	Z, r24
    1c76:	0e c0       	rjmp	.+28     	; 0x1c94 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c78:	e7 e3       	ldi	r30, 0x37	; 55
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	80 83       	st	Z, r24
    1c80:	09 c0       	rjmp	.+18     	; 0x1c94 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c82:	e4 e3       	ldi	r30, 0x34	; 52
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	80 83       	st	Z, r24
    1c8a:	04 c0       	rjmp	.+8      	; 0x1c94 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <GPIO_writePort+0x6>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <GPIO_writePort+0x8>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	84 30       	cpi	r24, 0x04	; 4
    1cb6:	90 f5       	brcc	.+100    	; 0x1d1c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	3c 83       	std	Y+4, r19	; 0x04
    1cc0:	2b 83       	std	Y+3, r18	; 0x03
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	91 05       	cpc	r25, r1
    1cca:	d1 f0       	breq	.+52     	; 0x1d00 <GPIO_writePort+0x5e>
    1ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cce:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd0:	22 30       	cpi	r18, 0x02	; 2
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <GPIO_writePort+0x3e>
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	61 f0       	breq	.+24     	; 0x1cf6 <GPIO_writePort+0x54>
    1cde:	1e c0       	rjmp	.+60     	; 0x1d1c <GPIO_writePort+0x7a>
    1ce0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce4:	22 30       	cpi	r18, 0x02	; 2
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	81 f0       	breq	.+32     	; 0x1d0a <GPIO_writePort+0x68>
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	81 f0       	breq	.+32     	; 0x1d14 <GPIO_writePort+0x72>
    1cf4:	13 c0       	rjmp	.+38     	; 0x1d1c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1cf6:	eb e3       	ldi	r30, 0x3B	; 59
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	80 83       	st	Z, r24
    1cfe:	0e c0       	rjmp	.+28     	; 0x1d1c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d00:	e8 e3       	ldi	r30, 0x38	; 56
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	80 83       	st	Z, r24
    1d08:	09 c0       	rjmp	.+18     	; 0x1d1c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d0a:	e5 e3       	ldi	r30, 0x35	; 53
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	80 83       	st	Z, r24
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d14:	e2 e3       	ldi	r30, 0x32	; 50
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <GPIO_readPort+0x6>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <GPIO_readPort+0x8>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d38:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	84 30       	cpi	r24, 0x04	; 4
    1d3e:	90 f5       	brcc	.+100    	; 0x1da4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	3c 83       	std	Y+4, r19	; 0x04
    1d48:	2b 83       	std	Y+3, r18	; 0x03
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	91 05       	cpc	r25, r1
    1d52:	d1 f0       	breq	.+52     	; 0x1d88 <GPIO_readPort+0x5e>
    1d54:	2b 81       	ldd	r18, Y+3	; 0x03
    1d56:	3c 81       	ldd	r19, Y+4	; 0x04
    1d58:	22 30       	cpi	r18, 0x02	; 2
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <GPIO_readPort+0x3e>
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	61 f0       	breq	.+24     	; 0x1d7e <GPIO_readPort+0x54>
    1d66:	1e c0       	rjmp	.+60     	; 0x1da4 <GPIO_readPort+0x7a>
    1d68:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	81 f0       	breq	.+32     	; 0x1d92 <GPIO_readPort+0x68>
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	91 05       	cpc	r25, r1
    1d7a:	81 f0       	breq	.+32     	; 0x1d9c <GPIO_readPort+0x72>
    1d7c:	13 c0       	rjmp	.+38     	; 0x1da4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1d7e:	e9 e3       	ldi	r30, 0x39	; 57
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	0e c0       	rjmp	.+28     	; 0x1da4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1d88:	e6 e3       	ldi	r30, 0x36	; 54
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	09 c0       	rjmp	.+18     	; 0x1da4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1d92:	e3 e3       	ldi	r30, 0x33	; 51
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d9c:	e0 e3       	ldi	r30, 0x30	; 48
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	60 97       	sbiw	r28, 0x10	; 16
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	64 e0       	ldi	r22, 0x04	; 4
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	65 e0       	ldi	r22, 0x05	; 5
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	66 e0       	ldi	r22, 0x06	; 6
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	67 e0       	ldi	r22, 0x07	; 7
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	40 e0       	ldi	r20, 0x00	; 0
    1df6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	61 e0       	ldi	r22, 0x01	; 1
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	62 e0       	ldi	r22, 0x02	; 2
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	63 e0       	ldi	r22, 0x03	; 3
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1e18:	1f 86       	std	Y+15, r1	; 0x0f
    1e1a:	b1 c0       	rjmp	.+354    	; 0x1f7e <KEYPAD_getPressedKey+0x1ca>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1e1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1e:	98 2f       	mov	r25, r24
    1e20:	9c 5f       	subi	r25, 0xFC	; 252
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	69 2f       	mov	r22, r25
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1e2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2e:	98 2f       	mov	r25, r24
    1e30:	9c 5f       	subi	r25, 0xFC	; 252
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	69 2f       	mov	r22, r25
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	0e 94 87 0c 	call	0x190e	; 0x190e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1e3c:	18 8a       	std	Y+16, r1	; 0x10
    1e3e:	1f c0       	rjmp	.+62     	; 0x1e7e <KEYPAD_getPressedKey+0xca>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	68 89       	ldd	r22, Y+16	; 0x10
    1e44:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <GPIO_readPin>
    1e48:	88 23       	and	r24, r24
    1e4a:	b1 f4       	brne	.+44     	; 0x1e78 <KEYPAD_getPressedKey+0xc4>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	88 89       	ldd	r24, Y+16	; 0x10
    1e5e:	89 0f       	add	r24, r25
    1e60:	8f 5f       	subi	r24, 0xFF	; 255
    1e62:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(80); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1e66:	60 96       	adiw	r28, 0x10	; 16
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1e78:	88 89       	ldd	r24, Y+16	; 0x10
    1e7a:	8f 5f       	subi	r24, 0xFF	; 255
    1e7c:	88 8b       	std	Y+16, r24	; 0x10
    1e7e:	88 89       	ldd	r24, Y+16	; 0x10
    1e80:	84 30       	cpi	r24, 0x04	; 4
    1e82:	f0 f2       	brcs	.-68     	; 0x1e40 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1e84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e86:	98 2f       	mov	r25, r24
    1e88:	9c 5f       	subi	r25, 0xFC	; 252
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	69 2f       	mov	r22, r25
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 ea       	ldi	r26, 0xA0	; 160
    1e9a:	b2 e4       	ldi	r27, 0x42	; 66
    1e9c:	8b 87       	std	Y+11, r24	; 0x0b
    1e9e:	9c 87       	std	Y+12, r25	; 0x0c
    1ea0:	ad 87       	std	Y+13, r26	; 0x0d
    1ea2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a ef       	ldi	r20, 0xFA	; 250
    1eb2:	54 e4       	ldi	r21, 0x44	; 68
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	8f 83       	std	Y+7, r24	; 0x07
    1ebe:	98 87       	std	Y+8, r25	; 0x08
    1ec0:	a9 87       	std	Y+9, r26	; 0x09
    1ec2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec6:	78 85       	ldd	r23, Y+8	; 0x08
    1ec8:	89 85       	ldd	r24, Y+9	; 0x09
    1eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
    1ee4:	3f c0       	rjmp	.+126    	; 0x1f64 <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    1ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee8:	78 85       	ldd	r23, Y+8	; 0x08
    1eea:	89 85       	ldd	r24, Y+9	; 0x09
    1eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9e 83       	std	Y+6, r25	; 0x06
    1f24:	8d 83       	std	Y+5, r24	; 0x05
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <KEYPAD_getPressedKey+0x192>
    1f28:	88 ec       	ldi	r24, 0xC8	; 200
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <KEYPAD_getPressedKey+0x180>
    1f38:	9c 83       	std	Y+4, r25	; 0x04
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <KEYPAD_getPressedKey+0x174>
    1f4e:	14 c0       	rjmp	.+40     	; 0x1f78 <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f50:	6f 81       	ldd	r22, Y+7	; 0x07
    1f52:	78 85       	ldd	r23, Y+8	; 0x08
    1f54:	89 85       	ldd	r24, Y+9	; 0x09
    1f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <KEYPAD_getPressedKey+0x1bc>
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7a:	8f 5f       	subi	r24, 0xFF	; 255
    1f7c:	8f 87       	std	Y+15, r24	; 0x0f
    1f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f80:	84 30       	cpi	r24, 0x04	; 4
    1f82:	08 f4       	brcc	.+2      	; 0x1f86 <KEYPAD_getPressedKey+0x1d2>
    1f84:	4b cf       	rjmp	.-362    	; 0x1e1c <KEYPAD_getPressedKey+0x68>
    1f86:	48 cf       	rjmp	.-368    	; 0x1e18 <KEYPAD_getPressedKey+0x64>

00001f88 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f96:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	3c 83       	std	Y+4, r19	; 0x04
    1fa0:	2b 83       	std	Y+3, r18	; 0x03
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	88 30       	cpi	r24, 0x08	; 8
    1fa8:	91 05       	cpc	r25, r1
    1faa:	09 f4       	brne	.+2      	; 0x1fae <KEYPAD_4x4_adjustKeyNumber+0x26>
    1fac:	70 c0       	rjmp	.+224    	; 0x208e <KEYPAD_4x4_adjustKeyNumber+0x106>
    1fae:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb2:	29 30       	cpi	r18, 0x09	; 9
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	5c f5       	brge	.+86     	; 0x200e <KEYPAD_4x4_adjustKeyNumber+0x86>
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	84 30       	cpi	r24, 0x04	; 4
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1fc2:	59 c0       	rjmp	.+178    	; 0x2076 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1fc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc8:	25 30       	cpi	r18, 0x05	; 5
    1fca:	31 05       	cpc	r19, r1
    1fcc:	9c f4       	brge	.+38     	; 0x1ff4 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	82 30       	cpi	r24, 0x02	; 2
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <KEYPAD_4x4_adjustKeyNumber+0x52>
    1fd8:	48 c0       	rjmp	.+144    	; 0x206a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1fda:	2b 81       	ldd	r18, Y+3	; 0x03
    1fdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fde:	23 30       	cpi	r18, 0x03	; 3
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	0c f0       	brlt	.+2      	; 0x1fe6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1fe4:	45 c0       	rjmp	.+138    	; 0x2070 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	91 05       	cpc	r25, r1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ff0:	39 c0       	rjmp	.+114    	; 0x2064 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ff2:	67 c0       	rjmp	.+206    	; 0x20c2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1ff4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff8:	26 30       	cpi	r18, 0x06	; 6
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1ffe:	41 c0       	rjmp	.+130    	; 0x2082 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	87 30       	cpi	r24, 0x07	; 7
    2006:	91 05       	cpc	r25, r1
    2008:	0c f0       	brlt	.+2      	; 0x200c <KEYPAD_4x4_adjustKeyNumber+0x84>
    200a:	3e c0       	rjmp	.+124    	; 0x2088 <KEYPAD_4x4_adjustKeyNumber+0x100>
    200c:	37 c0       	rjmp	.+110    	; 0x207c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    200e:	2b 81       	ldd	r18, Y+3	; 0x03
    2010:	3c 81       	ldd	r19, Y+4	; 0x04
    2012:	2c 30       	cpi	r18, 0x0C	; 12
    2014:	31 05       	cpc	r19, r1
    2016:	09 f4       	brne	.+2      	; 0x201a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2018:	46 c0       	rjmp	.+140    	; 0x20a6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	8d 30       	cpi	r24, 0x0D	; 13
    2020:	91 05       	cpc	r25, r1
    2022:	5c f4       	brge	.+22     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2024:	2b 81       	ldd	r18, Y+3	; 0x03
    2026:	3c 81       	ldd	r19, Y+4	; 0x04
    2028:	2a 30       	cpi	r18, 0x0A	; 10
    202a:	31 05       	cpc	r19, r1
    202c:	b1 f1       	breq	.+108    	; 0x209a <KEYPAD_4x4_adjustKeyNumber+0x112>
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	8b 30       	cpi	r24, 0x0B	; 11
    2034:	91 05       	cpc	r25, r1
    2036:	a4 f5       	brge	.+104    	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2038:	2d c0       	rjmp	.+90     	; 0x2094 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    203a:	2b 81       	ldd	r18, Y+3	; 0x03
    203c:	3c 81       	ldd	r19, Y+4	; 0x04
    203e:	2e 30       	cpi	r18, 0x0E	; 14
    2040:	31 05       	cpc	r19, r1
    2042:	b9 f1       	breq	.+110    	; 0x20b2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	8e 30       	cpi	r24, 0x0E	; 14
    204a:	91 05       	cpc	r25, r1
    204c:	7c f1       	brlt	.+94     	; 0x20ac <KEYPAD_4x4_adjustKeyNumber+0x124>
    204e:	2b 81       	ldd	r18, Y+3	; 0x03
    2050:	3c 81       	ldd	r19, Y+4	; 0x04
    2052:	2f 30       	cpi	r18, 0x0F	; 15
    2054:	31 05       	cpc	r19, r1
    2056:	79 f1       	breq	.+94     	; 0x20b6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	80 31       	cpi	r24, 0x10	; 16
    205e:	91 05       	cpc	r25, r1
    2060:	69 f1       	breq	.+90     	; 0x20bc <KEYPAD_4x4_adjustKeyNumber+0x134>
    2062:	2f c0       	rjmp	.+94     	; 0x20c2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2064:	87 e0       	ldi	r24, 0x07	; 7
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	2e c0       	rjmp	.+92     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    206a:	88 e0       	ldi	r24, 0x08	; 8
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	2b c0       	rjmp	.+86     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2070:	89 e0       	ldi	r24, 0x09	; 9
    2072:	89 83       	std	Y+1, r24	; 0x01
    2074:	28 c0       	rjmp	.+80     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2076:	85 e2       	ldi	r24, 0x25	; 37
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	25 c0       	rjmp	.+74     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    207c:	84 e0       	ldi	r24, 0x04	; 4
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	22 c0       	rjmp	.+68     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2082:	85 e0       	ldi	r24, 0x05	; 5
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	1f c0       	rjmp	.+62     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2088:	86 e0       	ldi	r24, 0x06	; 6
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	1c c0       	rjmp	.+56     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    208e:	8a e2       	ldi	r24, 0x2A	; 42
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	19 c0       	rjmp	.+50     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	16 c0       	rjmp	.+44     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    209a:	82 e0       	ldi	r24, 0x02	; 2
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	13 c0       	rjmp	.+38     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	10 c0       	rjmp	.+32     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    20a6:	8d e2       	ldi	r24, 0x2D	; 45
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	0d c0       	rjmp	.+26     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    20ac:	8d e0       	ldi	r24, 0x0D	; 13
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	0a c0       	rjmp	.+20     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    20b2:	19 82       	std	Y+1, r1	; 0x01
    20b4:	08 c0       	rjmp	.+16     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    20b6:	8d e3       	ldi	r24, 0x3D	; 61
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	05 c0       	rjmp	.+10     	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    20bc:	8b e2       	ldi	r24, 0x2B	; 43
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	2e 97       	sbiw	r28, 0x0e	; 14
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	61 e0       	ldi	r22, 0x01	; 1
    20f8:	41 e0       	ldi	r20, 0x01	; 1
    20fa:	0e 94 9c 0b 	call	0x1738	; 0x1738 <GPIO_setupPinDirection>
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 ea       	ldi	r26, 0xA0	; 160
    2104:	b1 e4       	ldi	r27, 0x41	; 65
    2106:	8b 87       	std	Y+11, r24	; 0x0b
    2108:	9c 87       	std	Y+12, r25	; 0x0c
    210a:	ad 87       	std	Y+13, r26	; 0x0d
    210c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2110:	7c 85       	ldd	r23, Y+12	; 0x0c
    2112:	8d 85       	ldd	r24, Y+13	; 0x0d
    2114:	9e 85       	ldd	r25, Y+14	; 0x0e
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	4a ef       	ldi	r20, 0xFA	; 250
    211c:	54 e4       	ldi	r21, 0x44	; 68
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8f 83       	std	Y+7, r24	; 0x07
    2128:	98 87       	std	Y+8, r25	; 0x08
    212a:	a9 87       	std	Y+9, r26	; 0x09
    212c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2142:	88 23       	and	r24, r24
    2144:	2c f4       	brge	.+10     	; 0x2150 <LCD_init+0x7a>
		__ticks = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	3f c0       	rjmp	.+126    	; 0x21ce <LCD_init+0xf8>
	else if (__tmp > 65535)
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	3f ef       	ldi	r19, 0xFF	; 255
    215c:	4f e7       	ldi	r20, 0x7F	; 127
    215e:	57 e4       	ldi	r21, 0x47	; 71
    2160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2164:	18 16       	cp	r1, r24
    2166:	4c f5       	brge	.+82     	; 0x21ba <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2168:	6b 85       	ldd	r22, Y+11	; 0x0b
    216a:	7c 85       	ldd	r23, Y+12	; 0x0c
    216c:	8d 85       	ldd	r24, Y+13	; 0x0d
    216e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e2       	ldi	r20, 0x20	; 32
    2176:	51 e4       	ldi	r21, 0x41	; 65
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <LCD_init+0xda>
    2192:	88 ec       	ldi	r24, 0xC8	; 200
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_init+0xc8>
    21a2:	9c 83       	std	Y+4, r25	; 0x04
    21a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	69 f7       	brne	.-38     	; 0x2192 <LCD_init+0xbc>
    21b8:	14 c0       	rjmp	.+40     	; 0x21e2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_init+0x104>
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	6f ef       	ldi	r22, 0xFF	; 255
    21e6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    21ea:	88 e3       	ldi	r24, 0x38	; 56
    21ec:	0e 94 07 11 	call	0x220e	; 0x220e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    21f0:	8c e0       	ldi	r24, 0x0C	; 12
    21f2:	0e 94 07 11 	call	0x220e	; 0x220e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	0e 94 07 11 	call	0x220e	; 0x220e <LCD_sendCommand>
}
    21fc:	2e 96       	adiw	r28, 0x0e	; 14
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	e9 97       	sbiw	r28, 0x39	; 57
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	0e 94 87 0c 	call	0x190e	; 0x190e <GPIO_writePin>
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a0 e8       	ldi	r26, 0x80	; 128
    2234:	bf e3       	ldi	r27, 0x3F	; 63
    2236:	8d ab       	std	Y+53, r24	; 0x35
    2238:	9e ab       	std	Y+54, r25	; 0x36
    223a:	af ab       	std	Y+55, r26	; 0x37
    223c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223e:	6d a9       	ldd	r22, Y+53	; 0x35
    2240:	7e a9       	ldd	r23, Y+54	; 0x36
    2242:	8f a9       	ldd	r24, Y+55	; 0x37
    2244:	98 ad       	ldd	r25, Y+56	; 0x38
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	4a ef       	ldi	r20, 0xFA	; 250
    224c:	54 e4       	ldi	r21, 0x44	; 68
    224e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	89 ab       	std	Y+49, r24	; 0x31
    2258:	9a ab       	std	Y+50, r25	; 0x32
    225a:	ab ab       	std	Y+51, r26	; 0x33
    225c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    225e:	69 a9       	ldd	r22, Y+49	; 0x31
    2260:	7a a9       	ldd	r23, Y+50	; 0x32
    2262:	8b a9       	ldd	r24, Y+51	; 0x33
    2264:	9c a9       	ldd	r25, Y+52	; 0x34
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e8       	ldi	r20, 0x80	; 128
    226c:	5f e3       	ldi	r21, 0x3F	; 63
    226e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2272:	88 23       	and	r24, r24
    2274:	2c f4       	brge	.+10     	; 0x2280 <LCD_sendCommand+0x72>
		__ticks = 1;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	98 ab       	std	Y+48, r25	; 0x30
    227c:	8f a7       	std	Y+47, r24	; 0x2f
    227e:	3f c0       	rjmp	.+126    	; 0x22fe <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2280:	69 a9       	ldd	r22, Y+49	; 0x31
    2282:	7a a9       	ldd	r23, Y+50	; 0x32
    2284:	8b a9       	ldd	r24, Y+51	; 0x33
    2286:	9c a9       	ldd	r25, Y+52	; 0x34
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	3f ef       	ldi	r19, 0xFF	; 255
    228c:	4f e7       	ldi	r20, 0x7F	; 127
    228e:	57 e4       	ldi	r21, 0x47	; 71
    2290:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2294:	18 16       	cp	r1, r24
    2296:	4c f5       	brge	.+82     	; 0x22ea <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2298:	6d a9       	ldd	r22, Y+53	; 0x35
    229a:	7e a9       	ldd	r23, Y+54	; 0x36
    229c:	8f a9       	ldd	r24, Y+55	; 0x37
    229e:	98 ad       	ldd	r25, Y+56	; 0x38
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	98 ab       	std	Y+48, r25	; 0x30
    22be:	8f a7       	std	Y+47, r24	; 0x2f
    22c0:	0f c0       	rjmp	.+30     	; 0x22e0 <LCD_sendCommand+0xd2>
    22c2:	88 ec       	ldi	r24, 0xC8	; 200
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9e a7       	std	Y+46, r25	; 0x2e
    22c8:	8d a7       	std	Y+45, r24	; 0x2d
    22ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    22cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <LCD_sendCommand+0xc0>
    22d2:	9e a7       	std	Y+46, r25	; 0x2e
    22d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d8:	98 a9       	ldd	r25, Y+48	; 0x30
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	98 ab       	std	Y+48, r25	; 0x30
    22de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e2:	98 a9       	ldd	r25, Y+48	; 0x30
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	69 f7       	brne	.-38     	; 0x22c2 <LCD_sendCommand+0xb4>
    22e8:	14 c0       	rjmp	.+40     	; 0x2312 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ea:	69 a9       	ldd	r22, Y+49	; 0x31
    22ec:	7a a9       	ldd	r23, Y+50	; 0x32
    22ee:	8b a9       	ldd	r24, Y+51	; 0x33
    22f0:	9c a9       	ldd	r25, Y+52	; 0x34
    22f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	98 ab       	std	Y+48, r25	; 0x30
    22fc:	8f a7       	std	Y+47, r24	; 0x2f
    22fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2300:	98 a9       	ldd	r25, Y+48	; 0x30
    2302:	9c a7       	std	Y+44, r25	; 0x2c
    2304:	8b a7       	std	Y+43, r24	; 0x2b
    2306:	8b a5       	ldd	r24, Y+43	; 0x2b
    2308:	9c a5       	ldd	r25, Y+44	; 0x2c
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <LCD_sendCommand+0xfc>
    230e:	9c a7       	std	Y+44, r25	; 0x2c
    2310:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 87 0c 	call	0x190e	; 0x190e <GPIO_writePin>
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	a0 e8       	ldi	r26, 0x80	; 128
    2322:	bf e3       	ldi	r27, 0x3F	; 63
    2324:	8f a3       	std	Y+39, r24	; 0x27
    2326:	98 a7       	std	Y+40, r25	; 0x28
    2328:	a9 a7       	std	Y+41, r26	; 0x29
    232a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232c:	6f a1       	ldd	r22, Y+39	; 0x27
    232e:	78 a5       	ldd	r23, Y+40	; 0x28
    2330:	89 a5       	ldd	r24, Y+41	; 0x29
    2332:	9a a5       	ldd	r25, Y+42	; 0x2a
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	4a ef       	ldi	r20, 0xFA	; 250
    233a:	54 e4       	ldi	r21, 0x44	; 68
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	8b a3       	std	Y+35, r24	; 0x23
    2346:	9c a3       	std	Y+36, r25	; 0x24
    2348:	ad a3       	std	Y+37, r26	; 0x25
    234a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    234c:	6b a1       	ldd	r22, Y+35	; 0x23
    234e:	7c a1       	ldd	r23, Y+36	; 0x24
    2350:	8d a1       	ldd	r24, Y+37	; 0x25
    2352:	9e a1       	ldd	r25, Y+38	; 0x26
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e8       	ldi	r20, 0x80	; 128
    235a:	5f e3       	ldi	r21, 0x3F	; 63
    235c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2360:	88 23       	and	r24, r24
    2362:	2c f4       	brge	.+10     	; 0x236e <LCD_sendCommand+0x160>
		__ticks = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9a a3       	std	Y+34, r25	; 0x22
    236a:	89 a3       	std	Y+33, r24	; 0x21
    236c:	3f c0       	rjmp	.+126    	; 0x23ec <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    236e:	6b a1       	ldd	r22, Y+35	; 0x23
    2370:	7c a1       	ldd	r23, Y+36	; 0x24
    2372:	8d a1       	ldd	r24, Y+37	; 0x25
    2374:	9e a1       	ldd	r25, Y+38	; 0x26
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	3f ef       	ldi	r19, 0xFF	; 255
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	57 e4       	ldi	r21, 0x47	; 71
    237e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2382:	18 16       	cp	r1, r24
    2384:	4c f5       	brge	.+82     	; 0x23d8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2386:	6f a1       	ldd	r22, Y+39	; 0x27
    2388:	78 a5       	ldd	r23, Y+40	; 0x28
    238a:	89 a5       	ldd	r24, Y+41	; 0x29
    238c:	9a a5       	ldd	r25, Y+42	; 0x2a
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e2       	ldi	r20, 0x20	; 32
    2394:	51 e4       	ldi	r21, 0x41	; 65
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9a a3       	std	Y+34, r25	; 0x22
    23ac:	89 a3       	std	Y+33, r24	; 0x21
    23ae:	0f c0       	rjmp	.+30     	; 0x23ce <LCD_sendCommand+0x1c0>
    23b0:	88 ec       	ldi	r24, 0xC8	; 200
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	98 a3       	std	Y+32, r25	; 0x20
    23b6:	8f 8f       	std	Y+31, r24	; 0x1f
    23b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23ba:	98 a1       	ldd	r25, Y+32	; 0x20
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <LCD_sendCommand+0x1ae>
    23c0:	98 a3       	std	Y+32, r25	; 0x20
    23c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c4:	89 a1       	ldd	r24, Y+33	; 0x21
    23c6:	9a a1       	ldd	r25, Y+34	; 0x22
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	9a a3       	std	Y+34, r25	; 0x22
    23cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	89 a1       	ldd	r24, Y+33	; 0x21
    23d0:	9a a1       	ldd	r25, Y+34	; 0x22
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	69 f7       	brne	.-38     	; 0x23b0 <LCD_sendCommand+0x1a2>
    23d6:	14 c0       	rjmp	.+40     	; 0x2400 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d8:	6b a1       	ldd	r22, Y+35	; 0x23
    23da:	7c a1       	ldd	r23, Y+36	; 0x24
    23dc:	8d a1       	ldd	r24, Y+37	; 0x25
    23de:	9e a1       	ldd	r25, Y+38	; 0x26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9a a3       	std	Y+34, r25	; 0x22
    23ea:	89 a3       	std	Y+33, r24	; 0x21
    23ec:	89 a1       	ldd	r24, Y+33	; 0x21
    23ee:	9a a1       	ldd	r25, Y+34	; 0x22
    23f0:	9e 8f       	std	Y+30, r25	; 0x1e
    23f2:	8d 8f       	std	Y+29, r24	; 0x1d
    23f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <LCD_sendCommand+0x1ea>
    23fc:	9e 8f       	std	Y+30, r25	; 0x1e
    23fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	69 ad       	ldd	r22, Y+57	; 0x39
    2404:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePort>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e8       	ldi	r26, 0x80	; 128
    240e:	bf e3       	ldi	r27, 0x3F	; 63
    2410:	89 8f       	std	Y+25, r24	; 0x19
    2412:	9a 8f       	std	Y+26, r25	; 0x1a
    2414:	ab 8f       	std	Y+27, r26	; 0x1b
    2416:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	69 8d       	ldd	r22, Y+25	; 0x19
    241a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a ef       	ldi	r20, 0xFA	; 250
    2426:	54 e4       	ldi	r21, 0x44	; 68
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8d 8b       	std	Y+21, r24	; 0x15
    2432:	9e 8b       	std	Y+22, r25	; 0x16
    2434:	af 8b       	std	Y+23, r26	; 0x17
    2436:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2438:	6d 89       	ldd	r22, Y+21	; 0x15
    243a:	7e 89       	ldd	r23, Y+22	; 0x16
    243c:	8f 89       	ldd	r24, Y+23	; 0x17
    243e:	98 8d       	ldd	r25, Y+24	; 0x18
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9c 8b       	std	Y+20, r25	; 0x14
    2456:	8b 8b       	std	Y+19, r24	; 0x13
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    245a:	6d 89       	ldd	r22, Y+21	; 0x15
    245c:	7e 89       	ldd	r23, Y+22	; 0x16
    245e:	8f 89       	ldd	r24, Y+23	; 0x17
    2460:	98 8d       	ldd	r25, Y+24	; 0x18
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	69 8d       	ldd	r22, Y+25	; 0x19
    2474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9c 8b       	std	Y+20, r25	; 0x14
    2498:	8b 8b       	std	Y+19, r24	; 0x13
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <LCD_sendCommand+0x2ac>
    249c:	88 ec       	ldi	r24, 0xC8	; 200
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9a 8b       	std	Y+18, r25	; 0x12
    24a2:	89 8b       	std	Y+17, r24	; 0x11
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	9a 89       	ldd	r25, Y+18	; 0x12
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <LCD_sendCommand+0x29a>
    24ac:	9a 8b       	std	Y+18, r25	; 0x12
    24ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	8b 89       	ldd	r24, Y+19	; 0x13
    24b2:	9c 89       	ldd	r25, Y+20	; 0x14
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9c 8b       	std	Y+20, r25	; 0x14
    24b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	8b 89       	ldd	r24, Y+19	; 0x13
    24bc:	9c 89       	ldd	r25, Y+20	; 0x14
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <LCD_sendCommand+0x28e>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	6d 89       	ldd	r22, Y+21	; 0x15
    24c6:	7e 89       	ldd	r23, Y+22	; 0x16
    24c8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ca:	98 8d       	ldd	r25, Y+24	; 0x18
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9c 8b       	std	Y+20, r25	; 0x14
    24d6:	8b 8b       	std	Y+19, r24	; 0x13
    24d8:	8b 89       	ldd	r24, Y+19	; 0x13
    24da:	9c 89       	ldd	r25, Y+20	; 0x14
    24dc:	98 8b       	std	Y+16, r25	; 0x10
    24de:	8f 87       	std	Y+15, r24	; 0x0f
    24e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e2:	98 89       	ldd	r25, Y+16	; 0x10
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_sendCommand+0x2d6>
    24e8:	98 8b       	std	Y+16, r25	; 0x10
    24ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	61 e0       	ldi	r22, 0x01	; 1
    24f0:	40 e0       	ldi	r20, 0x00	; 0
    24f2:	0e 94 87 0c 	call	0x190e	; 0x190e <GPIO_writePin>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a0 e8       	ldi	r26, 0x80	; 128
    24fc:	bf e3       	ldi	r27, 0x3F	; 63
    24fe:	8b 87       	std	Y+11, r24	; 0x0b
    2500:	9c 87       	std	Y+12, r25	; 0x0c
    2502:	ad 87       	std	Y+13, r26	; 0x0d
    2504:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2506:	6b 85       	ldd	r22, Y+11	; 0x0b
    2508:	7c 85       	ldd	r23, Y+12	; 0x0c
    250a:	8d 85       	ldd	r24, Y+13	; 0x0d
    250c:	9e 85       	ldd	r25, Y+14	; 0x0e
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	4a ef       	ldi	r20, 0xFA	; 250
    2514:	54 e4       	ldi	r21, 0x44	; 68
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	8f 83       	std	Y+7, r24	; 0x07
    2520:	98 87       	std	Y+8, r25	; 0x08
    2522:	a9 87       	std	Y+9, r26	; 0x09
    2524:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2526:	6f 81       	ldd	r22, Y+7	; 0x07
    2528:	78 85       	ldd	r23, Y+8	; 0x08
    252a:	89 85       	ldd	r24, Y+9	; 0x09
    252c:	9a 85       	ldd	r25, Y+10	; 0x0a
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	2c f4       	brge	.+10     	; 0x2548 <LCD_sendCommand+0x33a>
		__ticks = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9e 83       	std	Y+6, r25	; 0x06
    2544:	8d 83       	std	Y+5, r24	; 0x05
    2546:	3f c0       	rjmp	.+126    	; 0x25c6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	4c f5       	brge	.+82     	; 0x25b2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	6b 85       	ldd	r22, Y+11	; 0x0b
    2562:	7c 85       	ldd	r23, Y+12	; 0x0c
    2564:	8d 85       	ldd	r24, Y+13	; 0x0d
    2566:	9e 85       	ldd	r25, Y+14	; 0x0e
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <LCD_sendCommand+0x39a>
    258a:	88 ec       	ldi	r24, 0xC8	; 200
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	8b 83       	std	Y+3, r24	; 0x03
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <LCD_sendCommand+0x388>
    259a:	9c 83       	std	Y+4, r25	; 0x04
    259c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
    25a0:	9e 81       	ldd	r25, Y+6	; 0x06
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	9e 81       	ldd	r25, Y+6	; 0x06
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	69 f7       	brne	.-38     	; 0x258a <LCD_sendCommand+0x37c>
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b2:	6f 81       	ldd	r22, Y+7	; 0x07
    25b4:	78 85       	ldd	r23, Y+8	; 0x08
    25b6:	89 85       	ldd	r24, Y+9	; 0x09
    25b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9e 83       	std	Y+6, r25	; 0x06
    25c4:	8d 83       	std	Y+5, r24	; 0x05
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	9a 81       	ldd	r25, Y+2	; 0x02
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <LCD_sendCommand+0x3c4>
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    25da:	e9 96       	adiw	r28, 0x39	; 57
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	e9 97       	sbiw	r28, 0x39	; 57
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	41 e0       	ldi	r20, 0x01	; 1
    2608:	0e 94 87 0c 	call	0x190e	; 0x190e <GPIO_writePin>
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	a0 e8       	ldi	r26, 0x80	; 128
    2612:	bf e3       	ldi	r27, 0x3F	; 63
    2614:	8d ab       	std	Y+53, r24	; 0x35
    2616:	9e ab       	std	Y+54, r25	; 0x36
    2618:	af ab       	std	Y+55, r26	; 0x37
    261a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261c:	6d a9       	ldd	r22, Y+53	; 0x35
    261e:	7e a9       	ldd	r23, Y+54	; 0x36
    2620:	8f a9       	ldd	r24, Y+55	; 0x37
    2622:	98 ad       	ldd	r25, Y+56	; 0x38
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	4a ef       	ldi	r20, 0xFA	; 250
    262a:	54 e4       	ldi	r21, 0x44	; 68
    262c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	89 ab       	std	Y+49, r24	; 0x31
    2636:	9a ab       	std	Y+50, r25	; 0x32
    2638:	ab ab       	std	Y+51, r26	; 0x33
    263a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    263c:	69 a9       	ldd	r22, Y+49	; 0x31
    263e:	7a a9       	ldd	r23, Y+50	; 0x32
    2640:	8b a9       	ldd	r24, Y+51	; 0x33
    2642:	9c a9       	ldd	r25, Y+52	; 0x34
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e8       	ldi	r20, 0x80	; 128
    264a:	5f e3       	ldi	r21, 0x3F	; 63
    264c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2650:	88 23       	and	r24, r24
    2652:	2c f4       	brge	.+10     	; 0x265e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	98 ab       	std	Y+48, r25	; 0x30
    265a:	8f a7       	std	Y+47, r24	; 0x2f
    265c:	3f c0       	rjmp	.+126    	; 0x26dc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    265e:	69 a9       	ldd	r22, Y+49	; 0x31
    2660:	7a a9       	ldd	r23, Y+50	; 0x32
    2662:	8b a9       	ldd	r24, Y+51	; 0x33
    2664:	9c a9       	ldd	r25, Y+52	; 0x34
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	3f ef       	ldi	r19, 0xFF	; 255
    266a:	4f e7       	ldi	r20, 0x7F	; 127
    266c:	57 e4       	ldi	r21, 0x47	; 71
    266e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2672:	18 16       	cp	r1, r24
    2674:	4c f5       	brge	.+82     	; 0x26c8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2676:	6d a9       	ldd	r22, Y+53	; 0x35
    2678:	7e a9       	ldd	r23, Y+54	; 0x36
    267a:	8f a9       	ldd	r24, Y+55	; 0x37
    267c:	98 ad       	ldd	r25, Y+56	; 0x38
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e2       	ldi	r20, 0x20	; 32
    2684:	51 e4       	ldi	r21, 0x41	; 65
    2686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	98 ab       	std	Y+48, r25	; 0x30
    269c:	8f a7       	std	Y+47, r24	; 0x2f
    269e:	0f c0       	rjmp	.+30     	; 0x26be <LCD_displayCharacter+0xd2>
    26a0:	88 ec       	ldi	r24, 0xC8	; 200
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	9e a7       	std	Y+46, r25	; 0x2e
    26a6:	8d a7       	std	Y+45, r24	; 0x2d
    26a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    26aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <LCD_displayCharacter+0xc0>
    26b0:	9e a7       	std	Y+46, r25	; 0x2e
    26b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b6:	98 a9       	ldd	r25, Y+48	; 0x30
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	98 ab       	std	Y+48, r25	; 0x30
    26bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26be:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c0:	98 a9       	ldd	r25, Y+48	; 0x30
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	69 f7       	brne	.-38     	; 0x26a0 <LCD_displayCharacter+0xb4>
    26c6:	14 c0       	rjmp	.+40     	; 0x26f0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c8:	69 a9       	ldd	r22, Y+49	; 0x31
    26ca:	7a a9       	ldd	r23, Y+50	; 0x32
    26cc:	8b a9       	ldd	r24, Y+51	; 0x33
    26ce:	9c a9       	ldd	r25, Y+52	; 0x34
    26d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	98 ab       	std	Y+48, r25	; 0x30
    26da:	8f a7       	std	Y+47, r24	; 0x2f
    26dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26de:	98 a9       	ldd	r25, Y+48	; 0x30
    26e0:	9c a7       	std	Y+44, r25	; 0x2c
    26e2:	8b a7       	std	Y+43, r24	; 0x2b
    26e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    26e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <LCD_displayCharacter+0xfc>
    26ec:	9c a7       	std	Y+44, r25	; 0x2c
    26ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	61 e0       	ldi	r22, 0x01	; 1
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 87 0c 	call	0x190e	; 0x190e <GPIO_writePin>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	a0 e8       	ldi	r26, 0x80	; 128
    2700:	bf e3       	ldi	r27, 0x3F	; 63
    2702:	8f a3       	std	Y+39, r24	; 0x27
    2704:	98 a7       	std	Y+40, r25	; 0x28
    2706:	a9 a7       	std	Y+41, r26	; 0x29
    2708:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270a:	6f a1       	ldd	r22, Y+39	; 0x27
    270c:	78 a5       	ldd	r23, Y+40	; 0x28
    270e:	89 a5       	ldd	r24, Y+41	; 0x29
    2710:	9a a5       	ldd	r25, Y+42	; 0x2a
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	4a ef       	ldi	r20, 0xFA	; 250
    2718:	54 e4       	ldi	r21, 0x44	; 68
    271a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	8b a3       	std	Y+35, r24	; 0x23
    2724:	9c a3       	std	Y+36, r25	; 0x24
    2726:	ad a3       	std	Y+37, r26	; 0x25
    2728:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    272a:	6b a1       	ldd	r22, Y+35	; 0x23
    272c:	7c a1       	ldd	r23, Y+36	; 0x24
    272e:	8d a1       	ldd	r24, Y+37	; 0x25
    2730:	9e a1       	ldd	r25, Y+38	; 0x26
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e8       	ldi	r20, 0x80	; 128
    2738:	5f e3       	ldi	r21, 0x3F	; 63
    273a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    273e:	88 23       	and	r24, r24
    2740:	2c f4       	brge	.+10     	; 0x274c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	9a a3       	std	Y+34, r25	; 0x22
    2748:	89 a3       	std	Y+33, r24	; 0x21
    274a:	3f c0       	rjmp	.+126    	; 0x27ca <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    274c:	6b a1       	ldd	r22, Y+35	; 0x23
    274e:	7c a1       	ldd	r23, Y+36	; 0x24
    2750:	8d a1       	ldd	r24, Y+37	; 0x25
    2752:	9e a1       	ldd	r25, Y+38	; 0x26
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	3f ef       	ldi	r19, 0xFF	; 255
    2758:	4f e7       	ldi	r20, 0x7F	; 127
    275a:	57 e4       	ldi	r21, 0x47	; 71
    275c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2760:	18 16       	cp	r1, r24
    2762:	4c f5       	brge	.+82     	; 0x27b6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2764:	6f a1       	ldd	r22, Y+39	; 0x27
    2766:	78 a5       	ldd	r23, Y+40	; 0x28
    2768:	89 a5       	ldd	r24, Y+41	; 0x29
    276a:	9a a5       	ldd	r25, Y+42	; 0x2a
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e2       	ldi	r20, 0x20	; 32
    2772:	51 e4       	ldi	r21, 0x41	; 65
    2774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	bc 01       	movw	r22, r24
    277e:	cd 01       	movw	r24, r26
    2780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	9a a3       	std	Y+34, r25	; 0x22
    278a:	89 a3       	std	Y+33, r24	; 0x21
    278c:	0f c0       	rjmp	.+30     	; 0x27ac <LCD_displayCharacter+0x1c0>
    278e:	88 ec       	ldi	r24, 0xC8	; 200
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	98 a3       	std	Y+32, r25	; 0x20
    2794:	8f 8f       	std	Y+31, r24	; 0x1f
    2796:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2798:	98 a1       	ldd	r25, Y+32	; 0x20
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	f1 f7       	brne	.-4      	; 0x279a <LCD_displayCharacter+0x1ae>
    279e:	98 a3       	std	Y+32, r25	; 0x20
    27a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a2:	89 a1       	ldd	r24, Y+33	; 0x21
    27a4:	9a a1       	ldd	r25, Y+34	; 0x22
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	9a a3       	std	Y+34, r25	; 0x22
    27aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ac:	89 a1       	ldd	r24, Y+33	; 0x21
    27ae:	9a a1       	ldd	r25, Y+34	; 0x22
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	69 f7       	brne	.-38     	; 0x278e <LCD_displayCharacter+0x1a2>
    27b4:	14 c0       	rjmp	.+40     	; 0x27de <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b6:	6b a1       	ldd	r22, Y+35	; 0x23
    27b8:	7c a1       	ldd	r23, Y+36	; 0x24
    27ba:	8d a1       	ldd	r24, Y+37	; 0x25
    27bc:	9e a1       	ldd	r25, Y+38	; 0x26
    27be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	9a a3       	std	Y+34, r25	; 0x22
    27c8:	89 a3       	std	Y+33, r24	; 0x21
    27ca:	89 a1       	ldd	r24, Y+33	; 0x21
    27cc:	9a a1       	ldd	r25, Y+34	; 0x22
    27ce:	9e 8f       	std	Y+30, r25	; 0x1e
    27d0:	8d 8f       	std	Y+29, r24	; 0x1d
    27d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <LCD_displayCharacter+0x1ea>
    27da:	9e 8f       	std	Y+30, r25	; 0x1e
    27dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	69 ad       	ldd	r22, Y+57	; 0x39
    27e2:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <GPIO_writePort>
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	a0 e8       	ldi	r26, 0x80	; 128
    27ec:	bf e3       	ldi	r27, 0x3F	; 63
    27ee:	89 8f       	std	Y+25, r24	; 0x19
    27f0:	9a 8f       	std	Y+26, r25	; 0x1a
    27f2:	ab 8f       	std	Y+27, r26	; 0x1b
    27f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f6:	69 8d       	ldd	r22, Y+25	; 0x19
    27f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	4a ef       	ldi	r20, 0xFA	; 250
    2804:	54 e4       	ldi	r21, 0x44	; 68
    2806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	8d 8b       	std	Y+21, r24	; 0x15
    2810:	9e 8b       	std	Y+22, r25	; 0x16
    2812:	af 8b       	std	Y+23, r26	; 0x17
    2814:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2816:	6d 89       	ldd	r22, Y+21	; 0x15
    2818:	7e 89       	ldd	r23, Y+22	; 0x16
    281a:	8f 89       	ldd	r24, Y+23	; 0x17
    281c:	98 8d       	ldd	r25, Y+24	; 0x18
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e8       	ldi	r20, 0x80	; 128
    2824:	5f e3       	ldi	r21, 0x3F	; 63
    2826:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    282a:	88 23       	and	r24, r24
    282c:	2c f4       	brge	.+10     	; 0x2838 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9c 8b       	std	Y+20, r25	; 0x14
    2834:	8b 8b       	std	Y+19, r24	; 0x13
    2836:	3f c0       	rjmp	.+126    	; 0x28b6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2838:	6d 89       	ldd	r22, Y+21	; 0x15
    283a:	7e 89       	ldd	r23, Y+22	; 0x16
    283c:	8f 89       	ldd	r24, Y+23	; 0x17
    283e:	98 8d       	ldd	r25, Y+24	; 0x18
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	3f ef       	ldi	r19, 0xFF	; 255
    2844:	4f e7       	ldi	r20, 0x7F	; 127
    2846:	57 e4       	ldi	r21, 0x47	; 71
    2848:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    284c:	18 16       	cp	r1, r24
    284e:	4c f5       	brge	.+82     	; 0x28a2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2850:	69 8d       	ldd	r22, Y+25	; 0x19
    2852:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2854:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2856:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e2       	ldi	r20, 0x20	; 32
    285e:	51 e4       	ldi	r21, 0x41	; 65
    2860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	bc 01       	movw	r22, r24
    286a:	cd 01       	movw	r24, r26
    286c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9c 8b       	std	Y+20, r25	; 0x14
    2876:	8b 8b       	std	Y+19, r24	; 0x13
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <LCD_displayCharacter+0x2ac>
    287a:	88 ec       	ldi	r24, 0xC8	; 200
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9a 8b       	std	Y+18, r25	; 0x12
    2880:	89 8b       	std	Y+17, r24	; 0x11
    2882:	89 89       	ldd	r24, Y+17	; 0x11
    2884:	9a 89       	ldd	r25, Y+18	; 0x12
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <LCD_displayCharacter+0x29a>
    288a:	9a 8b       	std	Y+18, r25	; 0x12
    288c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288e:	8b 89       	ldd	r24, Y+19	; 0x13
    2890:	9c 89       	ldd	r25, Y+20	; 0x14
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	9c 8b       	std	Y+20, r25	; 0x14
    2896:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2898:	8b 89       	ldd	r24, Y+19	; 0x13
    289a:	9c 89       	ldd	r25, Y+20	; 0x14
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	69 f7       	brne	.-38     	; 0x287a <LCD_displayCharacter+0x28e>
    28a0:	14 c0       	rjmp	.+40     	; 0x28ca <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a2:	6d 89       	ldd	r22, Y+21	; 0x15
    28a4:	7e 89       	ldd	r23, Y+22	; 0x16
    28a6:	8f 89       	ldd	r24, Y+23	; 0x17
    28a8:	98 8d       	ldd	r25, Y+24	; 0x18
    28aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	9c 8b       	std	Y+20, r25	; 0x14
    28b4:	8b 8b       	std	Y+19, r24	; 0x13
    28b6:	8b 89       	ldd	r24, Y+19	; 0x13
    28b8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ba:	98 8b       	std	Y+16, r25	; 0x10
    28bc:	8f 87       	std	Y+15, r24	; 0x0f
    28be:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c0:	98 89       	ldd	r25, Y+16	; 0x10
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <LCD_displayCharacter+0x2d6>
    28c6:	98 8b       	std	Y+16, r25	; 0x10
    28c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	0e 94 87 0c 	call	0x190e	; 0x190e <GPIO_writePin>
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a0 e8       	ldi	r26, 0x80	; 128
    28da:	bf e3       	ldi	r27, 0x3F	; 63
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
    28de:	9c 87       	std	Y+12, r25	; 0x0c
    28e0:	ad 87       	std	Y+13, r26	; 0x0d
    28e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a ef       	ldi	r20, 0xFA	; 250
    28f2:	54 e4       	ldi	r21, 0x44	; 68
    28f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	8f 83       	std	Y+7, r24	; 0x07
    28fe:	98 87       	std	Y+8, r25	; 0x08
    2900:	a9 87       	std	Y+9, r26	; 0x09
    2902:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	2c f4       	brge	.+10     	; 0x2926 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9e 83       	std	Y+6, r25	; 0x06
    2922:	8d 83       	std	Y+5, r24	; 0x05
    2924:	3f c0       	rjmp	.+126    	; 0x29a4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2926:	6f 81       	ldd	r22, Y+7	; 0x07
    2928:	78 85       	ldd	r23, Y+8	; 0x08
    292a:	89 85       	ldd	r24, Y+9	; 0x09
    292c:	9a 85       	ldd	r25, Y+10	; 0x0a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	3f ef       	ldi	r19, 0xFF	; 255
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	57 e4       	ldi	r21, 0x47	; 71
    2936:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293a:	18 16       	cp	r1, r24
    293c:	4c f5       	brge	.+82     	; 0x2990 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2940:	7c 85       	ldd	r23, Y+12	; 0x0c
    2942:	8d 85       	ldd	r24, Y+13	; 0x0d
    2944:	9e 85       	ldd	r25, Y+14	; 0x0e
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e2       	ldi	r20, 0x20	; 32
    294c:	51 e4       	ldi	r21, 0x41	; 65
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	9e 83       	std	Y+6, r25	; 0x06
    2964:	8d 83       	std	Y+5, r24	; 0x05
    2966:	0f c0       	rjmp	.+30     	; 0x2986 <LCD_displayCharacter+0x39a>
    2968:	88 ec       	ldi	r24, 0xC8	; 200
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9c 83       	std	Y+4, r25	; 0x04
    296e:	8b 83       	std	Y+3, r24	; 0x03
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <LCD_displayCharacter+0x388>
    2978:	9c 83       	std	Y+4, r25	; 0x04
    297a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	9e 81       	ldd	r25, Y+6	; 0x06
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	9e 81       	ldd	r25, Y+6	; 0x06
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	69 f7       	brne	.-38     	; 0x2968 <LCD_displayCharacter+0x37c>
    298e:	14 c0       	rjmp	.+40     	; 0x29b8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	6f 81       	ldd	r22, Y+7	; 0x07
    2992:	78 85       	ldd	r23, Y+8	; 0x08
    2994:	89 85       	ldd	r24, Y+9	; 0x09
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	9e 83       	std	Y+6, r25	; 0x06
    29a2:	8d 83       	std	Y+5, r24	; 0x05
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <LCD_displayCharacter+0x3c4>
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    29b8:	e9 96       	adiw	r28, 0x39	; 57
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <LCD_displayString+0x6>
    29d0:	0f 92       	push	r0
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	9b 83       	std	Y+3, r25	; 0x03
    29d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29da:	19 82       	std	Y+1, r1	; 0x01
    29dc:	0e c0       	rjmp	.+28     	; 0x29fa <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	9b 81       	ldd	r25, Y+3	; 0x03
    29e8:	fc 01       	movw	r30, r24
    29ea:	e2 0f       	add	r30, r18
    29ec:	f3 1f       	adc	r31, r19
    29ee:	80 81       	ld	r24, Z
    29f0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayCharacter>
		i++;
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	8f 5f       	subi	r24, 0xFF	; 255
    29f8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	9b 81       	ldd	r25, Y+3	; 0x03
    2a04:	fc 01       	movw	r30, r24
    2a06:	e2 0f       	add	r30, r18
    2a08:	f3 1f       	adc	r31, r19
    2a0a:	80 81       	ld	r24, Z
    2a0c:	88 23       	and	r24, r24
    2a0e:	39 f7       	brne	.-50     	; 0x29de <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <LCD_moveCursor+0x6>
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <LCD_moveCursor+0x8>
    2a24:	0f 92       	push	r0
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	8a 83       	std	Y+2, r24	; 0x02
    2a2c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	3d 83       	std	Y+5, r19	; 0x05
    2a36:	2c 83       	std	Y+4, r18	; 0x04
    2a38:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3c:	81 30       	cpi	r24, 0x01	; 1
    2a3e:	91 05       	cpc	r25, r1
    2a40:	c1 f0       	breq	.+48     	; 0x2a72 <LCD_moveCursor+0x56>
    2a42:	2c 81       	ldd	r18, Y+4	; 0x04
    2a44:	3d 81       	ldd	r19, Y+5	; 0x05
    2a46:	22 30       	cpi	r18, 0x02	; 2
    2a48:	31 05       	cpc	r19, r1
    2a4a:	2c f4       	brge	.+10     	; 0x2a56 <LCD_moveCursor+0x3a>
    2a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	61 f0       	breq	.+24     	; 0x2a6c <LCD_moveCursor+0x50>
    2a54:	19 c0       	rjmp	.+50     	; 0x2a88 <LCD_moveCursor+0x6c>
    2a56:	2c 81       	ldd	r18, Y+4	; 0x04
    2a58:	3d 81       	ldd	r19, Y+5	; 0x05
    2a5a:	22 30       	cpi	r18, 0x02	; 2
    2a5c:	31 05       	cpc	r19, r1
    2a5e:	69 f0       	breq	.+26     	; 0x2a7a <LCD_moveCursor+0x5e>
    2a60:	8c 81       	ldd	r24, Y+4	; 0x04
    2a62:	9d 81       	ldd	r25, Y+5	; 0x05
    2a64:	83 30       	cpi	r24, 0x03	; 3
    2a66:	91 05       	cpc	r25, r1
    2a68:	61 f0       	breq	.+24     	; 0x2a82 <LCD_moveCursor+0x66>
    2a6a:	0e c0       	rjmp	.+28     	; 0x2a88 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	0b c0       	rjmp	.+22     	; 0x2a88 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	80 5c       	subi	r24, 0xC0	; 192
    2a76:	89 83       	std	Y+1, r24	; 0x01
    2a78:	07 c0       	rjmp	.+14     	; 0x2a88 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	80 5f       	subi	r24, 0xF0	; 240
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	03 c0       	rjmp	.+6      	; 0x2a88 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	80 5b       	subi	r24, 0xB0	; 176
    2a86:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	80 68       	ori	r24, 0x80	; 128
    2a8c:	0e 94 07 11 	call	0x220e	; 0x220e <LCD_sendCommand>
}
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <LCD_displayStringRowColumn+0x6>
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <LCD_displayStringRowColumn+0x8>
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	6a 83       	std	Y+2, r22	; 0x02
    2ab0:	5c 83       	std	Y+4, r21	; 0x04
    2ab2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	6a 81       	ldd	r22, Y+2	; 0x02
    2ab8:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
}
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	08 95       	ret

00002ad2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	62 97       	sbiw	r28, 0x12	; 18
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	9a 8b       	std	Y+18, r25	; 0x12
    2ae8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2aea:	89 89       	ldd	r24, Y+17	; 0x11
    2aec:	9a 89       	ldd	r25, Y+18	; 0x12
    2aee:	9e 01       	movw	r18, r28
    2af0:	2f 5f       	subi	r18, 0xFF	; 255
    2af2:	3f 4f       	sbci	r19, 0xFF	; 255
    2af4:	b9 01       	movw	r22, r18
    2af6:	4a e0       	ldi	r20, 0x0A	; 10
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	0e 94 36 18 	call	0x306c	; 0x306c <itoa>
   LCD_displayString(buff); /* Display the string */
    2afe:	ce 01       	movw	r24, r28
    2b00:	01 96       	adiw	r24, 0x01	; 1
    2b02:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
}
    2b06:	62 96       	adiw	r28, 0x12	; 18
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2b18:	df 93       	push	r29
    2b1a:	cf 93       	push	r28
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	0e 94 07 11 	call	0x220e	; 0x220e <LCD_sendCommand>
}
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect) {
    2b2c:	1f 92       	push	r1
    2b2e:	0f 92       	push	r0
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	0f 92       	push	r0
    2b34:	11 24       	eor	r1, r1
    2b36:	2f 93       	push	r18
    2b38:	3f 93       	push	r19
    2b3a:	4f 93       	push	r20
    2b3c:	5f 93       	push	r21
    2b3e:	6f 93       	push	r22
    2b40:	7f 93       	push	r23
    2b42:	8f 93       	push	r24
    2b44:	9f 93       	push	r25
    2b46:	af 93       	push	r26
    2b48:	bf 93       	push	r27
    2b4a:	ef 93       	push	r30
    2b4c:	ff 93       	push	r31
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER1_callBack_ptr != NULL_PTR) {
    2b56:	80 91 10 01 	lds	r24, 0x0110
    2b5a:	90 91 11 01 	lds	r25, 0x0111
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	29 f0       	breq	.+10     	; 0x2b6c <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBack_ptr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b62:	e0 91 10 01 	lds	r30, 0x0110
    2b66:	f0 91 11 01 	lds	r31, 0x0111
    2b6a:	09 95       	icall
	}
}
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	ff 91       	pop	r31
    2b72:	ef 91       	pop	r30
    2b74:	bf 91       	pop	r27
    2b76:	af 91       	pop	r26
    2b78:	9f 91       	pop	r25
    2b7a:	8f 91       	pop	r24
    2b7c:	7f 91       	pop	r23
    2b7e:	6f 91       	pop	r22
    2b80:	5f 91       	pop	r21
    2b82:	4f 91       	pop	r20
    2b84:	3f 91       	pop	r19
    2b86:	2f 91       	pop	r18
    2b88:	0f 90       	pop	r0
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	0f 90       	pop	r0
    2b8e:	1f 90       	pop	r1
    2b90:	18 95       	reti

00002b92 <__vector_9>:
ISR(TIMER1_OVF_vect) {
    2b92:	1f 92       	push	r1
    2b94:	0f 92       	push	r0
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	0f 92       	push	r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	2f 93       	push	r18
    2b9e:	3f 93       	push	r19
    2ba0:	4f 93       	push	r20
    2ba2:	5f 93       	push	r21
    2ba4:	6f 93       	push	r22
    2ba6:	7f 93       	push	r23
    2ba8:	8f 93       	push	r24
    2baa:	9f 93       	push	r25
    2bac:	af 93       	push	r26
    2bae:	bf 93       	push	r27
    2bb0:	ef 93       	push	r30
    2bb2:	ff 93       	push	r31
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER1_callBack_ptr != NULL_PTR) {
    2bbc:	80 91 10 01 	lds	r24, 0x0110
    2bc0:	90 91 11 01 	lds	r25, 0x0111
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	29 f0       	breq	.+10     	; 0x2bd2 <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBack_ptr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2bc8:	e0 91 10 01 	lds	r30, 0x0110
    2bcc:	f0 91 11 01 	lds	r31, 0x0111
    2bd0:	09 95       	icall
	}
}
    2bd2:	cf 91       	pop	r28
    2bd4:	df 91       	pop	r29
    2bd6:	ff 91       	pop	r31
    2bd8:	ef 91       	pop	r30
    2bda:	bf 91       	pop	r27
    2bdc:	af 91       	pop	r26
    2bde:	9f 91       	pop	r25
    2be0:	8f 91       	pop	r24
    2be2:	7f 91       	pop	r23
    2be4:	6f 91       	pop	r22
    2be6:	5f 91       	pop	r21
    2be8:	4f 91       	pop	r20
    2bea:	3f 91       	pop	r19
    2bec:	2f 91       	pop	r18
    2bee:	0f 90       	pop	r0
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	0f 90       	pop	r0
    2bf4:	1f 90       	pop	r1
    2bf6:	18 95       	reti

00002bf8 <Timer1_init>:
 * 	1. Set the required mode.
 * 	2. Set the required initial and compare value.
 * 	2. Set the required prescaler.
 * 	4. Initialize Timer1 Registers
 */
void Timer1_init(const TIMER1_ConfigType *Config_Ptr) {
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <Timer1_init+0x6>
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <Timer1_init+0x8>
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	9a 83       	std	Y+2, r25	; 0x02
    2c06:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->mode) {
    2c08:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0c:	80 81       	ld	r24, Z
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	3c 83       	std	Y+4, r19	; 0x04
    2c14:	2b 83       	std	Y+3, r18	; 0x03
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	31 f0       	breq	.+12     	; 0x2c2a <Timer1_init+0x32>
    2c1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c20:	3c 81       	ldd	r19, Y+4	; 0x04
    2c22:	22 30       	cpi	r18, 0x02	; 2
    2c24:	31 05       	cpc	r19, r1
    2c26:	19 f1       	breq	.+70     	; 0x2c6e <Timer1_init+0x76>
    2c28:	54 c0       	rjmp	.+168    	; 0x2cd2 <Timer1_init+0xda>
	case 0: {
		/* Timer1 operates in Normal Mode (Non-PWM) */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    2c2a:	ef e4       	ldi	r30, 0x4F	; 79
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	8c e0       	ldi	r24, 0x0C	; 12
    2c30:	80 83       	st	Z, r24
		/* Initial Value for Timer1 */
		TCNT1 = Config_Ptr->initialValue;
    2c32:	ac e4       	ldi	r26, 0x4C	; 76
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e9 81       	ldd	r30, Y+1	; 0x01
    2c38:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3a:	81 81       	ldd	r24, Z+1	; 0x01
    2c3c:	92 81       	ldd	r25, Z+2	; 0x02
    2c3e:	11 96       	adiw	r26, 0x01	; 1
    2c40:	9c 93       	st	X, r25
    2c42:	8e 93       	st	-X, r24
		/* Enable the Overflow interrupt to generate an interrupt when the register overflows*/
		SET_BIT(TIMSK, TOIE1);
    2c44:	a9 e5       	ldi	r26, 0x59	; 89
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e9 e5       	ldi	r30, 0x59	; 89
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	84 60       	ori	r24, 0x04	; 4
    2c50:	8c 93       	st	X, r24
		/* Enable the global interrupt flag*/
		SREG |= (1 << 7);
    2c52:	af e5       	ldi	r26, 0x5F	; 95
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	ef e5       	ldi	r30, 0x5F	; 95
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	80 68       	ori	r24, 0x80	; 128
    2c5e:	8c 93       	st	X, r24
		/*insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register*/
		TCCR1B = Config_Ptr->prescaler;
    2c60:	ae e4       	ldi	r26, 0x4E	; 78
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e9 81       	ldd	r30, Y+1	; 0x01
    2c66:	fa 81       	ldd	r31, Y+2	; 0x02
    2c68:	85 81       	ldd	r24, Z+5	; 0x05
    2c6a:	8c 93       	st	X, r24
    2c6c:	32 c0       	rjmp	.+100    	; 0x2cd2 <Timer1_init+0xda>
		break;
	}
	case 2: {
		/* Timer1 operates in Compare Mode on (Non-PWM) */
		TCCR1A = (1 << FOC1A);
    2c6e:	ef e4       	ldi	r30, 0x4F	; 79
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	88 e0       	ldi	r24, 0x08	; 8
    2c74:	80 83       	st	Z, r24
		/* Initial Value for Timer1 */
		TCNT1 = Config_Ptr->initialValue;
    2c76:	ac e4       	ldi	r26, 0x4C	; 76
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c7e:	81 81       	ldd	r24, Z+1	; 0x01
    2c80:	92 81       	ldd	r25, Z+2	; 0x02
    2c82:	11 96       	adiw	r26, 0x01	; 1
    2c84:	9c 93       	st	X, r25
    2c86:	8e 93       	st	-X, r24
		/* Compare Value for Timer1 */
		OCR1A = Config_Ptr->compareValue;
    2c88:	aa e4       	ldi	r26, 0x4A	; 74
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c90:	83 81       	ldd	r24, Z+3	; 0x03
    2c92:	94 81       	ldd	r25, Z+4	; 0x04
    2c94:	11 96       	adiw	r26, 0x01	; 1
    2c96:	9c 93       	st	X, r25
    2c98:	8e 93       	st	-X, r24
		/* Enable the Timer1 Output Compare A interrupt to generate an interrupt when the register Matches the value */
		TIMSK = (1 << OCIE1A);
    2c9a:	e9 e5       	ldi	r30, 0x59	; 89
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 e1       	ldi	r24, 0x10	; 16
    2ca0:	80 83       	st	Z, r24
		/* Enable the global interrupt flag*/
		SREG |= (1 << 7);
    2ca2:	af e5       	ldi	r26, 0x5F	; 95
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	ef e5       	ldi	r30, 0x5F	; 95
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	80 68       	ori	r24, 0x80	; 128
    2cae:	8c 93       	st	X, r24
		/*insert the required clock value in the first three bits (CS10, CS11 and CS12) of TCCR1B Register
		 * and the WGM12 BIT for CTC mode
		 */
		TCCR1B = ((Config_Ptr->mode) << 2) | (Config_Ptr->prescaler);
    2cb0:	ae e4       	ldi	r26, 0x4E	; 78
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb8:	80 81       	ld	r24, Z
    2cba:	88 2f       	mov	r24, r24
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	88 0f       	add	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	98 2f       	mov	r25, r24
    2cc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cca:	fa 81       	ldd	r31, Y+2	; 0x02
    2ccc:	85 81       	ldd	r24, Z+5	; 0x05
    2cce:	89 2b       	or	r24, r25
    2cd0:	8c 93       	st	X, r24
	}
	}
}
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void)) {
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <Timer1_setCallBack+0x6>
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	9a 83       	std	Y+2, r25	; 0x02
    2cec:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_TIMER1_callBack_ptr = a_ptr;
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf2:	90 93 11 01 	sts	0x0111, r25
    2cf6:	80 93 10 01 	sts	0x0110, r24
}
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <Timer1_deInit>:

void Timer1_deInit(void) {
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2d0c:	ef e4       	ldi	r30, 0x4F	; 79
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	10 82       	st	Z, r1
	TCNT1 = 0;
    2d12:	ec e4       	ldi	r30, 0x4C	; 76
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	11 82       	std	Z+1, r1	; 0x01
    2d18:	10 82       	st	Z, r1
	OCR1A = 0;
    2d1a:	ea e4       	ldi	r30, 0x4A	; 74
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	11 82       	std	Z+1, r1	; 0x01
    2d20:	10 82       	st	Z, r1
	TCCR1B = 0;
    2d22:	ee e4       	ldi	r30, 0x4E	; 78
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	10 82       	st	Z, r1
	/* Disable the Output Compare A interrupt */
	CLEAR_BIT(TIMSK, OCIE1A);
    2d28:	a9 e5       	ldi	r26, 0x59	; 89
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	e9 e5       	ldi	r30, 0x59	; 89
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	8f 7e       	andi	r24, 0xEF	; 239
    2d34:	8c 93       	st	X, r24
	/* Disable the Overflow interrupt */
	CLEAR_BIT(TIMSK, TOIE1);
    2d36:	a9 e5       	ldi	r26, 0x59	; 89
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	e9 e5       	ldi	r30, 0x59	; 89
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	8b 7f       	andi	r24, 0xFB	; 251
    2d42:	8c 93       	st	X, r24
	/* Reset the global pointer value */
	g_TIMER1_callBack_ptr = NULL_PTR;
    2d44:	10 92 11 01 	sts	0x0111, r1
    2d48:	10 92 10 01 	sts	0x0110, r1
}
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <USART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void USART_init(const USART_ConfigType *Config_Ptr) {
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <USART_init+0x6>
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <USART_init+0x8>
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	9c 83       	std	Y+4, r25	; 0x04
    2d60:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2d62:	1a 82       	std	Y+2, r1	; 0x02
    2d64:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    2d66:	eb e2       	ldi	r30, 0x2B	; 43
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    2d6e:	ea e2       	ldi	r30, 0x2A	; 42
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	88 e1       	ldi	r24, 0x18	; 24
    2d74:	80 83       	st	Z, r24
	 * UPM1:0    Disable parity bit
	 * USBS      One stop bit
	 * UCSZ1:0   For 8-bit data mode
	 * UCPOL     Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL);
    2d76:	e0 e4       	ldi	r30, 0x40	; 64
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 e8       	ldi	r24, 0x80	; 128
    2d7c:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->mode) << 6);
    2d7e:	a0 e4       	ldi	r26, 0x40	; 64
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	e0 e4       	ldi	r30, 0x40	; 64
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	28 2f       	mov	r18, r24
    2d8a:	2f 7b       	andi	r18, 0xBF	; 191
    2d8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d90:	80 81       	ld	r24, Z
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	00 24       	eor	r0, r0
    2d98:	96 95       	lsr	r25
    2d9a:	87 95       	ror	r24
    2d9c:	07 94       	ror	r0
    2d9e:	96 95       	lsr	r25
    2da0:	87 95       	ror	r24
    2da2:	07 94       	ror	r0
    2da4:	98 2f       	mov	r25, r24
    2da6:	80 2d       	mov	r24, r0
    2da8:	82 2b       	or	r24, r18
    2daa:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity) << 5);
    2dac:	a0 e4       	ldi	r26, 0x40	; 64
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	e0 e4       	ldi	r30, 0x40	; 64
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	28 2f       	mov	r18, r24
    2db8:	2f 7c       	andi	r18, 0xCF	; 207
    2dba:	eb 81       	ldd	r30, Y+3	; 0x03
    2dbc:	fc 81       	ldd	r31, Y+4	; 0x04
    2dbe:	81 81       	ldd	r24, Z+1	; 0x01
    2dc0:	88 2f       	mov	r24, r24
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	82 95       	swap	r24
    2dca:	92 95       	swap	r25
    2dcc:	90 7f       	andi	r25, 0xF0	; 240
    2dce:	98 27       	eor	r25, r24
    2dd0:	80 7f       	andi	r24, 0xF0	; 240
    2dd2:	98 27       	eor	r25, r24
    2dd4:	82 2b       	or	r24, r18
    2dd6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop) << 3);
    2dd8:	a0 e4       	ldi	r26, 0x40	; 64
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	e0 e4       	ldi	r30, 0x40	; 64
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	28 2f       	mov	r18, r24
    2de4:	27 7f       	andi	r18, 0xF7	; 247
    2de6:	eb 81       	ldd	r30, Y+3	; 0x03
    2de8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dea:	82 81       	ldd	r24, Z+2	; 0x02
    2dec:	88 2f       	mov	r24, r24
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	88 0f       	add	r24, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	82 2b       	or	r24, r18
    2dfe:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->size) << 1);
    2e00:	a0 e4       	ldi	r26, 0x40	; 64
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	e0 e4       	ldi	r30, 0x40	; 64
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 81       	ld	r24, Z
    2e0a:	28 2f       	mov	r18, r24
    2e0c:	29 7f       	andi	r18, 0xF9	; 249
    2e0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e10:	fc 81       	ldd	r31, Y+4	; 0x04
    2e12:	83 81       	ldd	r24, Z+3	; 0x03
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	88 0f       	add	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	82 2b       	or	r24, r18
    2e1e:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->BaudRate) * 8UL))) - 1);
    2e20:	eb 81       	ldd	r30, Y+3	; 0x03
    2e22:	fc 81       	ldd	r31, Y+4	; 0x04
    2e24:	84 81       	ldd	r24, Z+4	; 0x04
    2e26:	95 81       	ldd	r25, Z+5	; 0x05
    2e28:	cc 01       	movw	r24, r24
    2e2a:	a0 e0       	ldi	r26, 0x00	; 0
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	88 0f       	add	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	aa 1f       	adc	r26, r26
    2e34:	bb 1f       	adc	r27, r27
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	aa 1f       	adc	r26, r26
    2e3c:	bb 1f       	adc	r27, r27
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	aa 1f       	adc	r26, r26
    2e44:	bb 1f       	adc	r27, r27
    2e46:	9c 01       	movw	r18, r24
    2e48:	ad 01       	movw	r20, r26
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	92 e1       	ldi	r25, 0x12	; 18
    2e4e:	aa e7       	ldi	r26, 0x7A	; 122
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	bc 01       	movw	r22, r24
    2e54:	cd 01       	movw	r24, r26
    2e56:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodsi4>
    2e5a:	da 01       	movw	r26, r20
    2e5c:	c9 01       	movw	r24, r18
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	9a 83       	std	Y+2, r25	; 0x02
    2e62:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    2e64:	e0 e4       	ldi	r30, 0x40	; 64
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6c:	89 2f       	mov	r24, r25
    2e6e:	99 27       	eor	r25, r25
    2e70:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e72:	e9 e2       	ldi	r30, 0x29	; 41
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	80 83       	st	Z, r24
}
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	08 95       	ret

00002e88 <USART_sendByte>:
void USART_sendByte(uint8 data) {
    2e88:	df 93       	push	r29
    2e8a:	cf 93       	push	r28
    2e8c:	0f 92       	push	r0
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    2e94:	ec e2       	ldi	r30, 0x2C	; 44
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(UCSRA, TXC)) {
    2e9c:	eb e2       	ldi	r30, 0x2B	; 43
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	88 2f       	mov	r24, r24
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	80 74       	andi	r24, 0x40	; 64
    2ea8:	90 70       	andi	r25, 0x00	; 0
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	b9 f3       	breq	.-18     	; 0x2e9c <USART_sendByte+0x14>
	} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA, TXC); // Clear the TXC flag
    2eae:	ab e2       	ldi	r26, 0x2B	; 43
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	eb e2       	ldi	r30, 0x2B	; 43
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	80 64       	ori	r24, 0x40	; 64
    2eba:	8c 93       	st	X, r24
}
    2ebc:	0f 90       	pop	r0
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <USART_recieveByte>:
uint8 USART_recieveByte(void) {
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    2ecc:	eb e2       	ldi	r30, 0x2B	; 43
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	88 23       	and	r24, r24
    2ed4:	dc f7       	brge	.-10     	; 0x2ecc <USART_recieveByte+0x8>
	}
	return UDR;
    2ed6:	ec e2       	ldi	r30, 0x2C	; 44
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
}
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <USART_sendString>:
void USART_sendString(const uint8 *Str) {
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	00 d0       	rcall	.+0      	; 0x2ee8 <USART_sendString+0x6>
    2ee8:	0f 92       	push	r0
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	9b 83       	std	Y+3, r25	; 0x03
    2ef0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ef2:	19 82       	std	Y+1, r1	; 0x01
    2ef4:	0e c0       	rjmp	.+28     	; 0x2f12 <USART_sendString+0x30>
	/* Send the whole string */
	while (Str[i] != '\0') {
		USART_sendByte(Str[i]);
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	28 2f       	mov	r18, r24
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	9b 81       	ldd	r25, Y+3	; 0x03
    2f00:	fc 01       	movw	r30, r24
    2f02:	e2 0f       	add	r30, r18
    2f04:	f3 1f       	adc	r31, r19
    2f06:	80 81       	ld	r24, Z
    2f08:	0e 94 44 17 	call	0x2e88	; 0x2e88 <USART_sendByte>
		i++;
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	8f 5f       	subi	r24, 0xFF	; 255
    2f10:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}
void USART_sendString(const uint8 *Str) {
	uint8 i = 0;
	/* Send the whole string */
	while (Str[i] != '\0') {
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	e2 0f       	add	r30, r18
    2f20:	f3 1f       	adc	r31, r19
    2f22:	80 81       	ld	r24, Z
    2f24:	88 23       	and	r24, r24
    2f26:	39 f7       	brne	.-50     	; 0x2ef6 <USART_sendString+0x14>
		USART_sendByte(Str[i]);
		i++;
	}
}
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <USART_receiveString>:
void USART_receiveString(uint8 *Str) {
    2f34:	0f 93       	push	r16
    2f36:	1f 93       	push	r17
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	00 d0       	rcall	.+0      	; 0x2f3e <USART_receiveString+0xa>
    2f3e:	0f 92       	push	r0
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	9b 83       	std	Y+3, r25	; 0x03
    2f46:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f48:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = USART_recieveByte();
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	9b 81       	ldd	r25, Y+3	; 0x03
    2f54:	8c 01       	movw	r16, r24
    2f56:	02 0f       	add	r16, r18
    2f58:	13 1f       	adc	r17, r19
    2f5a:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    2f5e:	f8 01       	movw	r30, r16
    2f60:	80 83       	st	Z, r24
    2f62:	0f c0       	rjmp	.+30     	; 0x2f82 <USART_receiveString+0x4e>

	/* Receive the whole string until the '$' */
	while (Str[i] != '$') {
		i++;
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	8f 5f       	subi	r24, 0xFF	; 255
    2f68:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_recieveByte();
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	9b 81       	ldd	r25, Y+3	; 0x03
    2f74:	8c 01       	movw	r16, r24
    2f76:	02 0f       	add	r16, r18
    2f78:	13 1f       	adc	r17, r19
    2f7a:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <USART_recieveByte>
    2f7e:	f8 01       	movw	r30, r16
    2f80:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = USART_recieveByte();

	/* Receive the whole string until the '$' */
	while (Str[i] != '$') {
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	28 2f       	mov	r18, r24
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	e2 0f       	add	r30, r18
    2f90:	f3 1f       	adc	r31, r19
    2f92:	80 81       	ld	r24, Z
    2f94:	84 32       	cpi	r24, 0x24	; 36
    2f96:	31 f7       	brne	.-52     	; 0x2f64 <USART_receiveString+0x30>
		i++;
		Str[i] = USART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	28 2f       	mov	r18, r24
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	e2 0f       	add	r30, r18
    2fa6:	f3 1f       	adc	r31, r19
    2fa8:	10 82       	st	Z, r1
}
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	1f 91       	pop	r17
    2fb6:	0f 91       	pop	r16
    2fb8:	08 95       	ret

00002fba <__udivmodsi4>:
    2fba:	a1 e2       	ldi	r26, 0x21	; 33
    2fbc:	1a 2e       	mov	r1, r26
    2fbe:	aa 1b       	sub	r26, r26
    2fc0:	bb 1b       	sub	r27, r27
    2fc2:	fd 01       	movw	r30, r26
    2fc4:	0d c0       	rjmp	.+26     	; 0x2fe0 <__udivmodsi4_ep>

00002fc6 <__udivmodsi4_loop>:
    2fc6:	aa 1f       	adc	r26, r26
    2fc8:	bb 1f       	adc	r27, r27
    2fca:	ee 1f       	adc	r30, r30
    2fcc:	ff 1f       	adc	r31, r31
    2fce:	a2 17       	cp	r26, r18
    2fd0:	b3 07       	cpc	r27, r19
    2fd2:	e4 07       	cpc	r30, r20
    2fd4:	f5 07       	cpc	r31, r21
    2fd6:	20 f0       	brcs	.+8      	; 0x2fe0 <__udivmodsi4_ep>
    2fd8:	a2 1b       	sub	r26, r18
    2fda:	b3 0b       	sbc	r27, r19
    2fdc:	e4 0b       	sbc	r30, r20
    2fde:	f5 0b       	sbc	r31, r21

00002fe0 <__udivmodsi4_ep>:
    2fe0:	66 1f       	adc	r22, r22
    2fe2:	77 1f       	adc	r23, r23
    2fe4:	88 1f       	adc	r24, r24
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	1a 94       	dec	r1
    2fea:	69 f7       	brne	.-38     	; 0x2fc6 <__udivmodsi4_loop>
    2fec:	60 95       	com	r22
    2fee:	70 95       	com	r23
    2ff0:	80 95       	com	r24
    2ff2:	90 95       	com	r25
    2ff4:	9b 01       	movw	r18, r22
    2ff6:	ac 01       	movw	r20, r24
    2ff8:	bd 01       	movw	r22, r26
    2ffa:	cf 01       	movw	r24, r30
    2ffc:	08 95       	ret

00002ffe <__prologue_saves__>:
    2ffe:	2f 92       	push	r2
    3000:	3f 92       	push	r3
    3002:	4f 92       	push	r4
    3004:	5f 92       	push	r5
    3006:	6f 92       	push	r6
    3008:	7f 92       	push	r7
    300a:	8f 92       	push	r8
    300c:	9f 92       	push	r9
    300e:	af 92       	push	r10
    3010:	bf 92       	push	r11
    3012:	cf 92       	push	r12
    3014:	df 92       	push	r13
    3016:	ef 92       	push	r14
    3018:	ff 92       	push	r15
    301a:	0f 93       	push	r16
    301c:	1f 93       	push	r17
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	ca 1b       	sub	r28, r26
    3028:	db 0b       	sbc	r29, r27
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	09 94       	ijmp

00003036 <__epilogue_restores__>:
    3036:	2a 88       	ldd	r2, Y+18	; 0x12
    3038:	39 88       	ldd	r3, Y+17	; 0x11
    303a:	48 88       	ldd	r4, Y+16	; 0x10
    303c:	5f 84       	ldd	r5, Y+15	; 0x0f
    303e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3040:	7d 84       	ldd	r7, Y+13	; 0x0d
    3042:	8c 84       	ldd	r8, Y+12	; 0x0c
    3044:	9b 84       	ldd	r9, Y+11	; 0x0b
    3046:	aa 84       	ldd	r10, Y+10	; 0x0a
    3048:	b9 84       	ldd	r11, Y+9	; 0x09
    304a:	c8 84       	ldd	r12, Y+8	; 0x08
    304c:	df 80       	ldd	r13, Y+7	; 0x07
    304e:	ee 80       	ldd	r14, Y+6	; 0x06
    3050:	fd 80       	ldd	r15, Y+5	; 0x05
    3052:	0c 81       	ldd	r16, Y+4	; 0x04
    3054:	1b 81       	ldd	r17, Y+3	; 0x03
    3056:	aa 81       	ldd	r26, Y+2	; 0x02
    3058:	b9 81       	ldd	r27, Y+1	; 0x01
    305a:	ce 0f       	add	r28, r30
    305c:	d1 1d       	adc	r29, r1
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	ed 01       	movw	r28, r26
    306a:	08 95       	ret

0000306c <itoa>:
    306c:	fb 01       	movw	r30, r22
    306e:	9f 01       	movw	r18, r30
    3070:	e8 94       	clt
    3072:	42 30       	cpi	r20, 0x02	; 2
    3074:	c4 f0       	brlt	.+48     	; 0x30a6 <itoa+0x3a>
    3076:	45 32       	cpi	r20, 0x25	; 37
    3078:	b4 f4       	brge	.+44     	; 0x30a6 <itoa+0x3a>
    307a:	4a 30       	cpi	r20, 0x0A	; 10
    307c:	29 f4       	brne	.+10     	; 0x3088 <itoa+0x1c>
    307e:	97 fb       	bst	r25, 7
    3080:	1e f4       	brtc	.+6      	; 0x3088 <itoa+0x1c>
    3082:	90 95       	com	r25
    3084:	81 95       	neg	r24
    3086:	9f 4f       	sbci	r25, 0xFF	; 255
    3088:	64 2f       	mov	r22, r20
    308a:	77 27       	eor	r23, r23
    308c:	0e 94 67 18 	call	0x30ce	; 0x30ce <__udivmodhi4>
    3090:	80 5d       	subi	r24, 0xD0	; 208
    3092:	8a 33       	cpi	r24, 0x3A	; 58
    3094:	0c f0       	brlt	.+2      	; 0x3098 <itoa+0x2c>
    3096:	89 5d       	subi	r24, 0xD9	; 217
    3098:	81 93       	st	Z+, r24
    309a:	cb 01       	movw	r24, r22
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	a1 f7       	brne	.-24     	; 0x3088 <itoa+0x1c>
    30a0:	16 f4       	brtc	.+4      	; 0x30a6 <itoa+0x3a>
    30a2:	5d e2       	ldi	r21, 0x2D	; 45
    30a4:	51 93       	st	Z+, r21
    30a6:	10 82       	st	Z, r1
    30a8:	c9 01       	movw	r24, r18
    30aa:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <strrev>

000030ae <strrev>:
    30ae:	dc 01       	movw	r26, r24
    30b0:	fc 01       	movw	r30, r24
    30b2:	67 2f       	mov	r22, r23
    30b4:	71 91       	ld	r23, Z+
    30b6:	77 23       	and	r23, r23
    30b8:	e1 f7       	brne	.-8      	; 0x30b2 <strrev+0x4>
    30ba:	32 97       	sbiw	r30, 0x02	; 2
    30bc:	04 c0       	rjmp	.+8      	; 0x30c6 <strrev+0x18>
    30be:	7c 91       	ld	r23, X
    30c0:	6d 93       	st	X+, r22
    30c2:	70 83       	st	Z, r23
    30c4:	62 91       	ld	r22, -Z
    30c6:	ae 17       	cp	r26, r30
    30c8:	bf 07       	cpc	r27, r31
    30ca:	c8 f3       	brcs	.-14     	; 0x30be <strrev+0x10>
    30cc:	08 95       	ret

000030ce <__udivmodhi4>:
    30ce:	aa 1b       	sub	r26, r26
    30d0:	bb 1b       	sub	r27, r27
    30d2:	51 e1       	ldi	r21, 0x11	; 17
    30d4:	07 c0       	rjmp	.+14     	; 0x30e4 <__udivmodhi4_ep>

000030d6 <__udivmodhi4_loop>:
    30d6:	aa 1f       	adc	r26, r26
    30d8:	bb 1f       	adc	r27, r27
    30da:	a6 17       	cp	r26, r22
    30dc:	b7 07       	cpc	r27, r23
    30de:	10 f0       	brcs	.+4      	; 0x30e4 <__udivmodhi4_ep>
    30e0:	a6 1b       	sub	r26, r22
    30e2:	b7 0b       	sbc	r27, r23

000030e4 <__udivmodhi4_ep>:
    30e4:	88 1f       	adc	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	5a 95       	dec	r21
    30ea:	a9 f7       	brne	.-22     	; 0x30d6 <__udivmodhi4_loop>
    30ec:	80 95       	com	r24
    30ee:	90 95       	com	r25
    30f0:	bc 01       	movw	r22, r24
    30f2:	cd 01       	movw	r24, r26
    30f4:	08 95       	ret

000030f6 <_exit>:
    30f6:	f8 94       	cli

000030f8 <__stop_program>:
    30f8:	ff cf       	rjmp	.-2      	; 0x30f8 <__stop_program>
